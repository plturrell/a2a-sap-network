<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI"
                  id="A2ASmartContractProcesses"
                  targetNamespace="http://a2a.smartcontracts.processes">

  <!-- Main Process: Smart Contract Agent Registration -->
  <bpmn:process id="SmartContractAgentRegistrationProcess" name="Smart Contract Agent Registration Process" isExecutable="true">
    
    <!-- Start Event -->
    <bpmn:startEvent id="StartEvent_SmartContractRegistration" name="Agent Registration with Blockchain Request">
      <bpmn:outgoing>SequenceFlow_ToValidateRegistrationRequest</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_SmartContractRegistrationRequest"/>
    </bpmn:startEvent>

    <!-- Validate Registration Request -->
    <bpmn:serviceTask id="ServiceTask_ValidateRegistrationRequest" name="Validate Registration Request" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToValidateRegistrationRequest</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCheckStakeRequirement</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_RegistrationRequest" name="registrationRequest"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ValidationResult" name="validationResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Check Stake Requirement -->
    <bpmn:serviceTask id="ServiceTask_CheckStakeRequirement" name="Check Minimum Stake Requirement" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToCheckStakeRequirement</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToStakeGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_RegistrationRequest" name="registrationRequest"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_StakeValidation" name="stakeValidation"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Stake Validation Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_StakeValidation" name="Sufficient Stake?">
      <bpmn:incoming>SequenceFlow_ToStakeGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_StakeValid</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_StakeInvalid</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Register in A2A Registry -->
    <bpmn:serviceTask id="ServiceTask_RegisterInA2ARegistry" name="Register Agent in A2A Registry" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_StakeValid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToUploadMetadataIPFS</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentCard" name="agentCard"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_RegistryResult" name="registryResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Upload Metadata to IPFS -->
    <bpmn:serviceTask id="ServiceTask_UploadMetadataIPFS" name="Upload Agent Metadata to IPFS" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToUploadMetadataIPFS</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToHashCapabilities</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentCard" name="agentCard"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_IPFSHash" name="ipfsHash"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Hash Capabilities -->
    <bpmn:serviceTask id="ServiceTask_HashCapabilities" name="Generate Capability Hashes" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToHashCapabilities</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToBlockchainRegistration</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentCard" name="agentCard"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_CapabilityHashes" name="capabilityHashes"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Register on Blockchain -->
    <bpmn:serviceTask id="ServiceTask_RegisterOnBlockchain" name="Register Agent on Blockchain" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToBlockchainRegistration</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToTransactionGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentId" name="agentId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_IPFSHash" name="ipfsHash"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_CapabilityHashes" name="capabilityHashes"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_StakeAmount" name="stakeAmount"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_TransactionHash" name="transactionHash"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Transaction Confirmation Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_TransactionConfirmation" name="Transaction Confirmed?">
      <bpmn:incoming>SequenceFlow_ToTransactionGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_TransactionSuccess</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_TransactionFailed</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Initialize Trust Score -->
    <bpmn:serviceTask id="ServiceTask_InitializeTrustScore" name="Initialize Agent Trust Score" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_TransactionSuccess</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToNotifyRegistration</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentId" name="agentId"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_TrustInitResult" name="trustInitResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Notify Registration Success -->
    <bpmn:serviceTask id="ServiceTask_NotifyRegistrationSuccess" name="Notify Registration Success" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToNotifyRegistration</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToRegistrationSuccess</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_RegistryResult" name="registryResult"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_TransactionHash" name="transactionHash"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_SuccessNotification" name="successNotification"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Registration Success End -->
    <bpmn:endEvent id="EndEvent_RegistrationSuccess" name="Smart Contract Registration Successful">
      <bpmn:incoming>SequenceFlow_ToRegistrationSuccess</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_SmartContractRegistrationSuccess"/>
    </bpmn:endEvent>

    <!-- Handle Insufficient Stake -->
    <bpmn:serviceTask id="ServiceTask_HandleInsufficientStake" name="Handle Insufficient Stake" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_StakeInvalid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToStakeFailure</bpmn:outgoing>
    </bpmn:serviceTask>

    <!-- Handle Transaction Failure -->
    <bpmn:serviceTask id="ServiceTask_HandleTransactionFailure" name="Handle Blockchain Transaction Failure" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_TransactionFailed</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToTransactionFailure</bpmn:outgoing>
    </bpmn:serviceTask>

    <!-- Stake Failure End -->
    <bpmn:endEvent id="EndEvent_StakeFailure" name="Insufficient Stake">
      <bpmn:incoming>SequenceFlow_ToStakeFailure</bpmn:incoming>
      <bpmn:errorEventDefinition errorRef="Error_InsufficientStake"/>
    </bpmn:endEvent>

    <!-- Transaction Failure End -->
    <bpmn:endEvent id="EndEvent_TransactionFailure" name="Blockchain Transaction Failed">
      <bpmn:incoming>SequenceFlow_ToTransactionFailure</bpmn:incoming>
      <bpmn:errorEventDefinition errorRef="Error_BlockchainTransactionFailure"/>
    </bpmn:endEvent>

    <!-- Sequence Flows -->
    <bpmn:sequenceFlow id="SequenceFlow_ToValidateRegistrationRequest" sourceRef="StartEvent_SmartContractRegistration" targetRef="ServiceTask_ValidateRegistrationRequest"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToCheckStakeRequirement" sourceRef="ServiceTask_ValidateRegistrationRequest" targetRef="ServiceTask_CheckStakeRequirement"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToStakeGateway" sourceRef="ServiceTask_CheckStakeRequirement" targetRef="ExclusiveGateway_StakeValidation"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_StakeValid" sourceRef="ExclusiveGateway_StakeValidation" targetRef="ServiceTask_RegisterInA2ARegistry">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${stakeValidation.sufficient == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_StakeInvalid" sourceRef="ExclusiveGateway_StakeValidation" targetRef="ServiceTask_HandleInsufficientStake">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${stakeValidation.sufficient == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToUploadMetadataIPFS" sourceRef="ServiceTask_RegisterInA2ARegistry" targetRef="ServiceTask_UploadMetadataIPFS"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToHashCapabilities" sourceRef="ServiceTask_UploadMetadataIPFS" targetRef="ServiceTask_HashCapabilities"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToBlockchainRegistration" sourceRef="ServiceTask_HashCapabilities" targetRef="ServiceTask_RegisterOnBlockchain"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToTransactionGateway" sourceRef="ServiceTask_RegisterOnBlockchain" targetRef="ExclusiveGateway_TransactionConfirmation"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_TransactionSuccess" sourceRef="ExclusiveGateway_TransactionConfirmation" targetRef="ServiceTask_InitializeTrustScore">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${transactionConfirmed == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_TransactionFailed" sourceRef="ExclusiveGateway_TransactionConfirmation" targetRef="ServiceTask_HandleTransactionFailure">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${transactionConfirmed == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToNotifyRegistration" sourceRef="ServiceTask_InitializeTrustScore" targetRef="ServiceTask_NotifyRegistrationSuccess"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToRegistrationSuccess" sourceRef="ServiceTask_NotifyRegistrationSuccess" targetRef="EndEvent_RegistrationSuccess"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToStakeFailure" sourceRef="ServiceTask_HandleInsufficientStake" targetRef="EndEvent_StakeFailure"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToTransactionFailure" sourceRef="ServiceTask_HandleTransactionFailure" targetRef="EndEvent_TransactionFailure"/>

  </bpmn:process>

  <!-- Sub-Process: Smart Contract Workflow Execution -->
  <bpmn:process id="SmartContractWorkflowExecutionProcess" name="Smart Contract Workflow Execution Process" isExecutable="true">
    
    <!-- Start Event -->
    <bpmn:startEvent id="StartEvent_WorkflowExecution" name="Smart Contract Workflow Request">
      <bpmn:outgoing>SequenceFlow_ToValidateWorkflowRequest</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_SmartContractWorkflowRequest"/>
    </bpmn:startEvent>

    <!-- Validate Workflow Request -->
    <bpmn:serviceTask id="ServiceTask_ValidateWorkflowRequest" name="Validate Workflow Request" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToValidateWorkflowRequest</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCheckBudget</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowRequest" name="workflowRequest"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_WorkflowValidation" name="workflowValidation"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Check Budget Sufficiency -->
    <bpmn:serviceTask id="ServiceTask_CheckBudgetSufficiency" name="Check Budget Sufficiency" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToCheckBudget</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToBudgetGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowRequest" name="workflowRequest"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_BudgetValidation" name="budgetValidation"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Budget Validation Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_BudgetValidation" name="Budget Sufficient?">
      <bpmn:incoming>SequenceFlow_ToBudgetGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_BudgetValid</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_BudgetInvalid</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Create Registry Workflow -->
    <bpmn:serviceTask id="ServiceTask_CreateRegistryWorkflow" name="Create Workflow in A2A Registry" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_BudgetValid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToMapStages</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowRequest" name="workflowRequest"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_RegistryWorkflow" name="registryWorkflow"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Map Stages to Smart Contract -->
    <bpmn:serviceTask id="ServiceTask_MapStagesToContract" name="Map Stages to Smart Contract Format" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToMapStages</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCreateSmartContractWorkflow</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_RegistryWorkflow" name="registryWorkflow"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ContractStages" name="contractStages"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Create Smart Contract Workflow -->
    <bpmn:serviceTask id="ServiceTask_CreateSmartContractWorkflow" name="Create Workflow on Blockchain" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToCreateSmartContractWorkflow</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToWorkflowCreationGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowId" name="workflowId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ContractStages" name="contractStages"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_Budget" name="budget"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_WorkflowCreationTx" name="workflowCreationTx"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Workflow Creation Confirmation Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_WorkflowCreation" name="Workflow Created?">
      <bpmn:incoming>SequenceFlow_ToWorkflowCreationGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_WorkflowCreationSuccess</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_WorkflowCreationFailed</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Execute Workflow Stages -->
    <bpmn:serviceTask id="ServiceTask_ExecuteWorkflowStages" name="Execute Workflow Stages" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_WorkflowCreationSuccess</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToStageExecutionLoop</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowId" name="workflowId"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_StageExecutions" name="stageExecutions"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Stage Execution Loop -->
    <bpmn:subProcess id="SubProcess_StageExecution" name="Stage Execution Loop">
      <bpmn:incoming>SequenceFlow_ToStageExecutionLoop</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToFinalizeWorkflow</bpmn:outgoing>

      <!-- Assign Stage to Agent -->
      <bpmn:serviceTask id="ServiceTask_AssignStageToAgent" name="Assign Stage to Agent" implementation="##SmartContract">
        <bpmn:ioSpecification>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowId" name="workflowId"/>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_StageIndex" name="stageIndex"/>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentId" name="agentId"/>
          <bpmn:dataOutput itemSubjectRef="ItemDefinition_AssignmentTx" name="assignmentTx"/>
        </bpmn:ioSpecification>
      </bpmn:serviceTask>

      <!-- Wait for Stage Completion -->
      <bpmn:receiveTask id="ReceiveTask_WaitForStageCompletion" name="Wait for Stage Completion" messageRef="Message_StageCompletion"/>

      <!-- Verify Stage Output -->
      <bpmn:serviceTask id="ServiceTask_VerifyStageOutput" name="Verify Stage Output" implementation="##WebService">
        <bpmn:ioSpecification>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_StageOutput" name="stageOutput"/>
          <bpmn:dataOutput itemSubjectRef="ItemDefinition_VerificationResult" name="verificationResult"/>
        </bpmn:ioSpecification>
      </bpmn:serviceTask>

      <!-- Release Payment -->
      <bpmn:serviceTask id="ServiceTask_ReleasePayment" name="Release Payment to Agent" implementation="##SmartContract">
        <bpmn:ioSpecification>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowId" name="workflowId"/>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_StageIndex" name="stageIndex"/>
          <bpmn:dataInput itemSubjectRef="ItemDefinition_StageOutput" name="stageOutput"/>
          <bpmn:dataOutput itemSubjectRef="ItemDefinition_PaymentTx" name="paymentTx"/>
        </bpmn:ioSpecification>
      </bpmn:serviceTask>

      <!-- Multi-Instance Loop Characteristics -->
      <bpmn:multiInstanceLoopCharacteristics isSequential="true">
        <bpmn:loopDataInputRef>contractStages</bpmn:loopDataInputRef>
        <bpmn:inputDataItem name="currentStage"/>
      </bpmn:multiInstanceLoopCharacteristics>
    </bpmn:subProcess>

    <!-- Finalize Workflow -->
    <bpmn:serviceTask id="ServiceTask_FinalizeWorkflow" name="Finalize Workflow Execution" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToFinalizeWorkflow</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToUpdateTrustScores</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_WorkflowId" name="workflowId"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_WorkflowResult" name="workflowResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Update Trust Scores -->
    <bpmn:serviceTask id="ServiceTask_UpdateTrustScores" name="Update Agent Trust Scores" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToUpdateTrustScores</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToWorkflowComplete</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_StageExecutions" name="stageExecutions"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_TrustUpdateResults" name="trustUpdateResults"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Workflow Complete End -->
    <bpmn:endEvent id="EndEvent_WorkflowComplete" name="Smart Contract Workflow Complete">
      <bpmn:incoming>SequenceFlow_ToWorkflowComplete</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_SmartContractWorkflowComplete"/>
    </bpmn:endEvent>

    <!-- Handle Budget Insufficient -->
    <bpmn:serviceTask id="ServiceTask_HandleBudgetInsufficient" name="Handle Insufficient Budget" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_BudgetInvalid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToBudgetFailure</bpmn:outgoing>
    </bpmn:serviceTask>

    <!-- Handle Workflow Creation Failure -->
    <bpmn:serviceTask id="ServiceTask_HandleWorkflowCreationFailure" name="Handle Workflow Creation Failure" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_WorkflowCreationFailed</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCreationFailure</bpmn:outgoing>
    </bpmn:serviceTask>

    <!-- Budget Failure End -->
    <bpmn:endEvent id="EndEvent_BudgetFailure" name="Insufficient Budget">
      <bpmn:incoming>SequenceFlow_ToBudgetFailure</bpmn:incoming>
      <bpmn:errorEventDefinition errorRef="Error_InsufficientBudget"/>
    </bpmn:endEvent>

    <!-- Creation Failure End -->
    <bpmn:endEvent id="EndEvent_CreationFailure" name="Workflow Creation Failed">
      <bpmn:incoming>SequenceFlow_ToCreationFailure</bpmn:incoming>
      <bpmn:errorEventDefinition errorRef="Error_WorkflowCreationFailure"/>
    </bpmn:endEvent>

    <!-- Workflow Execution Sequence Flows -->
    <bpmn:sequenceFlow id="SequenceFlow_ToValidateWorkflowRequest" sourceRef="StartEvent_WorkflowExecution" targetRef="ServiceTask_ValidateWorkflowRequest"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToCheckBudget" sourceRef="ServiceTask_ValidateWorkflowRequest" targetRef="ServiceTask_CheckBudgetSufficiency"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToBudgetGateway" sourceRef="ServiceTask_CheckBudgetSufficiency" targetRef="ExclusiveGateway_BudgetValidation"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_BudgetValid" sourceRef="ExclusiveGateway_BudgetValidation" targetRef="ServiceTask_CreateRegistryWorkflow">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${budgetValidation.sufficient == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_BudgetInvalid" sourceRef="ExclusiveGateway_BudgetValidation" targetRef="ServiceTask_HandleBudgetInsufficient">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${budgetValidation.sufficient == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToMapStages" sourceRef="ServiceTask_CreateRegistryWorkflow" targetRef="ServiceTask_MapStagesToContract"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToCreateSmartContractWorkflow" sourceRef="ServiceTask_MapStagesToContract" targetRef="ServiceTask_CreateSmartContractWorkflow"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToWorkflowCreationGateway" sourceRef="ServiceTask_CreateSmartContractWorkflow" targetRef="ExclusiveGateway_WorkflowCreation"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_WorkflowCreationSuccess" sourceRef="ExclusiveGateway_WorkflowCreation" targetRef="ServiceTask_ExecuteWorkflowStages">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${workflowCreated == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_WorkflowCreationFailed" sourceRef="ExclusiveGateway_WorkflowCreation" targetRef="ServiceTask_HandleWorkflowCreationFailure">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${workflowCreated == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToStageExecutionLoop" sourceRef="ServiceTask_ExecuteWorkflowStages" targetRef="SubProcess_StageExecution"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToFinalizeWorkflow" sourceRef="SubProcess_StageExecution" targetRef="ServiceTask_FinalizeWorkflow"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToUpdateTrustScores" sourceRef="ServiceTask_FinalizeWorkflow" targetRef="ServiceTask_UpdateTrustScores"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToWorkflowComplete" sourceRef="ServiceTask_UpdateTrustScores" targetRef="EndEvent_WorkflowComplete"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToBudgetFailure" sourceRef="ServiceTask_HandleBudgetInsufficient" targetRef="EndEvent_BudgetFailure"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToCreationFailure" sourceRef="ServiceTask_HandleWorkflowCreationFailure" targetRef="EndEvent_CreationFailure"/>

  </bpmn:process>

  <!-- Sub-Process: Trust Score Management -->
  <bpmn:process id="TrustScoreManagementProcess" name="Trust Score Management Process" isExecutable="true">
    
    <!-- Start Event -->
    <bpmn:startEvent id="StartEvent_TrustScoreUpdate" name="Agent Interaction Completed">
      <bpmn:outgoing>SequenceFlow_ToValidateInteraction</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_InteractionCompleted"/>
    </bpmn:startEvent>

    <!-- Validate Interaction -->
    <bpmn:serviceTask id="ServiceTask_ValidateInteraction" name="Validate Interaction Signature" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToValidateInteraction</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToValidationGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_InteractionData" name="interactionData"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_InteractionValidation" name="interactionValidation"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Validation Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_InteractionValidation" name="Interaction Valid?">
      <bpmn:incoming>SequenceFlow_ToValidationGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_InteractionValid</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_InteractionInvalid</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Record Interaction on Blockchain -->
    <bpmn:serviceTask id="ServiceTask_RecordInteraction" name="Record Interaction on Blockchain" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_InteractionValid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCalculateTrustScore</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProviderId" name="providerId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ConsumerId" name="consumerId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_Rating" name="rating"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_Skill" name="skill"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_Signature" name="signature"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_InteractionTx" name="interactionTx"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Calculate New Trust Score -->
    <bpmn:serviceTask id="ServiceTask_CalculateTrustScore" name="Calculate New Trust Score" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToCalculateTrustScore</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToUpdateReputation</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProviderId" name="providerId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_Rating" name="rating"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_Skill" name="skill"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_NewTrustScore" name="newTrustScore"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Update Agent Reputation -->
    <bpmn:serviceTask id="ServiceTask_UpdateAgentReputation" name="Update Agent Reputation in Registry" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToUpdateReputation</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCheckReputationThreshold</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProviderId" name="providerId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_NewTrustScore" name="newTrustScore"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ReputationUpdate" name="reputationUpdate"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Check Reputation Threshold -->
    <bpmn:serviceTask id="ServiceTask_CheckReputationThreshold" name="Check Reputation Threshold" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToCheckReputationThreshold</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToThresholdGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_NewTrustScore" name="newTrustScore"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ThresholdCheck" name="thresholdCheck"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Reputation Threshold Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_ReputationThreshold" name="Below Minimum Threshold?">
      <bpmn:incoming>SequenceFlow_ToThresholdGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_AboveThreshold</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_BelowThreshold</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Trigger Agent Review -->
    <bpmn:serviceTask id="ServiceTask_TriggerAgentReview" name="Trigger Agent Review Process" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_BelowThreshold</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToTrustScoreComplete</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProviderId" name="providerId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_NewTrustScore" name="newTrustScore"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ReviewTrigger" name="reviewTrigger"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Trust Score Update Complete -->
    <bpmn:endEvent id="EndEvent_TrustScoreComplete" name="Trust Score Updated">
      <bpmn:incoming>SequenceFlow_ToTrustScoreComplete</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_AboveThreshold</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_TrustScoreUpdated"/>
    </bpmn:endEvent>

    <!-- Handle Invalid Interaction -->
    <bpmn:serviceTask id="ServiceTask_HandleInvalidInteraction" name="Handle Invalid Interaction" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_InteractionInvalid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToInteractionFailure</bpmn:outgoing>
    </bpmn:serviceTask>

    <!-- Invalid Interaction End -->
    <bpmn:endEvent id="EndEvent_InteractionFailure" name="Invalid Interaction">
      <bpmn:incoming>SequenceFlow_ToInteractionFailure</bpmn:incoming>
      <bpmn:errorEventDefinition errorRef="Error_InvalidInteraction"/>
    </bpmn:endEvent>

    <!-- Trust Score Management Sequence Flows -->
    <bpmn:sequenceFlow id="SequenceFlow_ToValidateInteraction" sourceRef="StartEvent_TrustScoreUpdate" targetRef="ServiceTask_ValidateInteraction"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToValidationGateway" sourceRef="ServiceTask_ValidateInteraction" targetRef="ExclusiveGateway_InteractionValidation"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_InteractionValid" sourceRef="ExclusiveGateway_InteractionValidation" targetRef="ServiceTask_RecordInteraction">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${interactionValidation.valid == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_InteractionInvalid" sourceRef="ExclusiveGateway_InteractionValidation" targetRef="ServiceTask_HandleInvalidInteraction">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${interactionValidation.valid == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToCalculateTrustScore" sourceRef="ServiceTask_RecordInteraction" targetRef="ServiceTask_CalculateTrustScore"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToUpdateReputation" sourceRef="ServiceTask_CalculateTrustScore" targetRef="ServiceTask_UpdateAgentReputation"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToCheckReputationThreshold" sourceRef="ServiceTask_UpdateAgentReputation" targetRef="ServiceTask_CheckReputationThreshold"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToThresholdGateway" sourceRef="ServiceTask_CheckReputationThreshold" targetRef="ExclusiveGateway_ReputationThreshold"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_AboveThreshold" sourceRef="ExclusiveGateway_ReputationThreshold" targetRef="EndEvent_TrustScoreComplete">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${thresholdCheck.aboveMinimum == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_BelowThreshold" sourceRef="ExclusiveGateway_ReputationThreshold" targetRef="ServiceTask_TriggerAgentReview">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${thresholdCheck.aboveMinimum == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToTrustScoreComplete" sourceRef="ServiceTask_TriggerAgentReview" targetRef="EndEvent_TrustScoreComplete"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToInteractionFailure" sourceRef="ServiceTask_HandleInvalidInteraction" targetRef="EndEvent_InteractionFailure"/>

  </bpmn:process>

  <!-- Sub-Process: SLA Monitoring and Violation -->
  <bpmn:process id="SLAMonitoringProcess" name="SLA Monitoring and Violation Process" isExecutable="true">
    
    <!-- Start Event -->
    <bpmn:startEvent id="StartEvent_SLAMonitoring" name="SLA Performance Data">
      <bpmn:outgoing>SequenceFlow_ToAnalyzePerformance</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_SLAPerformanceData"/>
    </bpmn:startEvent>

    <!-- Analyze Performance Data -->
    <bpmn:serviceTask id="ServiceTask_AnalyzePerformanceData" name="Analyze Agent Performance Data" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToAnalyzePerformance</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToCheckSLACompliance</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_PerformanceData" name="performanceData"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_PerformanceAnalysis" name="performanceAnalysis"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Check SLA Compliance -->
    <bpmn:serviceTask id="ServiceTask_CheckSLACompliance" name="Check SLA Compliance" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToCheckSLACompliance</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToComplianceGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_PerformanceAnalysis" name="performanceAnalysis"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_SLATerms" name="slaTerms"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ComplianceCheck" name="complianceCheck"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- SLA Compliance Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_SLACompliance" name="SLA Violated?">
      <bpmn:incoming>SequenceFlow_ToComplianceGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_SLACompliant</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_SLAViolated</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Generate Violation Proof -->
    <bpmn:serviceTask id="ServiceTask_GenerateViolationProof" name="Generate Violation Proof" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_SLAViolated</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToReportViolation</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ComplianceCheck" name="complianceCheck"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_PerformanceData" name="performanceData"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ViolationProof" name="violationProof"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Report Violation on Blockchain -->
    <bpmn:serviceTask id="ServiceTask_ReportViolation" name="Report SLA Violation on Blockchain" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToReportViolation</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToApplyPenalty</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_SLAId" name="slaId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ViolationType" name="violationType"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ViolationProof" name="violationProof"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ViolationTx" name="violationTx"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Apply Penalty -->
    <bpmn:serviceTask id="ServiceTask_ApplyPenalty" name="Apply SLA Penalty" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToApplyPenalty</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToUpdateAgentStatus</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_SLAId" name="slaId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_PenaltyAmount" name="penaltyAmount"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_PenaltyTx" name="penaltyTx"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Update Agent Status -->
    <bpmn:serviceTask id="ServiceTask_UpdateAgentStatus" name="Update Agent Status in Registry" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToUpdateAgentStatus</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToSLAViolationComplete</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_AgentId" name="agentId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ViolationDetails" name="violationDetails"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_StatusUpdate" name="statusUpdate"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Log Compliance -->
    <bpmn:serviceTask id="ServiceTask_LogCompliance" name="Log SLA Compliance" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_SLACompliant</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToSLAMonitoringComplete</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ComplianceCheck" name="complianceCheck"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ComplianceLog" name="complianceLog"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- SLA Monitoring Complete -->
    <bpmn:endEvent id="EndEvent_SLAMonitoringComplete" name="SLA Monitoring Complete">
      <bpmn:incoming>SequenceFlow_ToSLAMonitoringComplete</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_SLAMonitoringComplete"/>
    </bpmn:endEvent>

    <!-- SLA Violation Complete -->
    <bpmn:endEvent id="EndEvent_SLAViolationComplete" name="SLA Violation Processed">
      <bpmn:incoming>SequenceFlow_ToSLAViolationComplete</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_SLAViolationProcessed"/>
    </bpmn:endEvent>

    <!-- SLA Monitoring Sequence Flows -->
    <bpmn:sequenceFlow id="SequenceFlow_ToAnalyzePerformance" sourceRef="StartEvent_SLAMonitoring" targetRef="ServiceTask_AnalyzePerformanceData"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToCheckSLACompliance" sourceRef="ServiceTask_AnalyzePerformanceData" targetRef="ServiceTask_CheckSLACompliance"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToComplianceGateway" sourceRef="ServiceTask_CheckSLACompliance" targetRef="ExclusiveGateway_SLACompliance"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_SLACompliant" sourceRef="ExclusiveGateway_SLACompliance" targetRef="ServiceTask_LogCompliance">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${complianceCheck.violated == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_SLAViolated" sourceRef="ExclusiveGateway_SLACompliance" targetRef="ServiceTask_GenerateViolationProof">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${complianceCheck.violated == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToReportViolation" sourceRef="ServiceTask_GenerateViolationProof" targetRef="ServiceTask_ReportViolation"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToApplyPenalty" sourceRef="ServiceTask_ReportViolation" targetRef="ServiceTask_ApplyPenalty"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToUpdateAgentStatus" sourceRef="ServiceTask_ApplyPenalty" targetRef="ServiceTask_UpdateAgentStatus"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToSLAViolationComplete" sourceRef="ServiceTask_UpdateAgentStatus" targetRef="EndEvent_SLAViolationComplete"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToSLAMonitoringComplete" sourceRef="ServiceTask_LogCompliance" targetRef="EndEvent_SLAMonitoringComplete"/>

  </bpmn:process>

  <!-- Sub-Process: Governance Voting -->
  <bpmn:process id="GovernanceVotingProcess" name="Governance Voting Process" isExecutable="true">
    
    <!-- Start Event -->
    <bpmn:startEvent id="StartEvent_GovernanceProposal" name="Governance Proposal Submitted">
      <bpmn:outgoing>SequenceFlow_ToValidateProposal</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_GovernanceProposal"/>
    </bpmn:startEvent>

    <!-- Validate Proposal -->
    <bpmn:serviceTask id="ServiceTask_ValidateProposal" name="Validate Governance Proposal" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToValidateProposal</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToValidationGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalData" name="proposalData"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ProposalValidation" name="proposalValidation"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Proposal Validation Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_ProposalValidation" name="Proposal Valid?">
      <bpmn:incoming>SequenceFlow_ToValidationGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ProposalValid</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_ProposalInvalid</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Create Proposal on Blockchain -->
    <bpmn:serviceTask id="ServiceTask_CreateProposal" name="Create Proposal on Blockchain" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ProposalValid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToNotifyAgents</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalDescription" name="proposalDescription"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_TargetContract" name="targetContract"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_CallData" name="callData"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ProposalId" name="proposalId"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Notify Registered Agents -->
    <bpmn:serviceTask id="ServiceTask_NotifyRegisteredAgents" name="Notify All Registered Agents" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToNotifyAgents</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToVotingPeriod</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalId" name="proposalId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalDescription" name="proposalDescription"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_NotificationResult" name="notificationResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Voting Period Timer -->
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_VotingPeriod" name="Voting Period (7 days)">
      <bpmn:incoming>SequenceFlow_ToVotingPeriod</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToTallyVotes</bpmn:outgoing>
      <bpmn:timerEventDefinition>
        <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">P7D</bpmn:timeDuration>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>

    <!-- Tally Votes -->
    <bpmn:serviceTask id="ServiceTask_TallyVotes" name="Tally Proposal Votes" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ToTallyVotes</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToVotingResultGateway</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalId" name="proposalId"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_VotingResult" name="votingResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Voting Result Gateway -->
    <bpmn:exclusiveGateway id="ExclusiveGateway_VotingResult" name="Proposal Passed?">
      <bpmn:incoming>SequenceFlow_ToVotingResultGateway</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ProposalPassed</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_ProposalFailed</bpmn:outgoing>
    </bpmn:exclusiveGateway>

    <!-- Execute Proposal -->
    <bpmn:serviceTask id="ServiceTask_ExecuteProposal" name="Execute Approved Proposal" implementation="##SmartContract">
      <bpmn:incoming>SequenceFlow_ProposalPassed</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToNotifyExecution</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalId" name="proposalId"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ExecutionResult" name="executionResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Notify Execution -->
    <bpmn:serviceTask id="ServiceTask_NotifyExecution" name="Notify Proposal Execution" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ToNotifyExecution</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToProposalExecuted</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalId" name="proposalId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ExecutionResult" name="executionResult"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ExecutionNotification" name="executionNotification"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Archive Failed Proposal -->
    <bpmn:serviceTask id="ServiceTask_ArchiveFailedProposal" name="Archive Failed Proposal" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ProposalFailed</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToProposalArchived</bpmn:outgoing>
      <bpmn:ioSpecification>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_ProposalId" name="proposalId"/>
        <bpmn:dataInput itemSubjectRef="ItemDefinition_VotingResult" name="votingResult"/>
        <bpmn:dataOutput itemSubjectRef="ItemDefinition_ArchiveResult" name="archiveResult"/>
      </bpmn:ioSpecification>
    </bpmn:serviceTask>

    <!-- Proposal Executed End -->
    <bpmn:endEvent id="EndEvent_ProposalExecuted" name="Proposal Executed">
      <bpmn:incoming>SequenceFlow_ToProposalExecuted</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_ProposalExecuted"/>
    </bpmn:endEvent>

    <!-- Proposal Archived End -->
    <bpmn:endEvent id="EndEvent_ProposalArchived" name="Proposal Archived">
      <bpmn:incoming>SequenceFlow_ToProposalArchived</bpmn:incoming>
      <bpmn:messageEventDefinition messageRef="Message_ProposalArchived"/>
    </bpmn:endEvent>

    <!-- Handle Invalid Proposal -->
    <bpmn:serviceTask id="ServiceTask_HandleInvalidProposal" name="Handle Invalid Proposal" implementation="##WebService">
      <bpmn:incoming>SequenceFlow_ProposalInvalid</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_ToProposalRejected</bpmn:outgoing>
    </bpmn:serviceTask>

    <!-- Proposal Rejected End -->
    <bpmn:endEvent id="EndEvent_ProposalRejected" name="Proposal Rejected">
      <bpmn:incoming>SequenceFlow_ToProposalRejected</bpmn:incoming>
      <bpmn:errorEventDefinition errorRef="Error_InvalidProposal"/>
    </bpmn:endEvent>

    <!-- Governance Voting Sequence Flows -->
    <bpmn:sequenceFlow id="SequenceFlow_ToValidateProposal" sourceRef="StartEvent_GovernanceProposal" targetRef="ServiceTask_ValidateProposal"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToValidationGateway" sourceRef="ServiceTask_ValidateProposal" targetRef="ExclusiveGateway_ProposalValidation"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_ProposalValid" sourceRef="ExclusiveGateway_ProposalValidation" targetRef="ServiceTask_CreateProposal">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${proposalValidation.valid == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ProposalInvalid" sourceRef="ExclusiveGateway_ProposalValidation" targetRef="ServiceTask_HandleInvalidProposal">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${proposalValidation.valid == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToNotifyAgents" sourceRef="ServiceTask_CreateProposal" targetRef="ServiceTask_NotifyRegisteredAgents"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToVotingPeriod" sourceRef="ServiceTask_NotifyRegisteredAgents" targetRef="IntermediateCatchEvent_VotingPeriod"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToTallyVotes" sourceRef="IntermediateCatchEvent_VotingPeriod" targetRef="ServiceTask_TallyVotes"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToVotingResultGateway" sourceRef="ServiceTask_TallyVotes" targetRef="ExclusiveGateway_VotingResult"/>
    
    <bpmn:sequenceFlow id="SequenceFlow_ProposalPassed" sourceRef="ExclusiveGateway_VotingResult" targetRef="ServiceTask_ExecuteProposal">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${votingResult.passed == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ProposalFailed" sourceRef="ExclusiveGateway_VotingResult" targetRef="ServiceTask_ArchiveFailedProposal">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${votingResult.passed == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    
    <bpmn:sequenceFlow id="SequenceFlow_ToNotifyExecution" sourceRef="ServiceTask_ExecuteProposal" targetRef="ServiceTask_NotifyExecution"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToProposalExecuted" sourceRef="ServiceTask_NotifyExecution" targetRef="EndEvent_ProposalExecuted"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToProposalArchived" sourceRef="ServiceTask_ArchiveFailedProposal" targetRef="EndEvent_ProposalArchived"/>
    <bpmn:sequenceFlow id="SequenceFlow_ToProposalRejected" sourceRef="ServiceTask_HandleInvalidProposal" targetRef="EndEvent_ProposalRejected"/>

  </bpmn:process>

  <!-- Message Definitions -->
  <bpmn:message id="Message_SmartContractRegistrationRequest" name="Smart Contract Registration Request"/>
  <bpmn:message id="Message_SmartContractRegistrationSuccess" name="Smart Contract Registration Success"/>
  <bpmn:message id="Message_SmartContractWorkflowRequest" name="Smart Contract Workflow Request"/>
  <bpmn:message id="Message_SmartContractWorkflowComplete" name="Smart Contract Workflow Complete"/>
  <bpmn:message id="Message_StageCompletion" name="Stage Completion"/>
  <bpmn:message id="Message_InteractionCompleted" name="Interaction Completed"/>
  <bpmn:message id="Message_TrustScoreUpdated" name="Trust Score Updated"/>
  <bpmn:message id="Message_SLAPerformanceData" name="SLA Performance Data"/>
  <bpmn:message id="Message_SLAMonitoringComplete" name="SLA Monitoring Complete"/>
  <bpmn:message id="Message_SLAViolationProcessed" name="SLA Violation Processed"/>
  <bpmn:message id="Message_GovernanceProposal" name="Governance Proposal"/>
  <bpmn:message id="Message_ProposalExecuted" name="Proposal Executed"/>
  <bpmn:message id="Message_ProposalArchived" name="Proposal Archived"/>

  <!-- Error Definitions -->
  <bpmn:error id="Error_InsufficientStake" name="Insufficient Stake" errorCode="INSUFFICIENT_STAKE"/>
  <bpmn:error id="Error_BlockchainTransactionFailure" name="Blockchain Transaction Failure" errorCode="BLOCKCHAIN_TX_FAILURE"/>
  <bpmn:error id="Error_InsufficientBudget" name="Insufficient Budget" errorCode="INSUFFICIENT_BUDGET"/>
  <bpmn:error id="Error_WorkflowCreationFailure" name="Workflow Creation Failure" errorCode="WORKFLOW_CREATION_FAILURE"/>
  <bpmn:error id="Error_InvalidInteraction" name="Invalid Interaction" errorCode="INVALID_INTERACTION"/>
  <bpmn:error id="Error_InvalidProposal" name="Invalid Proposal" errorCode="INVALID_PROPOSAL"/>

  <!-- Data Item Definitions -->
  <bpmn:itemDefinition id="ItemDefinition_RegistrationRequest" structureRef="RegistrationRequest"/>
  <bpmn:itemDefinition id="ItemDefinition_AgentCard" structureRef="AgentCard"/>
  <bpmn:itemDefinition id="ItemDefinition_StakeAmount" structureRef="StakeAmount"/>
  <bpmn:itemDefinition id="ItemDefinition_IPFSHash" structureRef="IPFSHash"/>
  <bpmn:itemDefinition id="ItemDefinition_CapabilityHashes" structureRef="CapabilityHashes"/>
  <bpmn:itemDefinition id="ItemDefinition_TransactionHash" structureRef="TransactionHash"/>
  <bpmn:itemDefinition id="ItemDefinition_WorkflowRequest" structureRef="WorkflowRequest"/>
  <bpmn:itemDefinition id="ItemDefinition_ContractStages" structureRef="ContractStages"/>
  <bpmn:itemDefinition id="ItemDefinition_InteractionData" structureRef="InteractionData"/>
  <bpmn:itemDefinition id="ItemDefinition_TrustScore" structureRef="TrustScore"/>
  <bpmn:itemDefinition id="ItemDefinition_PerformanceData" structureRef="PerformanceData"/>
  <bpmn:itemDefinition id="ItemDefinition_SLATerms" structureRef="SLATerms"/>
  <bpmn:itemDefinition id="ItemDefinition_ViolationProof" structureRef="ViolationProof"/>
  <bpmn:itemDefinition id="ItemDefinition_ProposalData" structureRef="ProposalData"/>
  <bpmn:itemDefinition id="ItemDefinition_VotingResult" structureRef="VotingResult"/>

</bpmn:definitions>