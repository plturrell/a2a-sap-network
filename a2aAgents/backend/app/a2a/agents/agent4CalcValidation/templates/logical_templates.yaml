templates:
  - template_id: "logic_boolean_and_operations"
    computation_type: "logical"
    complexity_level: "easy"
    pattern_category: "boolean_operations"
    input_generator:
      type: "boolean_combinations"
      parameters:
        variables: 2
        operations: ["AND"]
        truth_table: true
    expected_behavior:
      operation: "logical_and"
      accuracy_threshold: 1.0
      truth_table_validation: true
    validation:
      method: "exact"
    metadata:
      builtin: true
      version: "1.0"
      description: "Boolean AND operations with truth table validation"

  - template_id: "logic_boolean_or_operations"
    computation_type: "logical"
    complexity_level: "easy"
    pattern_category: "boolean_operations"
    input_generator:
      type: "boolean_combinations"
      parameters:
        variables: 2
        operations: ["OR"]
        truth_table: true
    expected_behavior:
      operation: "logical_or"
      accuracy_threshold: 1.0
      truth_table_validation: true
    validation:
      method: "exact"
    metadata:
      builtin: true
      version: "1.0"
      description: "Boolean OR operations with truth table validation"

  - template_id: "logic_complex_expressions"
    computation_type: "logical"
    complexity_level: "medium"
    pattern_category: "complex_logic"
    input_generator:
      type: "logical_expression"
      parameters:
        variables: 4
        operators: ["AND", "OR", "NOT", "XOR"]
        expression_depth: 3
    expected_behavior:
      operation: "complex_logical_evaluation"
      accuracy_threshold: 1.0
      performance_bounds:
        max_execution_time: 0.1
    validation:
      method: "exact"
    metadata:
      builtin: true
      version: "1.0"
      description: "Complex logical expressions with multiple operators"

  - template_id: "logic_conditional_branching"
    computation_type: "logical"
    complexity_level: "medium"
    pattern_category: "conditional_logic"
    input_generator:
      type: "conditional_scenarios"
      parameters:
        conditions: 3
        branch_depth: 2
        data_types: ["integer", "string", "boolean"]
    expected_behavior:
      operation: "conditional_execution"
      accuracy_threshold: 1.0
      branch_coverage: 0.8
    validation:
      method: "pattern_match"
      expected_patterns: ["condition_met", "else_branch", "nested_condition"]
    metadata:
      builtin: true
      version: "1.0"
      description: "Conditional branching and if-then-else logic"

  - template_id: "logic_satisfiability_problems"
    computation_type: "logical"
    complexity_level: "hard"
    pattern_category: "satisfiability"
    input_generator:
      type: "sat_problem"
      parameters:
        variables: 10
        clauses: 20
        clause_length: 3
        satisfiable: true
    expected_behavior:
      operation: "satisfiability_solving"
      accuracy_threshold: 0.95
      performance_bounds:
        max_execution_time: 5.0
    validation:
      method: "pattern_match"
      expected_patterns: ["satisfiable", "assignment_found"]
    metadata:
      builtin: true
      version: "1.0"
      description: "Boolean satisfiability problem solving"