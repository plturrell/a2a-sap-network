name: A2A Network CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  quality-gates:
    name: Code Quality Gates
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ tests/

    - name: Linting (Ruff)
      run: |
        ruff check src/ tests/

    - name: Type checking (MyPy)
      run: |
        mypy src/a2a/

    - name: Security scan (Bandit)
      run: |
        bandit -r app/a2a/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Install JavaScript linting tools
      run: |
        npm install -g eslint jshint
        npm install -g @eslint/js eslint-plugin-security eslint-plugin-promise

    - name: Test GleanAgent JavaScript linting
      run: |
        echo "🔧 Testing GleanAgent JavaScript linting capabilities..."
        python3 -c "
        import sys, os, asyncio, tempfile
        sys.path.append('.')
        os.environ.update({'A2A_SERVICE_URL': 'http://localhost:3000', 'A2A_SERVICE_HOST': 'localhost', 'A2A_BASE_URL': 'http://localhost:3000'})
        
        try:
            from app.a2a.agents.gleanAgent.gleanAgentSdk import GleanAgentSDK
            agent = GleanAgentSDK('ci-test-agent')
            eslint_available = agent._check_tool_available('eslint')
            jshint_available = agent._check_tool_available('jshint')
            print(f'✅ JavaScript linting tools available - ESLint: {eslint_available}, JSHint: {jshint_available}')
        except Exception as e:
            print(f'⚠️ GleanAgent test skipped: {e}')
        "

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,telemetry]"

    - name: Run unit tests
      run: |
        pytest tests/ -m "unit" --cov=a2a --cov-report=xml --cov-report=html --junitxml=junit.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          junit.xml
          htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: a2a_password
          POSTGRES_USER: a2a_user
          POSTGRES_DB: a2a_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,telemetry]"

    - name: Wait for services
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U a2a_user; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

    - name: Run database migrations
      run: |
        python -m a2a.core.ai_decision_database_integration migrate
      env:
        A2A_DATABASE_URL: postgresql://a2a_user:a2a_password@localhost:5432/a2a_test
        A2A_REDIS_URL: redis://localhost:6379/0

    - name: Run integration tests
      run: |
        pytest tests/ -m "integration" --cov=a2a --cov-report=xml --junitxml=junit-integration.xml
      env:
        A2A_DATABASE_URL: postgresql://a2a_user:a2a_password@localhost:5432/a2a_test
        A2A_REDIS_URL: redis://localhost:6379/0
        A2A_ENVIRONMENT: testing

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          junit-integration.xml
          coverage.xml

  agent-tests:
    name: Agent System Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    strategy:
      matrix:
        agent: [agent0, agent1, agent2, agent3, data-manager, catalog-manager]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: a2a_password
          POSTGRES_USER: a2a_user
          POSTGRES_DB: a2a_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,telemetry]"

    - name: Test ${{ matrix.agent }}
      run: |
        python scripts/launch/unified_launcher.py --agent=${{ matrix.agent }} &
        sleep 10
        pytest tests/ -k "test_${{ matrix.agent }}" --junitxml=junit-${{ matrix.agent }}.xml
        pkill -f unified_launcher.py || true
      env:
        A2A_DATABASE_URL: postgresql://a2a_user:a2a_password@localhost:5432/a2a_test
        A2A_REDIS_URL: redis://localhost:6379/0

    - name: Upload agent test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: agent-test-results-${{ matrix.agent }}
        path: junit-${{ matrix.agent }}.xml

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety pip-audit

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true

    - name: Upload security audit results
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-results
        path: |
          safety-report.json
          pip-audit-report.json

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: build-and-package

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.agent
        push: false
        tags: a2a-network:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm a2a-network:test python -m a2a.cli --help

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: agent-tests
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: a2a_password
          POSTGRES_USER: a2a_user
          POSTGRES_DB: a2a_test
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,telemetry]"
        pip install locust

    - name: Run performance tests
      run: |
        python scripts/launch/unified_launcher.py --agent=agent0 &
        sleep 15
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8001
        pkill -f unified_launcher.py || true
      env:
        A2A_DATABASE_URL: postgresql://a2a_user:a2a_password@localhost:5432/a2a_test
        A2A_REDIS_URL: redis://localhost:6379/0

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [agent-tests, security-audit, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        python -m a2a.cli deploy --environment staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance-tests, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here
        python -m a2a.cli deploy --environment production

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 A2A Network deployed successfully to production!"

    - name: Notify failure
      if: failure()
      run: |
        echo "❌ A2A Network deployment failed. Check logs for details."