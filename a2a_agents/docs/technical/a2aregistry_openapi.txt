openapi: 3.0.3
info:
  title: A2A Registry API
  description: Agent-to-Agent Registry Service API for A2A agent ecosystems and workflow orchestration
  version: 1.0.0
  contact:
    name: A2A Registry Support
    email: support@a2a-registry.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://a2a-registry.example.com/api/v1
    description: Production server
  - url: https://a2a-registry-staging.example.com/api/v1
    description: Staging server

security:
  - bearerAuth: []

paths:
  /agents/register:
    post:
      summary: Register A2A Agent
      description: Register a new A2A agent in the registry
      operationId: registerAgent
      tags:
        - Agent Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCard'
      responses:
        '201':
          description: Agent registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRegistrationResponse'
        '400':
          description: Invalid agent card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Agent already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'

  /agents/register/{agentId}:
    get:
      summary: Get Agent Registration
      description: Retrieve details of a specific agent registration
      operationId: getAgentRegistration
      tags:
        - Agent Registration
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
          description: Agent ID
      responses:
        '200':
          description: Agent registration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRegistrationDetails'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update Agent Registration
      description: Update an existing agent registration
      operationId: updateAgentRegistration
      tags:
        - Agent Registration
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCard'
      responses:
        '200':
          description: Agent updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentUpdateResponse'
        '400':
          description: Invalid update request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Deregister Agent
      description: Remove an agent from the registry
      operationId: deregisterAgent
      tags:
        - Agent Registration
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Agent deregistered successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /agents/search:
    get:
      summary: Search Agents
      description: Search for agents by capabilities, skills, and other criteria
      operationId: searchAgents
      tags:
        - Agent Discovery
      parameters:
        - name: skills
          in: query
          description: Required skills (comma-separated)
          schema:
            type: string
        - name: tags
          in: query
          description: Tags filter (comma-separated)
          schema:
            type: string
        - name: type
          in: query
          description: Agent type filter
          schema:
            type: string
            enum: [data-processing, ai-ml, storage, orchestration, analytics]
        - name: status
          in: query
          description: Health status filter
          schema:
            type: string
            enum: [healthy, degraded, unhealthy, unreachable]
        - name: inputModes
          in: query
          description: Required input modes (comma-separated)
          schema:
            type: string
        - name: outputModes
          in: query
          description: Required output modes (comma-separated)
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSearchResponse'
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /agents/{agentId}:
    get:
      summary: Get Agent Details
      description: Retrieve detailed information about a specific agent
      operationId: getAgentDetails
      tags:
        - Agent Discovery
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
          description: Agent ID
      responses:
        '200':
          description: Agent details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDetails'
        '404':
          $ref: '#/components/responses/NotFound'

  /agents/match:
    post:
      summary: Find Agents for Workflow
      description: Find agents that match specific workflow requirements
      operationId: matchAgentsForWorkflow
      tags:
        - Agent Discovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowMatchRequest'
      responses:
        '200':
          description: Matching agents found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowMatchResponse'
        '400':
          description: Invalid workflow requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /agents/{agentId}/health:
    get:
      summary: Get Agent Health Status
      description: Retrieve current health status of a specific agent
      operationId: getAgentHealth
      tags:
        - Health Monitoring
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentHealthResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /agents/{agentId}/metrics:
    get:
      summary: Get Agent Metrics
      description: Retrieve performance and usage metrics for an agent
      operationId: getAgentMetrics
      tags:
        - Health Monitoring
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
        - name: period
          in: query
          description: Time period for metrics
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d]
            default: 24h
      responses:
        '200':
          description: Agent metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentMetricsResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /system/health:
    get:
      summary: Get System Health Overview
      description: Retrieve overall health status of the registry system
      operationId: getSystemHealth
      tags:
        - Health Monitoring
      responses:
        '200':
          description: System health overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthResponse'

  /orchestration/plan:
    post:
      summary: Create Workflow Plan
      description: Create an execution plan for a multi-agent workflow
      operationId: createWorkflowPlan
      tags:
        - Workflow Orchestration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowPlanRequest'
      responses:
        '201':
          description: Workflow plan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowPlanResponse'
        '400':
          description: Invalid workflow definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /orchestration/execute/{workflowId}:
    post:
      summary: Execute Workflow
      description: Execute a workflow plan with provided input data
      operationId: executeWorkflow
      tags:
        - Workflow Orchestration
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowExecutionRequest'
      responses:
        '202':
          description: Workflow execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecutionResponse'
        '400':
          description: Invalid execution request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'

  /orchestration/status/{executionId}:
    get:
      summary: Get Workflow Execution Status
      description: Retrieve the status of a workflow execution
      operationId: getWorkflowExecutionStatus
      tags:
        - Workflow Orchestration
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Workflow execution status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecutionStatus'
        '404':
          $ref: '#/components/responses/NotFound'

  /health:
    get:
      summary: Health Check
      description: Check service health status
      operationId: healthCheck
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AgentCard:
      type: object
      required:
        - name
        - description
        - url
        - version
        - protocolVersion
        - capabilities
        - skills
      properties:
        name:
          type: string
          example: "Financial Data Standardization Agent"
        description:
          type: string
          example: "Standardizes financial entities and account data according to industry standards"
        url:
          type: string
          format: uri
          example: "https://standardization-agent.example.com"
        version:
          type: string
          example: "1.0.0"
        protocolVersion:
          type: string
          example: "0.2.9"
        capabilities:
          type: object
          description: Detailed capability definitions
        skills:
          type: array
          items:
            type: string
          example: ["location-standardization", "account-standardization"]
        defaultInputModes:
          type: array
          items:
            type: string
          example: ["text/csv", "application/json"]
        defaultOutputModes:
          type: array
          items:
            type: string
          example: ["application/json"]
        tags:
          type: array
          items:
            type: string
          example: ["financial", "standardization", "data-processing"]
        healthEndpoint:
          type: string
          format: uri
          example: "https://standardization-agent.example.com/health"
        metricsEndpoint:
          type: string
          format: uri
          example: "https://standardization-agent.example.com/metrics"

    AgentRegistrationResponse:
      type: object
      properties:
        agent_id:
          type: string
          example: "agent_12345"
        status:
          type: string
          enum: [registered, pending, failed]
          example: "registered"
        validation_results:
          $ref: '#/components/schemas/ValidationResults'
        registered_at:
          type: string
          format: date-time
        registry_url:
          type: string
          format: uri
          example: "https://a2a-registry.example.com/agents/agent_12345"
        health_check_url:
          type: string
          format: uri
          example: "https://a2a-registry.example.com/agents/agent_12345/health"

    AgentRegistrationDetails:
      type: object
      properties:
        agent_id:
          type: string
        agent_card:
          $ref: '#/components/schemas/AgentCard'
        registration_metadata:
          type: object
          properties:
            registered_by:
              type: string
            registered_at:
              type: string
              format: date-time
            last_updated:
              type: string
              format: date-time
            status:
              type: string
              enum: [active, inactive, deprecated, retired]
        health_status:
          $ref: '#/components/schemas/AgentHealthStatus'
        usage_analytics:
          $ref: '#/components/schemas/AgentUsageAnalytics'

    AgentUpdateResponse:
      type: object
      properties:
        agent_id:
          type: string
        version:
          type: string
        updated_at:
          type: string
          format: date-time
        validation_results:
          $ref: '#/components/schemas/ValidationResults'

    AgentSearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/AgentSearchResult'
        total_count:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    AgentSearchResult:
      type: object
      properties:
        agent_id:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri
        version:
          type: string
        skills:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy, unreachable]
        last_seen:
          type: string
          format: date-time
        response_time_ms:
          type: number
        tags:
          type: array
          items:
            type: string

    AgentDetails:
      type: object
      properties:
        agent_id:
          type: string
        agent_card:
          $ref: '#/components/schemas/AgentCard'
        health_status:
          $ref: '#/components/schemas/AgentHealthStatus'
        usage_analytics:
          $ref: '#/components/schemas/AgentUsageAnalytics'
        compatibility:
          type: object
          properties:
            protocol_versions:
              type: array
              items:
                type: string
            supported_input_modes:
              type: array
              items:
                type: string
            supported_output_modes:
              type: array
              items:
                type: string

    WorkflowMatchRequest:
      type: object
      required:
        - workflow_requirements
      properties:
        workflow_requirements:
          type: array
          items:
            type: object
            properties:
              stage:
                type: string
              required_skills:
                type: array
                items:
                  type: string
              input_modes:
                type: array
                items:
                  type: string
              output_modes:
                type: array
                items:
                  type: string
              depends_on:
                type: array
                items:
                  type: string

    WorkflowMatchResponse:
      type: object
      properties:
        workflow_id:
          type: string
        matching_agents:
          type: array
          items:
            type: object
            properties:
              stage:
                type: string
              agents:
                type: array
                items:
                  $ref: '#/components/schemas/AgentSearchResult'
        total_stages:
          type: integer
        coverage_percentage:
          type: number

    AgentHealthResponse:
      type: object
      properties:
        agent_id:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy, unreachable]
        last_health_check:
          type: string
          format: date-time
        response_time_ms:
          type: number
        health_details:
          type: object
          properties:
            service_status:
              type: string
            memory_usage:
              type: string
            cpu_usage:
              type: string
            active_tasks:
              type: integer
            error_rate:
              type: string
        capabilities_status:
          type: object
          properties:
            all_skills_available:
              type: boolean
            degraded_skills:
              type: array
              items:
                type: string
            unavailable_skills:
              type: array
              items:
                type: string

    AgentHealthStatus:
      type: object
      properties:
        current_status:
          type: string
          enum: [healthy, degraded, unhealthy, unreachable]
        last_health_check:
          type: string
          format: date-time
        response_time_ms:
          type: number
        uptime_percentage:
          type: number
        error_rate_percentage:
          type: number

    AgentUsageAnalytics:
      type: object
      properties:
        total_invocations:
          type: integer
        successful_invocations:
          type: integer
        failed_invocations:
          type: integer
        average_response_time:
          type: number
        last_invocation:
          type: string
          format: date-time

    AgentMetricsResponse:
      type: object
      properties:
        agent_id:
          type: string
        period:
          type: string
        metrics:
          type: object
          properties:
            invocations:
              type: array
              items:
                type: object
            response_times:
              type: array
              items:
                type: object
            error_rates:
              type: array
              items:
                type: object
            resource_usage:
              type: array
              items:
                type: object

    SystemHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        total_agents:
          type: integer
        healthy_agents:
          type: integer
        unhealthy_agents:
          type: integer
        last_health_sweep:
          type: string
          format: date-time
        system_metrics:
          type: object
          properties:
            registry_uptime:
              type: string
            avg_agent_response_time:
              type: number
            total_registrations_today:
              type: integer

    WorkflowPlanRequest:
      type: object
      required:
        - workflow_name
        - stages
      properties:
        workflow_name:
          type: string
          example: "financial_data_pipeline"
        description:
          type: string
        stages:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              required_capabilities:
                type: array
                items:
                  type: string
              depends_on:
                type: array
                items:
                  type: string

    WorkflowPlanResponse:
      type: object
      properties:
        workflow_id:
          type: string
        execution_plan:
          type: array
          items:
            type: object
            properties:
              stage:
                type: string
              agent:
                type: object
                properties:
                  agent_id:
                    type: string
                  name:
                    type: string
                  url:
                    type: string
        estimated_duration:
          type: string
        total_agents:
          type: integer

    WorkflowExecutionRequest:
      type: object
      required:
        - input_data
      properties:
        input_data:
          type: object
        context_id:
          type: string
        execution_mode:
          type: string
          enum: [sequential, parallel, hybrid]
          default: sequential

    WorkflowExecutionResponse:
      type: object
      properties:
        execution_id:
          type: string
        workflow_id:
          type: string
        status:
          type: string
          enum: [started, running, completed, failed, cancelled]
        started_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    WorkflowExecutionStatus:
      type: object
      properties:
        execution_id:
          type: string
        workflow_id:
          type: string
        status:
          type: string
          enum: [planned, running, completed, failed, cancelled]
        current_stage:
          type: string
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        duration_ms:
          type: number
        stage_results:
          type: array
          items:
            type: object
        output_data:
          type: object
        error_details:
          type: object

    ValidationResults:
      type: object
      properties:
        valid:
          type: boolean
        warnings:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
        protocol_compliance:
          type: boolean
        connectivity_check:
          type: boolean

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        services:
          type: object
          properties:
            database:
              type: string
            search_engine:
              type: string
            auth_service:
              type: string
        metrics:
          type: object
          properties:
            total_agents:
              type: integer
            healthy_agents:
              type: integer
            active_workflows:
              type: integer
        timestamp:
          type: string
          format: date-time

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "error"
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_FAILED"
            message:
              type: string
            details:
              type: array
              items:
                type: object

    ConflictError:
      type: object
      properties:
        status:
          type: string
          example: "error"
        error:
          type: object
          properties:
            code:
              type: string
              example: "AGENT_ALREADY_EXISTS"
            message:
              type: string

    BadRequestError:
      type: object
      properties:
        status:
          type: string
          example: "error"
        error:
          type: object
          properties:
            code:
              type: string
              example: "INVALID_PARAMETERS"
            message:
              type: string

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "Authentication required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND"
                  message:
                    type: string
                    example: "Resource not found"

tags:
  - name: Agent Registration
    description: A2A agent registration operations
  - name: Agent Discovery
    description: Agent search and discovery operations
  - name: Health Monitoring
    description: Agent health monitoring and metrics
  - name: Workflow Orchestration
    description: Multi-agent workflow planning and execution
  - name: Monitoring
    description: Service monitoring and health checks