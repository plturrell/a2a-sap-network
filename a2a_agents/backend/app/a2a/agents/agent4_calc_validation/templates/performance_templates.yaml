templates:
  - template_id: "perf_latency_measurement"
    computation_type: "performance"
    complexity_level: "easy"
    pattern_category: "latency_test"
    input_generator:
      type: "performance_payload"
      parameters:
        size_bytes: 1024
        payload_type: "json"
        complexity: "low"
    expected_behavior:
      max_execution_time: 0.1
      min_throughput: 1000
      performance_bounds:
        p50_latency: 0.05
        p95_latency: 0.08
        p99_latency: 0.1
    validation:
      method: "performance_bounds"
      latency_validation: true
    metadata:
      builtin: true
      version: "1.0"
      description: "Basic latency measurement for small payloads"

  - template_id: "perf_throughput_scaling"
    computation_type: "performance"
    complexity_level: "medium"
    pattern_category: "throughput_test"
    input_generator:
      type: "load_generator"
      parameters:
        concurrent_requests: 10
        duration_seconds: 30
        ramp_up_time: 5
    expected_behavior:
      min_throughput: 100
      max_error_rate: 0.01
      performance_bounds:
        requests_per_second: 100
        concurrent_capacity: 10
    validation:
      method: "performance_bounds"
      throughput_validation: true
    metadata:
      builtin: true
      version: "1.0"
      description: "Throughput scaling under concurrent load"

  - template_id: "perf_memory_usage"
    computation_type: "performance"
    complexity_level: "medium"
    pattern_category: "resource_usage"
    input_generator:
      type: "memory_stress"
      parameters:
        data_size_mb: 100
        operations: 1000
        pattern: "sequential_access"
    expected_behavior:
      max_memory_usage: 150
      memory_leak_tolerance: 0.05
      performance_bounds:
        memory_efficiency: 0.8
    validation:
      method: "resource_monitoring"
      memory_validation: true
    metadata:
      builtin: true
      version: "1.0"
      description: "Memory usage and efficiency testing"

  - template_id: "perf_stress_testing"
    computation_type: "performance"
    complexity_level: "hard"
    pattern_category: "stress_test"
    input_generator:
      type: "stress_generator"
      parameters:
        load_multiplier: 10
        duration_seconds: 60
        failure_scenarios: ["high_load", "resource_exhaustion"]
    expected_behavior:
      graceful_degradation: true
      max_error_rate: 0.1
      recovery_time: 10
    validation:
      method: "stress_validation"
      degradation_patterns: ["throttling", "circuit_breaker", "backpressure"]
    metadata:
      builtin: true
      version: "1.0"
      description: "High-load stress testing with failure scenarios"

  - template_id: "perf_cpu_intensive"
    computation_type: "performance"
    complexity_level: "hard"
    pattern_category: "cpu_bound"
    input_generator:
      type: "cpu_workload"
      parameters:
        computation_complexity: "quadratic"
        data_size: 10000
        iterations: 100
    expected_behavior:
      max_execution_time: 5.0
      cpu_efficiency: 0.8
      performance_bounds:
        operations_per_second: 1000
    validation:
      method: "performance_bounds"
      cpu_validation: true
    metadata:
      builtin: true
      version: "1.0"
      description: "CPU-intensive computation performance testing"