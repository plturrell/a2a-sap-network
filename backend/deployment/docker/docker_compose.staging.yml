# FinSight CIB ORD Registry - Staging Docker Compose Configuration
version: '3.8'

services:
  ord-registry:
    build:
      context: .
      dockerfile: Dockerfile.staging
    image: finsight-ord-registry:staging-latest
    container_name: ord-registry-staging
    ports:
      - "8080:8080"
      - "9090:9090"  # Prometheus metrics
    environment:
      - ENVIRONMENT=staging
    env_file:
      - .env
    volumes:
      - ./logs:/var/log/ord-registry
      - ./data:/app/data
      - ./.env:/app/.env:ro
    networks:
      - ord-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ord-registry.rule=Host(`staging-ord-registry.finsight.ai`)"
      - "traefik.http.routers.ord-registry.entrypoints=websecure"
      - "traefik.http.routers.ord-registry.tls.certresolver=letsencrypt"
      - "traefik.http.services.ord-registry.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional but recommended for staging)
  redis:
    image: redis:7-alpine
    container_name: ord-registry-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ord-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus for monitoring (staging environment)
  prometheus:
    image: prom/prometheus:latest
    container_name: ord-registry-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - ord-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization (staging environment)
  grafana:
    image: grafana/grafana:latest
    container_name: ord-registry-grafana-staging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_admin_2025
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ord-network
    restart: unless-stopped

networks:
  ord-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
