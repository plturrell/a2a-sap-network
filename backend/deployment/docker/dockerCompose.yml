version: '3.8'

services:
  # Blockchain (Local Development)
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    command: anvil --host 0.0.0.0
    ports:
      - "8545:8545"
    networks:
      - a2a-network
    healthcheck:
      test: ["CMD", "cast", "block-number", "--rpc-url", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Manager
  data-manager:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: data_manager
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - HANA_CONNECTION_STRING=${HANA_CONNECTION_STRING}
      - SQLITE_DB_PATH=/app/data/a2a_fallback.db
      - SQLITE_JOURNAL_MODE=WAL
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
      - BDC_CONTRACT_ADDRESS=0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0
    volumes:
      - data-manager-storage:/app/data
    networks:
      - a2a-network
    depends_on:
      - anvil
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Catalog Manager
  catalog-manager:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: catalog_manager
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - DATA_MANAGER_URL=http://data-manager:8001
      - ORD_REGISTRY_URL=${ORD_REGISTRY_URL}
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
    volumes:
      - catalog-manager-cache:/app/cache
    networks:
      - a2a-network
    depends_on:
      - data-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent 0 - Data Product Registration
  agent0:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: agent0_data_product
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - DATA_MANAGER_URL=http://data-manager:8001
      - CATALOG_MANAGER_URL=http://catalog-manager:8002
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
      - BDC_CONTRACT_ADDRESS=0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0
    networks:
      - a2a-network
    depends_on:
      - catalog-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent 1 - Data Standardization
  agent1:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: agent1_standardization
    ports:
      - "8004:8004"
    environment:
      - PORT=8004
      - DATA_MANAGER_URL=http://data-manager:8001
      - CATALOG_MANAGER_URL=http://catalog-manager:8002
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
    networks:
      - a2a-network
    depends_on:
      - agent0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent 2 - AI Preparation
  agent2:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: agent2_ai_preparation
    ports:
      - "8005:8005"
    environment:
      - PORT=8005
      - DATA_MANAGER_URL=http://data-manager:8001
      - CATALOG_MANAGER_URL=http://catalog-manager:8002
      - GROK_API_KEY=${GROK_API_KEY}
      - GROK_API_URL=${GROK_API_URL}
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
    networks:
      - a2a-network
    depends_on:
      - agent1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent 3 - Vector Processing
  agent3:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: agent3_vector_processing
    ports:
      - "8008:8008"
    environment:
      - PORT=8008
      - DATA_MANAGER_URL=http://data-manager:8001
      - CATALOG_MANAGER_URL=http://catalog-manager:8002
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
    networks:
      - a2a-network
    depends_on:
      - agent2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent 4 - Calculation Validation
  agent4:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: agent4_calc_validation
    ports:
      - "8006:8006"
    environment:
      - PORT=8006
      - DATA_MANAGER_URL=http://data-manager:8001
      - CATALOG_MANAGER_URL=http://catalog-manager:8002
      - AGENT3_URL=http://agent3:8008
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
    networks:
      - a2a-network
    depends_on:
      - agent3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent 5 - QA Validation
  agent5:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_NAME: agent5_qa_validation
    ports:
      - "8007:8007"
    environment:
      - PORT=8007
      - DATA_MANAGER_URL=http://data-manager:8001
      - CATALOG_MANAGER_URL=http://catalog-manager:8002
      - AGENT3_URL=http://agent3:8008
      - BLOCKCHAIN_RPC_URL=http://anvil:8545
    networks:
      - a2a-network
    depends_on:
      - agent4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    networks:
      - a2a-network
    depends_on:
      - data-manager
      - catalog-manager
      - agent0
      - agent1
      - agent2
      - agent3
      - agent4
      - agent5

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - a2a-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - a2a-network
    depends_on:
      - prometheus

networks:
  a2a-network:
    driver: bridge

volumes:
  data-manager-storage:
  catalog-manager-cache:
  prometheus-data:
  grafana-data: