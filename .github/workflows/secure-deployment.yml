name: Secure Production Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'a2aNetwork/contracts/**'
      - 'a2aNetwork/srv/**'
      - 'a2aNetwork/pythonSdk/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  SOLIDITY_VERSION: '0.8.20'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
      vulnerability-count: ${{ steps.security-check.outputs.count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'a2aNetwork/package-lock.json'

      - name: Install dependencies
        working-directory: ./a2aNetwork
        run: |
          npm ci --only=production
          npm install --save-dev @nomicfoundation/hardhat-toolbox

      - name: Run Slither security analysis
        uses: crytic/slither-action@v0.3.0
        with:
          target: 'a2aNetwork/contracts'
          slither-config: 'a2aNetwork/slither.config.json'
          fail-on: 'high'

      - name: Run Mythril security analysis
        run: |
          pip install mythril
          myth analyze a2aNetwork/contracts/*.sol --solv ${{ env.SOLIDITY_VERSION }}

      - name: Smart contract testing
        working-directory: ./a2aNetwork
        run: |
          npx hardhat test test/contracts/SecurityTestSuite.js
          npx hardhat coverage

      - name: JavaScript security scan
        working-directory: ./a2aNetwork
        run: |
          npm audit --audit-level high
          npx eslint srv/ --ext .js --max-warnings 0

      - name: Python security scan
        working-directory: ./a2aNetwork
        run: |
          pip install bandit safety
          bandit -r pythonSdk/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Security check summary
        id: security-check
        run: |
          # Aggregate security results
          VULNERABILITY_COUNT=0
          PASSED=true
          
          # Check if any high/critical vulnerabilities found
          if [ -f "bandit-report.json" ]; then
            HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")) | length' bandit-report.json)
            VULNERABILITY_COUNT=$((VULNERABILITY_COUNT + HIGH_ISSUES))
          fi
          
          if [ $VULNERABILITY_COUNT -gt 0 ]; then
            PASSED=false
          fi
          
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "count=$VULNERABILITY_COUNT" >> $GITHUB_OUTPUT

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            coverage/

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.outputs.security-passed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'a2aNetwork/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./a2aNetwork
        run: |
          npm ci
          pip install -r pythonSdk/requirements.txt

      - name: Compile smart contracts
        working-directory: ./a2aNetwork
        run: |
          npx hardhat compile
          npx hardhat size-contracts

      - name: Run comprehensive tests
        working-directory: ./a2aNetwork
        run: |
          npx hardhat test
          npm run test:integration
          python -m pytest pythonSdk/tests/

      - name: Gas optimization analysis
        working-directory: ./a2aNetwork
        run: |
          npx hardhat run scripts/gas-analysis.js
          
      - name: Build production artifacts
        working-directory: ./a2aNetwork
        run: |
          npm run build:production
          
      - name: Create deployment package
        run: |
          tar -czf deployment-package.tar.gz \
            a2aNetwork/contracts/ \
            a2aNetwork/srv/ \
            a2aNetwork/pythonSdk/ \
            a2aNetwork/package.json \
            a2aNetwork/hardhat.config.js

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz

  security-validation:
    name: Advanced Security Validation
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Extract and validate package
        run: |
          tar -xzf deployment-package.tar.gz
          
          # Validate package integrity
          sha256sum deployment-package.tar.gz > package.sha256
          
          # Check for malicious patterns
          grep -r "eval\|exec\|system\|shell_exec" a2aNetwork/ || true
          
          # Validate environment variables
          grep -r "process\.env\|os\.getenv" a2aNetwork/ | grep -v "NODE_ENV\|PORT" || true

      - name: Smart contract formal verification
        working-directory: ./a2aNetwork
        run: |
          # Install Certora Prover (if available)
          # certora-cli verify contracts/AgentServiceMarketplace.sol
          
          # Alternative: Use built-in Hardhat verification
          npx hardhat verify --network localhost

      - name: Penetration testing simulation
        run: |
          # Simulate common attack vectors
          echo "Running penetration testing simulation..."
          
          # Test for common vulnerabilities
          python scripts/security-tests.py

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-validation]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: https://staging.a2a-network.com
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Configure staging environment
        run: |
          echo "Configuring staging deployment..."
          
          # Set staging-specific environment variables
          echo "NODE_ENV=staging" >> $GITHUB_ENV
          echo "BLOCKCHAIN_NETWORK=sepolia" >> $GITHUB_ENV

      - name: Deploy smart contracts to testnet
        env:
          PRIVATE_KEY: ${{ secrets.STAGING_DEPLOYER_PRIVATE_KEY }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
        run: |
          tar -xzf deployment-package.tar.gz
          cd a2aNetwork
          
          # Deploy with Hardhat
          npx hardhat deploy --network sepolia --verify
          
          # Save deployment addresses
          cp deployments/sepolia/*.json ../staging-deployments/

      - name: Deploy backend services
        env:
          STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
        run: |
          # Deploy to staging infrastructure
          echo "Deploying backend services to staging..."
          
          # This would typically deploy to cloud infrastructure
          # kubectl apply -f k8s/staging/
          
      - name: Run post-deployment tests
        run: |
          # Run integration tests against staging
          cd a2aNetwork
          npm run test:staging

      - name: Update staging status
        run: |
          echo "Staging deployment completed successfully"
          echo "Contracts deployed to Sepolia testnet"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event.inputs.environment == 'production' && github.event.inputs.force_deploy != 'true'
    environment: 
      name: production
      url: https://a2a-network.com
    steps:
      - name: Manual approval gate
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: blockchain-team,security-team
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Pre-production security check
        run: |
          echo "Running final security validation..."
          
          # Verify package hasn't been tampered with
          sha256sum -c package.sha256
          
          # Additional production-specific checks
          echo "All security checks passed"

      - name: Deploy to mainnet
        env:
          PRODUCTION_DEPLOYER_PRIVATE_KEY: ${{ secrets.PRODUCTION_DEPLOYER_PRIVATE_KEY }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
        run: |
          tar -xzf deployment-package.tar.gz
          cd a2aNetwork
          
          # Deploy to mainnet with extra caution
          npx hardhat deploy --network mainnet --verify --gas-price 20
          
          # Save production deployment info
          cp deployments/mainnet/*.json ../production-deployments/

      - name: Deploy production services
        env:
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
        run: |
          echo "Deploying production backend services..."
          
          # Deploy with blue-green strategy
          # kubectl apply -f k8s/production/

      - name: Post-deployment verification
        run: |
          cd a2aNetwork
          
          # Verify all contracts are working
          npm run verify:production
          
          # Check system health
          npm run health-check:production

      - name: Notify stakeholders
        run: |
          echo "Production deployment completed successfully"
          
          # Send notifications (Slack, email, etc.)
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"🚀 A2A Network production deployment completed successfully!"}'

  security-monitoring:
    name: Enable Security Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Setup monitoring alerts
        run: |
          echo "Configuring security monitoring..."
          
          # Enable real-time security monitoring
          # This would configure monitoring tools like Datadog, New Relic, etc.

      - name: Deploy threat detection
        run: |
          echo "Enabling threat detection systems..."
          
          # Configure automated threat response
          # Set up monitoring for contract interactions

  rollback-capability:
    name: Prepare Rollback Strategy
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    steps:
      - name: Create rollback plan
        run: |
          echo "Preparing rollback strategy..."
          
          # Document current state for potential rollback
          # Prepare emergency procedures

      - name: Emergency contacts notification
        run: |
          echo "Deployment failed - notifying emergency contacts"
          
          # Send emergency notifications
          curl -X POST ${{ secrets.EMERGENCY_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"🚨 A2A Network deployment failed - immediate attention required!"}'