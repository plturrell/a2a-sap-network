name: Build and Deploy A2A Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of testing to run'
        required: true
        default: 'complete'
        type: choice
        options:
        - verification
        - complete
        - ui-only

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub for Build Cloud
      uses: docker/login-action@v3
      with:
        username: plturrell
        password: ${{ secrets.DOCKER_PAT }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Build Cloud
      uses: docker/setup-buildx-action@v3
      with:
        driver: cloud
        endpoint: "finsightintelligence/a22"
        install: true

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image via Build Cloud
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Use Build Cloud optimized outputs
        outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run 18-Step A2A System Verification
      run: |
        echo "🚀 Starting comprehensive A2A system verification on Docker Build Cloud"
        
        # Create necessary directories for logs and data
        mkdir -p logs data
        
        # Pull the built image (use latest tag from main branch)
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        
        # Run the 18-step startup verification in Docker
        docker run --rm \
          -v $PWD/logs:/app/logs:rw \
          -v $PWD/data:/app/data:rw \
          -e GITHUB_ACTIONS=true \
          -e CI=true \
          -e USER_ID=1001 \
          -e GROUP_ID=1001 \
          --memory=4g \
          --cpus=2 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          /bin/bash -c "
            echo '🔍 Running A2A 18-Step System Verification'
            # Fix permissions for logs directory
            mkdir -p /app/logs /app/data
            chmod 777 /app/logs /app/data
            # Make start.sh executable
            chmod +x start.sh
            # Run the 18-step verification using the new CI verify mode
            echo '🔄 Running 18-step A2A System Verification'
            echo ''
            
            # Use the CI verify mode we just added to start.sh
            ./start.sh ci-verify
            
            echo ''
            echo '🎉 A2A System verification completed successfully!'
          "
        
        # Display verification results
        echo "📊 Startup Verification Results:"
        if [ -f logs/startup.log ]; then
          echo "=== Startup Log ==="
          cat logs/startup.log
        fi
        
        if [ -f logs/trace.log ]; then
          echo "=== Trace Log ==="  
          cat logs/trace.log
        fi

    - name: Upload verification logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: a2a-verification-logs
        path: |
          logs/
          data/
        retention-days: 7

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 A2A Platform deployment ready!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "✅ 18-step verification completed successfully"
        echo ""
        echo "Deploy commands:"
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "docker-compose -f docker-compose.production.yml up -d"

  deploy-fly:
    needs: [build, test, ui-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Fly.io
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Deploy to Fly.io
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      run: |
        echo "🚀 Deploying A2A Platform to Fly.io..."
        
        # Update fly.toml with the latest image
        sed -i 's|image = ".*"|image = "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"|' fly.toml
        
        # Deploy to Fly.io
        flyctl deploy --remote-only --wait-timeout 300
        
        echo ""
        echo "✅ A2A Platform deployed to Fly.io!"
        echo ""
        echo "🌐 Access Points:"
        echo "   Launch Pad: https://a2a-platform.fly.dev:3000"
        echo "   A2A Network API: https://a2a-platform.fly.dev:4004/api/v1"
        echo "   Agent 0: https://a2a-platform.fly.dev:8000"
        echo "   API Docs: https://a2a-platform.fly.dev:8000/docs"
        echo ""
        echo "📊 Monitor deployment:"
        echo "   flyctl status"
        echo "   flyctl logs"

  ui-test:
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test Complete A2A Platform UI from Docker Build Cloud
      run: |
        echo "🚀 Starting Complete A2A Platform UI Testing from Docker Build Cloud"
        echo "Testing: Launch Pad + All 18 Agents + A2A Network + Frontend"
        echo ""
        
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        
        # Start A2A system in background with all ports exposed for testing
        docker run -d \
          --name a2a-full-test \
          -p 3000:3000 \
          -p 4004:4004 \
          -p 8000:8000 \
          -p 8001:8001 \
          -p 8002:8002 \
          -p 8003:8003 \
          -p 8004:8004 \
          -p 8005:8005 \
          -p 8006:8006 \
          -p 8007:8007 \
          -p 8008:8008 \
          -p 8009:8009 \
          -p 8010:8010 \
          -p 8011:8011 \
          -p 8012:8012 \
          -p 8013:8013 \
          -p 8014:8014 \
          -p 8015:8015 \
          -p 8016:8016 \
          -p 8017:8017 \
          -e GITHUB_ACTIONS=true \
          -e CI=true \
          -e ENABLE_ALL_AGENTS=true \
          -e A2A_NETWORK_ENABLED=true \
          -e FRONTEND_ENABLED=true \
          --memory=6g \
          --cpus=4 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          start complete
        
        # Wait for all services to initialize
        echo "⏳ Waiting for complete A2A platform to start (60 seconds)..."
        sleep 60
        
        echo "🔍 Testing Complete A2A Platform Components..."
        echo "=============================================="
        echo ""
        
        # Test Launch Pad / Frontend
        echo "🎯 Testing Launch Pad & Frontend:"
        if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
          echo "✅ Launch Pad (port 3000): Accessible"
        else
          echo "❌ Launch Pad (port 3000): Not accessible"
        fi
        
        if docker exec a2a-full-test find /app -name "*.html" -o -name "*.js" -o -name "*.css" | head -5; then
          echo "✅ Frontend Assets: Found"
        else
          echo "❌ Frontend Assets: Not found"
        fi
        echo ""
        
        # Test A2A Network Service
        echo "🌐 Testing A2A Network Service:"
        if docker exec a2a-full-test curl -f -s http://localhost:4004/api/v1/health > /dev/null 2>&1; then
          echo "✅ A2A Network API (port 4004): Accessible"
        else
          echo "❌ A2A Network API (port 4004): Not accessible"
        fi
        
        if docker exec a2a-full-test curl -f -s http://localhost:4004/api/v1/agents > /dev/null 2>&1; then
          echo "✅ A2A Agents Endpoint: Accessible"
        else
          echo "❌ A2A Agents Endpoint: Not accessible"
        fi
        
        if docker exec a2a-full-test curl -f -s http://localhost:4004/api/v1/workflows > /dev/null 2>&1; then
          echo "✅ A2A Workflows Endpoint: Accessible"
        else
          echo "❌ A2A Workflows Endpoint: Not accessible"
        fi
        echo ""
        
        # Test All 18 Agent UIs
        echo "🤖 Testing All 18 Agent UIs:"
        AGENT_COUNT=0
        ACCESSIBLE_AGENTS=0
        
        for port in {8000..8017}; do
          agent_id=$((port - 8000))
          echo -n "Agent $agent_id (port $port): "
          
          if curl -f -s http://localhost:$port/health > /dev/null 2>&1; then
            echo "✅ Accessible"
            ((ACCESSIBLE_AGENTS++))
          elif curl -f -s http://localhost:$port > /dev/null 2>&1; then
            echo "✅ Accessible (no /health)"
            ((ACCESSIBLE_AGENTS++))
          elif docker exec a2a-full-test netstat -ln 2>/dev/null | grep ":$port " > /dev/null 2>&1; then
            echo "🟡 Port open but not responding"
          else
            echo "❌ Not accessible"
          fi
          ((AGENT_COUNT++))
        done
        
        echo ""
        echo "📊 Agent Summary: $ACCESSIBLE_AGENTS/$AGENT_COUNT agents accessible"
        echo ""
        
        # Test Agent Communication
        echo "💬 Testing Agent Communication:"
        if docker exec a2a-full-test curl -f -s http://localhost:8000/api/agents > /dev/null 2>&1; then
          echo "✅ Agent Registry: Accessible"
        else
          echo "❌ Agent Registry: Not accessible"
        fi
        
        # Test specific agent capabilities
        if docker exec a2a-full-test curl -f -s http://localhost:8000/api/capabilities > /dev/null 2>&1; then
          echo "✅ Agent Capabilities: Accessible"
        else
          echo "❌ Agent Capabilities: Not accessible"
        fi
        echo ""
        
        # Test API Documentation
        echo "📚 Testing API Documentation:"
        for port in 8000 8001 8002; do
          if curl -f -s http://localhost:$port/docs > /dev/null 2>&1; then
            echo "✅ Agent $((port - 8000)) API Docs (port $port): Accessible"
          else
            echo "❌ Agent $((port - 8000)) API Docs (port $port): Not accessible"
          fi
        done
        echo ""
        
        # Test MCP Servers
        echo "🔌 Testing MCP Servers:"
        if docker exec a2a-full-test find /app -path "*/mcp/servers/*" -name "*.py" | head -3; then
          echo "✅ MCP Server Files: Found"
        else
          echo "❌ MCP Server Files: Not found"
        fi
        echo ""
        
        # Show comprehensive logs
        echo "📋 Platform Status & Logs:"
        echo "=========================="
        docker exec a2a-full-test ps aux 2>/dev/null | head -10 || echo "Could not get process list"
        echo ""
        echo "Recent container logs (last 30 lines):"
        docker logs --tail=30 a2a-full-test
        echo ""
        
        # Test resource usage
        echo "💾 Resource Usage:"
        docker stats --no-stream a2a-full-test
        echo ""
        
        # Cleanup
        docker stop a2a-full-test
        docker rm a2a-full-test
        
        echo ""
        echo "🎉 Complete A2A Platform UI Testing Completed!"
        echo "=============================================="
        echo ""
        echo "📋 Full Platform Access Instructions:"
        echo "1. Pull image: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo ""
        echo "2. Run complete platform:"
        echo "   docker run -d --name a2a-platform \\"
        echo "     -p 3000:3000 \\"
        echo "     -p 4004:4004 \\"
        echo "     -p 8000-8017:8000-8017 \\"
        echo "     -e ENABLE_ALL_AGENTS=true \\"
        echo "     -e A2A_NETWORK_ENABLED=true \\"
        echo "     -e FRONTEND_ENABLED=true \\"
        echo "     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main start complete"
        echo ""
        echo "3. Access Points:"
        echo "   🎯 Launch Pad: http://localhost:3000"
        echo "   🌐 A2A Network API: http://localhost:4004/api/v1"
        echo "   🤖 All 18 Agents: http://localhost:8000-8017"
        echo "   📚 API Docs: http://localhost:8000/docs"
        echo ""
        echo "4. Key Endpoints:"
        echo "   - Agent Registry: http://localhost:8000/api/agents"
        echo "   - Network Health: http://localhost:4004/api/v1/health"
        echo "   - Workflows: http://localhost:4004/api/v1/workflows"
        echo "   - Agent Capabilities: http://localhost:8000/api/capabilities"