name: Build and Deploy A2A Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run 18-Step A2A System Verification
      run: |
        echo "üöÄ Starting comprehensive A2A system verification on Docker Build Cloud"
        
        # Create necessary directories for logs and data
        mkdir -p logs data
        
        # Pull the built image (use latest tag from main branch)
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        
        # Run the 18-step startup verification in Docker
        docker run --rm \
          -v $PWD/logs:/app/logs:rw \
          -v $PWD/data:/app/data:rw \
          -e GITHUB_ACTIONS=true \
          -e CI=true \
          -e USER_ID=1001 \
          -e GROUP_ID=1001 \
          --memory=4g \
          --cpus=2 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          /bin/bash -c "
            echo 'üîç Running A2A 18-Step System Verification'
            # Fix permissions for logs directory
            mkdir -p /app/logs /app/data
            chmod 777 /app/logs /app/data
            # Make start.sh executable
            chmod +x start.sh
            # Run the 18-step verification using the new CI verify mode
            echo 'üîÑ Running 18-step A2A System Verification'
            echo ''
            
            # Use the CI verify mode we just added to start.sh
            ./start.sh ci-verify
            
            echo ''
            echo 'üéâ A2A System verification completed successfully!'
          "
        
        # Display verification results
        echo "üìä Startup Verification Results:"
        if [ -f logs/startup.log ]; then
          echo "=== Startup Log ==="
          cat logs/startup.log
        fi
        
        if [ -f logs/trace.log ]; then
          echo "=== Trace Log ==="  
          cat logs/trace.log
        fi

    - name: Upload verification logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: a2a-verification-logs
        path: |
          logs/
          data/
        retention-days: 7

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ A2A Platform deployment ready!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "‚úÖ 18-step verification completed successfully"
        echo ""
        echo "Deploy commands:"
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "docker-compose -f docker-compose.production.yml up -d"

  ui-test:
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test UI from Docker Build Cloud
      run: |
        echo "üé® Starting UI testing from Docker Build Cloud"
        
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        
        # Start A2A system in background with UI exposed
        docker run -d \
          --name a2a-ui-test \
          -p 8000:8000 \
          -p 8001:8001 \
          -p 8002:8002 \
          -p 8003:8003 \
          -p 8004:8004 \
          -p 8005:8005 \
          -e GITHUB_ACTIONS=true \
          -e CI=true \
          --memory=4g \
          --cpus=2 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          start local
        
        # Wait for services to start
        echo "‚è≥ Waiting for A2A services to start..."
        sleep 30
        
        # Test UI endpoints
        echo "üîç Testing UI endpoints..."
        
        # Test main Agent 0 UI
        if curl -f -s http://localhost:8000/health > /dev/null; then
          echo "‚úÖ Agent 0 UI (port 8000): Accessible"
        else
          echo "‚ùå Agent 0 UI (port 8000): Not accessible"
        fi
        
        # Test Agent 1 UI  
        if curl -f -s http://localhost:8001/health > /dev/null; then
          echo "‚úÖ Agent 1 UI (port 8001): Accessible"
        else
          echo "‚ùå Agent 1 UI (port 8001): Not accessible"
        fi
        
        # Test A2A Network Service (if available)
        if docker exec a2a-ui-test curl -f -s http://localhost:4004/api/v1/agents > /dev/null 2>&1; then
          echo "‚úÖ A2A Network Service API: Accessible"
        else
          echo "‚ùå A2A Network Service API: Not accessible"
        fi
        
        # Test Frontend (if available)
        if docker exec a2a-ui-test find /app -name "index.html" | head -1; then
          echo "‚úÖ Frontend files: Found"
          # Try to access frontend if served
          if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ Frontend server: Accessible on port 3000"
          else
            echo "‚ÑπÔ∏è  Frontend server: Not running (files available for manual start)"
          fi
        else
          echo "‚ÑπÔ∏è  Frontend: Static files not found"
        fi
        
        # Show container logs for debugging
        echo ""
        echo "üìã Container logs (last 20 lines):"
        docker logs --tail=20 a2a-ui-test
        
        # Cleanup
        docker stop a2a-ui-test
        docker rm a2a-ui-test
        
        echo ""
        echo "üéâ UI testing completed!"
        echo ""
        echo "üìã UI Access Instructions:"
        echo "1. Pull image: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "2. Run with UI: docker run -p 8000:8000 -p 8001:8001 -p 8002:8002 -p 8003:8003 -p 8004:8004 -p 8005:8005 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main start local"
        echo "3. Access Agent UIs:"
        echo "   - Agent 0: http://localhost:8000"
        echo "   - Agent 1: http://localhost:8001" 
        echo "   - Agent 2: http://localhost:8002"
        echo "   - Agent 3: http://localhost:8003"
        echo "   - Agent 4: http://localhost:8004"
        echo "   - Agent 5: http://localhost:8005"
        echo "4. API Docs: http://localhost:8000/docs"