# HAProxy Configuration for A2A Platform
# Advanced load balancing with health checks, SSL termination, and monitoring

global
    # Daemon configuration
    daemon
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL configuration
    ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-sslv3 no-tlsv10 no-tlsv11
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 8192
    
    # Logging
    log stdout local0 info
    
defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout check 3000ms
    
    # Logging
    option httplog
    option dontlognull
    option log-health-checks
    
    # HTTP options
    option redispatch
    option abortonclose
    option httpclose
    option forwardfor except 127.0.0.0/8
    option originalto
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    
    # Retries and health checks
    retries 3
    option httpchk GET /health
    
# Statistics and monitoring
frontend stats
    bind *:8404
    mode http
    
    # Basic authentication for stats
    stats enable
    stats uri /stats
    stats realm HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD:-admin123}
    stats refresh 30s
    stats show-legends
    stats show-node
    stats admin if TRUE
    
    # Prometheus metrics
    http-request use-service prometheus-exporter if { path /metrics }
    
# Main frontend (HTTP -> HTTPS redirect)
frontend http_frontend
    bind *:80
    mode http
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301
    
# Main HTTPS frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/a2a-platform.pem alpn h2,http/1.1
    mode http
    
    # Compression
    compression algo gzip
    compression type text/html text/css text/javascript application/javascript application/json text/xml application/xml
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 100 }
    http-request reject if { sc_http_err_rate(0) gt 10 }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Custom headers
    http-request set-header X-Request-ID %[uuid()]
    http-request set-header X-Forwarded-Proto https
    
    # ACLs for routing
    acl is_api path_beg /api/
    acl is_agents path_beg /agents/
    acl is_glean path_beg /glean/
    acl is_auth path_beg /auth/
    acl is_ws path_beg /ws/
    acl is_static path_end .css .js .png .jpg .jpeg .gif .ico .svg .woff .woff2 .ttf .eot
    acl is_health path_beg /health
    
    # Content type ACLs
    acl is_json res.hdr(Content-Type) -m sub application/json
    acl is_html res.hdr(Content-Type) -m sub text/html
    
    # Caching rules
    http-request cache-use a2a_cache if is_api !is_auth
    http-response cache-store a2a_cache if is_api !is_auth
    
    # Backend selection
    use_backend a2a_network if is_api or is_auth
    use_backend a2a_agents if is_agents
    use_backend glean_agent if is_glean
    use_backend websocket_backend if is_ws
    use_backend static_files if is_static
    use_backend health_check if is_health
    
    # Default backend
    default_backend a2a_network
    
# Cache configuration
cache a2a_cache
    total-max-size 100   # MB
    max-age 300          # 5 minutes
    max-object-size 10000 # 10KB
    
# Backend definitions

# A2A Network Service Backend
backend a2a_network
    mode http
    balance roundrobin
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ a2a-platform.local
    http-check expect status 200
    
    # Server definitions
    server a2a-net-1 a2a-network-1:4004 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100
    server a2a-net-2 a2a-network-2:4004 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100
    server a2a-net-3 a2a-network-3:4004 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 50 backup
    
    # Connection settings
    http-reuse always
    
    # Timeouts
    timeout server 60s
    timeout connect 5s
    
    # Error handling
    retries 3
    option redispatch
    
# A2A Agents Service Backend
backend a2a_agents
    mode http
    balance leastconn
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ a2a-platform.local
    http-check expect status 200
    
    # Servers with different weights
    server agent-1 a2a-agents-1:8000 check inter 15s rise 2 fall 3 weight 100 maxconn 50
    server agent-2 a2a-agents-2:8000 check inter 15s rise 2 fall 3 weight 100 maxconn 50
    server agent-3 a2a-agents-3:8000 check inter 15s rise 2 fall 3 weight 75 maxconn 30
    
    # Longer timeouts for agent operations
    timeout server 300s
    timeout connect 10s
    
    # Stick table for session persistence if needed
    stick-table type string len 32 size 30k expire 30m
    stick on hdr(X-Session-ID)
    
# Glean Agent Backend (with session affinity)
backend glean_agent
    mode http
    balance source
    hash-type consistent
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ a2a-platform.local
    http-check expect status 200
    
    server glean-1 glean-agent-1:8001 check inter 20s rise 2 fall 2 weight 100 maxconn 20
    server glean-2 glean-agent-2:8001 check inter 20s rise 2 fall 2 weight 100 maxconn 20
    
    # Extended timeouts for analysis operations
    timeout server 600s
    timeout connect 15s
    
# WebSocket Backend
backend websocket_backend
    mode http
    balance leastconn
    
    # WebSocket specific settings
    option forwardfor
    option http-server-close
    timeout tunnel 86400s
    
    server ws-1 a2a-network-1:4004 check
    server ws-2 a2a-network-2:4004 check
    
# Static Files Backend
backend static_files
    mode http
    balance roundrobin
    
    # Caching for static files
    http-request cache-use static_cache
    http-response cache-store static_cache
    
    # Compression for static files
    compression algo gzip
    compression type text/css application/javascript text/javascript
    
    server static-1 a2a-network-1:4004 check
    server static-2 a2a-network-2:4004 check

# Health Check Aggregation Backend
backend health_check
    mode http
    balance roundrobin
    
    # Custom health check logic
    http-request lua.health_aggregator
    
    server health-1 a2a-network-1:4004 check
    
# Static file cache
cache static_cache
    total-max-size 200   # MB
    max-age 3600         # 1 hour
    max-object-size 50000 # 50KB
    
# TCP Frontend for Redis
frontend redis_frontend
    mode tcp
    bind *:6380
    
    # Connection limits
    maxconn 1000
    
    default_backend redis_cluster
    
# Redis Cluster Backend
backend redis_cluster
    mode tcp
    balance leastconn
    
    # TCP health checks
    option tcp-check
    tcp-check connect
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    server redis-1 redis-cluster-1:7001 check inter 5s rise 2 fall 2
    server redis-2 redis-cluster-2:7002 check inter 5s rise 2 fall 2
    server redis-3 redis-cluster-3:7003 check inter 5s rise 2 fall 2
    server redis-4 redis-cluster-4:7004 check inter 5s rise 2 fall 2 backup
    server redis-5 redis-cluster-5:7005 check inter 5s rise 2 fall 2 backup
    server redis-6 redis-cluster-6:7006 check inter 5s rise 2 fall 2 backup

# Email notification program (for health alerts)
program email-alert
    command /usr/local/bin/haproxy-alert.sh
    option start-on-reload
    
# Lua scripts section
global
    lua-load /etc/haproxy/health_aggregator.lua
    lua-load /etc/haproxy/rate_limiter.lua
    
# Additional logging configuration
frontend syslog
    bind 127.0.0.1:514
    mode tcp
    default_backend syslog_servers
    
backend syslog_servers
    mode tcp
    server syslog1 rsyslog:514

# Error page customization
frontend error_pages
    bind 127.0.0.1:8081
    mode http
    
    # Custom error pages
    errorfile 503 /etc/haproxy/errors/503-custom.html