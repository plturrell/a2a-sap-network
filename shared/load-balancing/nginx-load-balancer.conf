# NGINX Load Balancer Configuration for A2A Platform
# Advanced load balancing with health checks, SSL termination, and caching

# Main configuration
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main buffer=16k flush=5s;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=a2a_cache:100m 
                     max_size=1g inactive=60m use_temp_path=off;
    
    # Upstream definitions
    
    # A2A Network Service
    upstream a2a_network {
        # Load balancing method
        least_conn;
        
        # Health check (requires nginx-plus or custom module)
        # health_check interval=10s fails=3 passes=2 uri=/health;
        
        # Server instances
        server a2a-network-1:4004 max_fails=3 fail_timeout=30s weight=3;
        server a2a-network-2:4004 max_fails=3 fail_timeout=30s weight=3;
        server a2a-network-3:4004 max_fails=3 fail_timeout=30s weight=2 backup;
        
        # Keep connections alive
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # A2A Agents Service
    upstream a2a_agents {
        # Weighted round-robin
        server a2a-agents-1:8000 weight=3 max_fails=3 fail_timeout=30s;
        server a2a-agents-2:8000 weight=3 max_fails=3 fail_timeout=30s;
        server a2a-agents-3:8000 weight=2 max_fails=3 fail_timeout=30s;
        
        keepalive 16;
    }
    
    # Glean Agent Service
    upstream glean_agent {
        # IP Hash for session affinity
        ip_hash;
        
        server glean-agent-1:8001 max_fails=2 fail_timeout=20s;
        server glean-agent-2:8001 max_fails=2 fail_timeout=20s;
        
        keepalive 8;
    }
    
    # Redis Cluster
    upstream redis_cluster {
        server redis-cluster-1:7001 max_fails=1 fail_timeout=10s;
        server redis-cluster-2:7002 max_fails=1 fail_timeout=10s;
        server redis-cluster-3:7003 max_fails=1 fail_timeout=10s;
    }
    
    # Monitoring Services
    upstream prometheus {
        server prometheus:9090;
    }
    
    upstream grafana {
        server grafana:3000;
    }
    
    # Security headers map
    map $sent_http_content_type $security_headers {
        default "X-Content-Type-Options: nosniff; X-Frame-Options: DENY; X-XSS-Protection: 1; mode=block";
    }
    
    # Geo-based access control (example)
    geo $allowed_country {
        default 1;
        # Block specific countries if needed
        # include /etc/nginx/blocked_countries.conf;
    }
    
    # Main server block
    server {
        listen 80;
        server_name a2a-platform.local *.a2a-platform.local;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name a2a-platform.local *.a2a-platform.local;
        
        # SSL configuration
        ssl_certificate /etc/nginx/certs/a2a-platform.crt;
        ssl_certificate_key /etc/nginx/certs/a2a-platform.key;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # Security headers
        add_header $security_headers;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;
        
        # Geo-blocking
        if ($allowed_country = 0) {
            return 403 "Access denied from your location";
        }
        
        # Health check endpoint
        location = /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }
        
        # A2A Network API
        location /api/ {
            # API-specific rate limiting
            limit_req zone=api burst=50 nodelay;
            
            # Caching for GET requests
            proxy_cache a2a_cache;
            proxy_cache_key $scheme$proxy_host$request_uri$http_authorization;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
            
            # Add cache status header
            add_header X-Cache-Status $upstream_cache_status;
            
            # Proxy settings
            proxy_pass http://a2a_network;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # HTTP version
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # A2A Agents API
        location /agents/ {
            limit_req zone=api burst=30 nodelay;
            
            # No caching for agent operations
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            
            proxy_pass http://a2a_agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Longer timeouts for agent operations
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Glean Agent API (with session affinity)
        location /glean/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://glean_agent;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Extended timeouts for analysis operations
            proxy_connect_timeout 15s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Authentication endpoints
        location /auth/ {
            limit_req zone=auth burst=10 nodelay;
            
            # No caching for auth
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            
            proxy_pass http://a2a_network;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # WebSocket support for real-time features
        location /ws/ {
            proxy_pass http://a2a_network;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        
        # Static file serving with caching
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Try local files first, then proxy
            try_files $uri @proxy_static;
        }
        
        location @proxy_static {
            proxy_pass http://a2a_network;
            proxy_set_header Host $host;
            proxy_cache a2a_cache;
            proxy_cache_valid 200 1h;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Monitoring server (internal access only)
    server {
        listen 8080;
        server_name localhost;
        
        # Allow access only from internal networks
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Prometheus metrics
        location /prometheus/ {
            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Grafana dashboards
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # NGINX status
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        # Health check aggregation
        location /health/detailed {
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                local services = {
                    {name = "a2a_network", url = "http://a2a-network-1:4004/health"},
                    {name = "a2a_agents", url = "http://a2a-agents-1:8000/health"},
                    {name = "glean_agent", url = "http://glean-agent-1:8001/health"}
                }
                
                local health_status = {
                    overall = "healthy",
                    services = {}
                }
                
                for _, service in ipairs(services) do
                    local httpc = http.new()
                    httpc:set_timeout(5000)
                    
                    local res, err = httpc:request_uri(service.url)
                    
                    if res and res.status == 200 then
                        health_status.services[service.name] = {
                            status = "healthy",
                            response_time = res.headers["x-response-time"]
                        }
                    else
                        health_status.services[service.name] = {
                            status = "unhealthy",
                            error = err or "HTTP " .. (res and res.status or "timeout")
                        }
                        health_status.overall = "degraded"
                    end
                end
                
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(health_status))
            }
        }
    }
    
    # TCP load balancing for Redis (requires stream module)
    include /etc/nginx/stream.conf;
}

# Stream configuration for TCP load balancing
stream {
    # Logging
    log_format proxy '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                    '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    
    access_log /var/log/nginx/tcp_access.log proxy buffer=16k flush=5s;
    error_log /var/log/nginx/tcp_error.log warn;
    
    # Redis Cluster load balancing
    upstream redis_backend {
        least_conn;
        server redis-cluster-1:7001 max_fails=2 fail_timeout=10s;
        server redis-cluster-2:7002 max_fails=2 fail_timeout=10s;
        server redis-cluster-3:7003 max_fails=2 fail_timeout=10s;
    }
    
    server {
        listen 6380;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;
    }
}

# Additional configurations can be included
include /etc/nginx/conf.d/*.conf;