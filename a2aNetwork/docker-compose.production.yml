# Production environment override
version: '3.8'

services:
  a2a-agent:
    image: finsight-cib:${VERSION:-latest}
    environment:
      - A2A_ENVIRONMENT=production
      - LOG_LEVEL=info
      - NODE_ENV=production
    # Production resource limits (higher than base)
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    # Read-only root filesystem for security
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs

  redis:
    # Production Redis with persistence and security
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  postgres:
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    # Production-specific configuration
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    volumes:
      # Production backup location
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  nginx:
    # SSL termination in production
    ports:
      - "443:443"
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/certs:/etc/nginx/certs:ro
      - ./ssl/private:/etc/nginx/private:ro

  # Production monitoring stack
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.40.0}
    container_name: a2a-prometheus
    restart: unless-stopped
    networks:
      - a2a-network
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-9.3.0}
    container_name: a2a-grafana
    restart: unless-stopped
    networks:
      - a2a-network
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
    secrets:
      - grafana_admin_password

  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_VERSION:-1.40}
    container_name: a2a-jaeger
    restart: unless-stopped
    networks:
      - a2a-network
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  loki:
    image: grafana/loki:${LOKI_VERSION:-2.7.0}
    container_name: a2a-loki
    restart: unless-stopped
    networks:
      - a2a-network
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./config/loki:/etc/loki:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/loki.yml

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

volumes:
  prometheus-data:
    name: a2a-prometheus-data
    driver: local
  grafana-data:
    name: a2a-grafana-data
    driver: local
  loki-data:
    name: a2a-loki-data
    driver: local