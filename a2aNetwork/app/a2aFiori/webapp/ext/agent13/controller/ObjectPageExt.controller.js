sap.ui.define([
    "sap/ui/core/mvc/ControllerExtension",
    "sap/m/MessageToast",
    "sap/m/MessageBox",
    "sap/ui/core/Fragment",
    "sap/ui/model/json/JSONModel",
    "../utils/SecurityUtils"
], function(ControllerExtension, MessageToast, MessageBox, Fragment, JSONModel, SecurityUtils) {
    "use strict";

    return ControllerExtension.extend("a2a.network.agent13.ext.controller.ObjectPageExt", {
        
        override: {
            onInit: function () {
                this._initializeWizardModel();
            }
        },
        
        _initializeWizardModel: function() {
            var oWizardData = {
                templateName: "",
                description: "",
                templateType: "",
                agentCategory: "",
                complexity: "moderate",
                baseTemplate: "",
                templateLanguage: "handlebars",
                frameworkVersion: "",
                dependencies: "",
                prerequisites: "",
                customizable: true,
                codeLanguage: "python",
                codeStyle: "standard",
                testFramework: "pytest",
                documentationStyle: "sphinx",
                codeQualityTarget: 85,
                autoGenerateTests: true,
                autoGenerateDocs: true,
                previewType: "javascript",
                templatePreview: "",
                deploymentTarget: "kubernetes",
                containerImage: "",
                resourceRequirements: "",
                scalingPolicy: "horizontal",
                environmentVariables: "",
                healthCheckConfig: "",
                monitoringEnabled: true,
                supportedProtocols: ["http"],
                communicationMode: "asynchronous",
                authenticationMethods: ["bearer"],
                dataProcessingCapabilities: "",
                integrationPoints: "",
                loggingLevel: "info",
                templateNameState: "",
                templateNameStateText: "",
                templateTypeState: "",
                templateTypeStateText: "",
                agentCategoryState: "",
                agentCategoryStateText: "",
                canCreate: false,
                baseTemplates: []
            };
            var oWizardModel = new JSONModel(oWizardData);
            this.getView().setModel(oWizardModel, "wizard");
        },

        // Template Wizard Action
        onCreateAgentTemplate: function() {
            var oView = this.getView();
            
            if (!this._oTemplateWizard) {
                Fragment.load({
                    id: oView.getId(),
                    name: "a2a.network.agent13.ext.fragment.TemplateWizard",
                    controller: this
                }).then(function(oDialog) {
                    this._oTemplateWizard = oDialog;
                    oView.addDependent(this._oTemplateWizard);
                    this._loadBaseTemplates();
                    this._oTemplateWizard.open();
                }.bind(this));
            } else {
                this._resetWizardModel();
                this._loadBaseTemplates();
                this._oTemplateWizard.open();
            }
        },
        
        _loadBaseTemplates: function() {
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Load base templates (would be from service in real implementation)
            oData.baseTemplates = [
                { templateId: "basic_python", templateName: "Basic Python Agent" },
                { templateId: "rest_api", templateName: "REST API Handler" },
                { templateId: "data_processor", templateName: "Data Processing Agent" },
                { templateId: "ml_pipeline", templateName: "ML Pipeline Agent" },
                { templateId: "microservice", templateName: "Microservice Template" }
            ];
            
            oWizardModel.setData(oData);
        },

        // Wizard Dialog Lifecycle
        onWizardDialogAfterOpen: function() {
            // Focus on first input field
            var oTemplateNameInput = this.getView().byId("templateNameInput");
            if (oTemplateNameInput) {
                oTemplateNameInput.focus();
            }
            
            // Start real-time validation
            this._startWizardValidation();
        },
        
        onWizardDialogAfterClose: function() {
            // Stop real-time validation
            this._stopWizardValidation();
        },
        
        _startWizardValidation: function() {
            this._wizardValidationInterval = setInterval(() => {
                var oWizardModel = this.getView().getModel("wizard");
                if (oWizardModel) {
                    var oData = oWizardModel.getData();
                    this._updateCreateButtonState(oData);
                }
            }, 500);
        },
        
        _stopWizardValidation: function() {
            if (this._wizardValidationInterval) {
                clearInterval(this._wizardValidationInterval);
                this._wizardValidationInterval = null;
            }
        },
        
        _updateCreateButtonState: function(oData) {
            // Validate required fields
            var bValid = oData.templateName && oData.templateName.length >= 3 &&
                        oData.templateType && oData.agentCategory &&
                        oData.templateNameState !== "Error" &&
                        oData.templateTypeState !== "Error" &&
                        oData.agentCategoryState !== "Error";
            
            oData.canCreate = bValid;
            this.getView().getModel("wizard").setData(oData);
        },

        // Wizard Event Handlers
        onTemplateNameChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Sanitize input
            var sSanitized = SecurityUtils.sanitizeTemplateData(sValue);
            if (sSanitized !== sValue) {
                oEvent.getSource().setValue(sSanitized);
                sValue = sSanitized;
            }
            
            if (!sValue || sValue.length < 3) {
                oData.templateNameState = "Error";
                oData.templateNameStateText = "Template name must be at least 3 characters";
            } else if (sValue.length > 100) {
                oData.templateNameState = "Error";
                oData.templateNameStateText = "Template name must not exceed 100 characters";
            } else {
                oData.templateNameState = "Success";
                oData.templateNameStateText = "Valid template name";
            }
            
            oWizardModel.setData(oData);
        },
        
        onDescriptionChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            // Sanitize description
            var sSanitized = SecurityUtils.sanitizeTemplateData(sValue);
            if (sSanitized !== sValue) {
                oEvent.getSource().setValue(sSanitized);
            }
        },
        
        onTemplateTypeChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            if (sValue) {
                oData.templateTypeState = "Success";
                oData.templateTypeStateText = "Template type selected";
                
                // Auto-suggest based on template type
                switch (sValue) {
                    case "basic":
                        oData.complexity = "simple";
                        oData.codeLanguage = "python";
                        break;
                    case "cognitive":
                    case "autonomous":
                        oData.complexity = "expert";
                        oData.codeLanguage = "python";
                        oData.dependencies = "tensorflow, scikit-learn";
                        break;
                    case "microservice":
                        oData.deploymentTarget = "kubernetes";
                        oData.containerImage = "python:3.9-slim";
                        break;
                    case "realtime":
                        oData.communicationMode = "streaming";
                        oData.supportedProtocols = ["websocket", "grpc"];
                        break;
                }
                
                this._updateTemplatePreview(oData);
            } else {
                oData.templateTypeState = "Error";
                oData.templateTypeStateText = "Please select a template type";
            }
            
            oWizardModel.setData(oData);
        },
        
        onAgentCategoryChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            if (sValue) {
                oData.agentCategoryState = "Success";
                oData.agentCategoryStateText = "Agent category selected";
                
                // Auto-suggest based on category
                switch (sValue) {
                    case "ml_ai":
                        oData.codeLanguage = "python";
                        oData.testFramework = "pytest";
                        oData.dependencies = "numpy, pandas, scikit-learn";
                        break;
                    case "api_integration":
                        oData.communicationMode = "request_response";
                        oData.supportedProtocols = ["http"];
                        oData.authenticationMethods = ["oauth2", "bearer"];
                        break;
                    case "data_processing":
                        oData.communicationMode = "batch";
                        oData.scalingPolicy = "horizontal";
                        break;
                    case "monitoring":
                        oData.monitoringEnabled = true;
                        oData.loggingLevel = "info";
                        break;
                }
            } else {
                oData.agentCategoryState = "Error";
                oData.agentCategoryStateText = "Please select an agent category";
            }
            
            oWizardModel.setData(oData);
        },
        
        onComplexityChange: function(oEvent) {
            var sValue = oEvent.getParameter("key");
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Adjust settings based on complexity
            switch (sValue) {
                case "simple":
                    oData.codeQualityTarget = 70;
                    oData.autoGenerateTests = true;
                    oData.autoGenerateDocs = true;
                    break;
                case "expert":
                    oData.codeQualityTarget = 95;
                    oData.autoGenerateTests = false; // Manual tests for complex scenarios
                    break;
            }
            
            oWizardModel.setData(oData);
        },
        
        onBaseTemplateChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Load template-specific defaults
            if (sValue) {
                this._loadTemplateDefaults(sValue, oData);
            }
            
            oWizardModel.setData(oData);
        },
        
        onTemplateLanguageChange: function(oEvent) {
            this._updateTemplatePreview();
        },
        
        onFrameworkVersionChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            // Validate version format
            if (sValue && !/^\d+\.\d+(\.\d+)?/.test(sValue)) {
                MessageToast.show("Please use semantic versioning (e.g., 1.0.0)");
            }
        },
        
        onDependenciesChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            // Validate dependencies format
            if (sValue) {
                var sDependencies = SecurityUtils.sanitizeTemplateData(sValue);
                if (sDependencies !== sValue) {
                    oEvent.getSource().setValue(sDependencies);
                }
            }
        },
        
        onPrerequisitesChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            var sSanitized = SecurityUtils.sanitizeTemplateData(sValue);
            if (sSanitized !== sValue) {
                oEvent.getSource().setValue(sSanitized);
            }
        },
        
        onCustomizableChange: function(oEvent) {
            var bState = oEvent.getParameter("state");
            if (!bState) {
                MessageToast.show("Template will use fixed configuration");
            }
        },
        
        onCodeLanguageChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Auto-adjust based on language
            switch (sValue) {
                case "python":
                    oData.testFramework = "pytest";
                    oData.documentationStyle = "sphinx";
                    oData.previewType = "python";
                    break;
                case "javascript":
                case "typescript":
                    oData.testFramework = "jest";
                    oData.documentationStyle = "jsdoc";
                    oData.previewType = "javascript";
                    break;
                case "java":
                    oData.testFramework = "junit";
                    oData.documentationStyle = "javadoc";
                    oData.previewType = "java";
                    break;
            }
            
            this._updateTemplatePreview(oData);
            oWizardModel.setData(oData);
        },
        
        onCodeStyleChange: function(oEvent) {
            this._updateTemplatePreview();
        },
        
        onTestFrameworkChange: function(oEvent) {
            this._updateTemplatePreview();
        },
        
        onDocumentationStyleChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            if (sValue === "swagger") {
                MessageToast.show("OpenAPI documentation will be auto-generated");
            }
        },
        
        onCodeQualityTargetChange: function(oEvent) {
            var nValue = oEvent.getParameter("value");
            if (nValue < 80) {
                MessageToast.show("Consider setting higher code quality target for production");
            }
        },
        
        onAutoGenerateTestsChange: function(oEvent) {
            var bState = oEvent.getParameter("state");
            if (!bState) {
                MessageBox.information("You will need to create tests manually");
            }
        },
        
        onAutoGenerateDocsChange: function(oEvent) {
            var bState = oEvent.getParameter("state");
            if (!bState) {
                MessageBox.information("You will need to write documentation manually");
            }
        },
        
        onDeploymentTargetChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Auto-adjust deployment settings
            switch (sValue) {
                case "kubernetes":
                    oData.containerImage = oData.codeLanguage + ":latest";
                    oData.scalingPolicy = "horizontal";
                    oData.monitoringEnabled = true;
                    break;
                case "serverless":
                    oData.scalingPolicy = "predictive";
                    oData.resourceRequirements = "Memory: 512MB";
                    break;
                case "edge":
                    oData.resourceRequirements = "CPU: 1, Memory: 1GB";
                    oData.scalingPolicy = "manual";
                    break;
            }
            
            oWizardModel.setData(oData);
        },
        
        onContainerImageChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            // Validate container image format
            if (sValue && !sValue.includes(":")) {
                MessageToast.show("Consider specifying image tag (e.g., python:3.9)");
            }
        },
        
        onResourceRequirementsChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            var sSanitized = SecurityUtils.sanitizeTemplateData(sValue);
            if (sSanitized !== sValue) {
                oEvent.getSource().setValue(sSanitized);
            }
        },
        
        onScalingPolicyChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            if (sValue === "manual") {
                MessageToast.show("Manual scaling requires monitoring setup");
            }
        },
        
        onEnvironmentVariablesChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            // Validate environment variables format
            if (sValue) {
                var aLines = sValue.split('\n');
                var bValid = aLines.every(function(sLine) {
                    return !sLine.trim() || sLine.includes('=');
                });
                if (!bValid) {
                    MessageToast.show("Use KEY=VALUE format for environment variables");
                }
            }
        },
        
        onHealthCheckConfigChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            if (sValue && !sValue.startsWith('/')) {
                MessageToast.show("Health check endpoint should start with /");
            }
        },
        
        onMonitoringEnabledChange: function(oEvent) {
            var bState = oEvent.getParameter("state");
            if (!bState) {
                MessageBox.warning("Monitoring is highly recommended for production deployments");
            }
        },
        
        onSupportedProtocolsChange: function(oEvent) {
            var aKeys = oEvent.getParameter("selectedKeys");
            if (aKeys.includes("grpc") && aKeys.includes("http")) {
                MessageToast.show("gRPC and HTTP protocols selected for maximum compatibility");
            }
        },
        
        onCommunicationModeChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Adjust protocols based on communication mode
            switch (sValue) {
                case "streaming":
                    if (!oData.supportedProtocols.includes("websocket")) {
                        oData.supportedProtocols.push("websocket");
                    }
                    break;
                case "event_driven":
                case "pubsub":
                    if (!oData.supportedProtocols.includes("mqtt")) {
                        oData.supportedProtocols.push("mqtt");
                    }
                    break;
            }
            
            oWizardModel.setData(oData);
        },
        
        onAuthenticationMethodsChange: function(oEvent) {
            var aKeys = oEvent.getParameter("selectedKeys");
            if (aKeys.includes("none")) {
                MessageBox.warning("No authentication is not recommended for production");
            }
        },
        
        onDataProcessingCapabilitiesChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            var sSanitized = SecurityUtils.sanitizeTemplateData(sValue);
            if (sSanitized !== sValue) {
                oEvent.getSource().setValue(sSanitized);
            }
        },
        
        onIntegrationPointsChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
            var sSanitized = SecurityUtils.sanitizeTemplateData(sValue);
            if (sSanitized !== sValue) {
                oEvent.getSource().setValue(sSanitized);
            }
        },
        
        onLoggingLevelChange: function(oEvent) {
            var sValue = oEvent.getParameter("selectedItem").getKey();
            if (sValue === "trace" || sValue === "debug") {
                MessageToast.show("Debug logging may impact performance");
            }
        },
        
        _updateTemplatePreview: function(oData) {
            if (!oData) {
                oData = this.getView().getModel("wizard").getData();
            }
            
            // Generate preview based on settings
            var sPreview = this._generateTemplatePreview(oData);
            oData.templatePreview = sPreview;
        },
        
        _generateTemplatePreview: function(oData) {
            // Simple template preview generation
            var sTemplate = "";
            
            switch (oData.codeLanguage) {
                case "python":
                    sTemplate = `# ${oData.templateName || 'Agent Template'}
class Agent:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
    def process(self, data):
        """Process incoming data"""
        self.logger.info("Processing data")
        return {"status": "success", "data": data}`;
                    break;
                case "javascript":
                    sTemplate = `// ${oData.templateName || 'Agent Template'}
class Agent {
    constructor() {
        this.logger = console;
    }
    
    process(data) {
        this.logger.log("Processing data");
        return { status: "success", data: data };
    }
}`;
                    break;
                default:
                    sTemplate = "// Template preview will be generated based on your selections";
            }
            
            return sTemplate;
        },
        
        _loadTemplateDefaults: function(sTemplateId, oData) {
            // Load defaults based on base template
            switch (sTemplateId) {
                case "rest_api":
                    oData.supportedProtocols = ["http"];
                    oData.communicationMode = "request_response";
                    oData.authenticationMethods = ["bearer", "oauth2"];
                    break;
                case "ml_pipeline":
                    oData.codeLanguage = "python";
                    oData.dependencies = "scikit-learn, pandas, numpy";
                    oData.resourceRequirements = "CPU: 4, Memory: 8GB";
                    break;
            }
        },
        
        onCancelTemplateWizard: function() {
            this._oTemplateWizard.close();
            this._resetWizardModel();
        },
        
        onConfirmTemplateWizard: function() {
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            // Final validation
            if (!this._validateWizardData(oData)) {
                return;
            }
            
            this._oTemplateWizard.setBusy(true);
            
            // Validate code generation configuration
            if (!SecurityUtils.validateCodeGeneration(oData)) {
                MessageBox.error(this.getResourceBundle().getText("error.invalidConfiguration"));
                return;
            }
            
            // Validate deployment configuration
            if (!SecurityUtils.validateDeploymentConfig(oData)) {
                MessageBox.error(this.getResourceBundle().getText("error.invalidDeploymentConfig"));
                return;
            }
            
            // Sanitize data for security
            var oSanitizedData = this._sanitizeWizardData(oData);
            
            SecurityUtils.secureCallFunction(this.getView().getModel(), "/CreateAgentTemplate", {
                urlParameters: oSanitizedData,
                success: function(data) {
                    this._oTemplateWizard.setBusy(false);
                    this._oTemplateWizard.close();
                    MessageToast.show(this.getResourceBundle().getText("msg.templateCreated"));
                    this._refreshTemplateData();
                    this._resetWizardModel();
                }.bind(this),
                error: function(error) {
                    this._oTemplateWizard.setBusy(false);
                    var errorMsg = SecurityUtils.escapeHTML(error.message || "Unknown error");
                    MessageBox.error(this.getResourceBundle().getText("error.templateCreationFailed") + ": " + errorMsg);
                }.bind(this)
            });
        },
        
        _validateWizardData: function(oData) {
            if (!oData.templateName || oData.templateName.length < 3) {
                MessageBox.error(this.getResourceBundle().getText("validation.templateNameRequired"));
                return false;
            }
            
            if (!oData.templateType) {
                MessageBox.error(this.getResourceBundle().getText("validation.templateTypeRequired"));
                return false;
            }
            
            if (!oData.agentCategory) {
                MessageBox.error(this.getResourceBundle().getText("validation.agentCategoryRequired"));
                return false;
            }
            
            return true;
        },
        
        _sanitizeWizardData: function(oData) {
            return {
                templateName: SecurityUtils.sanitizeTemplateData(oData.templateName),
                description: SecurityUtils.sanitizeTemplateData(oData.description),
                templateType: oData.templateType,
                agentCategory: oData.agentCategory,
                complexity: oData.complexity,
                baseTemplate: oData.baseTemplate,
                templateLanguage: oData.templateLanguage,
                frameworkVersion: SecurityUtils.sanitizeTemplateData(oData.frameworkVersion),
                dependencies: SecurityUtils.sanitizeTemplateData(oData.dependencies),
                prerequisites: SecurityUtils.sanitizeTemplateData(oData.prerequisites),
                customizable: !!oData.customizable,
                codeLanguage: oData.codeLanguage,
                codeStyle: oData.codeStyle,
                testFramework: oData.testFramework,
                documentationStyle: oData.documentationStyle,
                codeQualityTarget: parseInt(oData.codeQualityTarget) || 85,
                autoGenerateTests: !!oData.autoGenerateTests,
                autoGenerateDocs: !!oData.autoGenerateDocs,
                deploymentTarget: oData.deploymentTarget,
                containerImage: SecurityUtils.sanitizeTemplateData(oData.containerImage),
                resourceRequirements: SecurityUtils.sanitizeTemplateData(oData.resourceRequirements),
                scalingPolicy: oData.scalingPolicy,
                environmentVariables: SecurityUtils.sanitizeTemplateData(oData.environmentVariables),
                healthCheckConfig: SecurityUtils.sanitizeTemplateData(oData.healthCheckConfig),
                monitoringEnabled: !!oData.monitoringEnabled,
                supportedProtocols: oData.supportedProtocols || [],
                communicationMode: oData.communicationMode,
                authenticationMethods: oData.authenticationMethods || [],
                dataProcessingCapabilities: SecurityUtils.sanitizeTemplateData(oData.dataProcessingCapabilities),
                integrationPoints: SecurityUtils.sanitizeTemplateData(oData.integrationPoints),
                loggingLevel: oData.loggingLevel
            };
        },
        
        _resetWizardModel: function() {
            var oWizardModel = this.getView().getModel("wizard");
            var oData = oWizardModel.getData();
            
            oData.templateName = "";
            oData.description = "";
            oData.templateType = "";
            oData.agentCategory = "";
            oData.complexity = "moderate";
            oData.baseTemplate = "";
            oData.templateLanguage = "handlebars";
            oData.frameworkVersion = "";
            oData.dependencies = "";
            oData.prerequisites = "";
            oData.customizable = true;
            oData.codeLanguage = "python";
            oData.codeStyle = "standard";
            oData.testFramework = "pytest";
            oData.documentationStyle = "sphinx";
            oData.codeQualityTarget = 85;
            oData.autoGenerateTests = true;
            oData.autoGenerateDocs = true;
            oData.templatePreview = "";
            oData.deploymentTarget = "kubernetes";
            oData.containerImage = "";
            oData.resourceRequirements = "";
            oData.scalingPolicy = "horizontal";
            oData.environmentVariables = "";
            oData.healthCheckConfig = "";
            oData.monitoringEnabled = true;
            oData.supportedProtocols = ["http"];
            oData.communicationMode = "asynchronous";
            oData.authenticationMethods = ["bearer"];
            oData.dataProcessingCapabilities = "";
            oData.integrationPoints = "";
            oData.loggingLevel = "info";
            oData.templateNameState = "";
            oData.templateNameStateText = "";
            oData.templateTypeState = "";
            oData.templateTypeStateText = "";
            oData.agentCategoryState = "";
            oData.agentCategoryStateText = "";
            oData.canCreate = false;
            
            oWizardModel.setData(oData);
        },

        // Generate Agent Action
        onGenerateAgent: function() {
            const oContext = this.base.getView().getBindingContext();
            const oData = oContext.getObject();
            
            if (oData.deploymentStatus === 'deploying' || oData.deploymentStatus === 'deployed') {
                MessageToast.show(this.getResourceBundle().getText("msg.agentAlreadyDeployed"));
                return;
            }

            MessageBox.confirm(
                this.getResourceBundle().getText("msg.generateAgentConfirm"),
                {
                    onClose: function(oAction) {
                        if (oAction === MessageBox.Action.OK) {
                            this._generateAgent(oContext);
                        }
                    }.bind(this)
                }
            );
        },

        // Deploy Agent Action
        onDeployAgent: function() {
            const oContext = this.base.getView().getBindingContext();
            const oData = oContext.getObject();
            
            if (oData.deploymentStatus !== 'ready') {
                MessageToast.show(this.getResourceBundle().getText("error.notReadyForDeployment"));
                return;
            }

            if (!this._deploymentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "a2a.network.agent13.ext.fragment.DeploymentDialog",
                    controller: this
                }).then(function(oDialog) {
                    this._deploymentDialog = oDialog;
                    this.getView().addDependent(oDialog);
                    this._loadDeploymentOptions(oContext);
                    oDialog.open();
                }.bind(this));
            } else {
                this._loadDeploymentOptions(oContext);
                this._deploymentDialog.open();
            }
        },

        // Test Agent Action
        onTestAgent: function() {
            const oContext = this.base.getView().getBindingContext();
            const oData = oContext.getObject();
            
            if (!oData.codeGenerated) {
                MessageToast.show(this.getResourceBundle().getText("error.codeNotGenerated"));
                return;
            }

            if (!this._testRunner) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "a2a.network.agent13.ext.fragment.TestRunner",
                    controller: this
                }).then(function(oDialog) {
                    this._testRunner = oDialog;
                    this.getView().addDependent(oDialog);
                    this._initializeTestRunner(oContext);
                    oDialog.open();
                }.bind(this));
            } else {
                this._initializeTestRunner(oContext);
                this._testRunner.open();
            }
        },

        // Build Agent Action
        onBuildAgent: function() {
            const oContext = this.base.getView().getBindingContext();
            const oData = oContext.getObject();
            
            if (!oData.codeGenerated) {
                MessageToast.show(this.getResourceBundle().getText("error.codeNotGenerated"));
                return;
            }

            MessageBox.confirm(
                this.getResourceBundle().getText("msg.buildAgentConfirm"),
                {
                    onClose: function(oAction) {
                        if (oAction === MessageBox.Action.OK) {
                            this._buildAgent(oContext);
                        }
                    }.bind(this)
                }
            );
        },

        // Configure Agent Action
        onConfigureAgent: function() {
            const oContext = this.base.getView().getBindingContext();
            
            if (!this._configurationEditor) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "a2a.network.agent13.ext.fragment.ConfigurationEditor",
                    controller: this
                }).then(function(oDialog) {
                    this._configurationEditor = oDialog;
                    this.getView().addDependent(oDialog);
                    this._loadConfiguration(oContext);
                    oDialog.open();
                }.bind(this));
            } else {
                this._loadConfiguration(oContext);
                this._configurationEditor.open();
            }
        },

        // Clone Template Action
        onCloneTemplate: function() {
            const oContext = this.base.getView().getBindingContext();
            
            MessageBox.confirm(
                this.getResourceBundle().getText("msg.cloneTemplateConfirm"),
                {
                    onClose: function(oAction) {
                        if (oAction === MessageBox.Action.OK) {
                            this._cloneTemplate(oContext);
                        }
                    }.bind(this)
                }
            );
        },

        // Export Template Action
        onExportTemplate: function() {
            const oContext = this.base.getView().getBindingContext();
            
            if (!this._exportDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "a2a.network.agent13.ext.fragment.ExportTemplate",
                    controller: this
                }).then(function(oDialog) {
                    this._exportDialog = oDialog;
                    this.getView().addDependent(oDialog);
                    oDialog.open();
                }.bind(this));
            } else {
                this._exportDialog.open();
            }
        },

        // Validate Template Action
        onValidateTemplate: function() {
            const oContext = this.base.getView().getBindingContext();
            
            this._validateTemplate(oContext);
        },

        // Real-time monitoring initialization
        onAfterRendering: function() {
            this._initializeAgentMonitoring();
        },

        _initializeAgentMonitoring: function() {
            const oContext = this.base.getView().getBindingContext();
            if (!oContext) return;

            const templateId = oContext.getObject().templateId;
            
            // Subscribe to agent builder updates for this specific template
            if (this._eventSource) {
                this._eventSource.close();
            }

            try {
                // Use secure HTTPS connection for EventSource
                var eventSourceUrl = `https://${window.location.hostname}:8013/builder/${templateId}/stream`;
                this._eventSource = new EventSource(eventSourceUrl);
                
                this._eventSource.addEventListener('generation-progress', (event) => {
                    const data = JSON.parse(event.data);
                    this._updateGenerationProgress(data);
                });

                this._eventSource.addEventListener('build-progress', (event) => {
                    const data = JSON.parse(event.data);
                    this._updateBuildProgress(data);
                });

                this._eventSource.addEventListener('deployment-progress', (event) => {
                    const data = JSON.parse(event.data);
                    this._updateDeploymentProgress(data);
                });

                this._eventSource.addEventListener('test-progress', (event) => {
                    const data = JSON.parse(event.data);
                    this._updateTestProgress(data);
                });

            } catch (error) {
                console.warn("Server-Sent Events not available, using polling");
                this._initializePolling(templateId);
            }
        },

        _initializePolling: function(templateId) {
            this._pollInterval = setInterval(() => {
                this._refreshTemplateData();
            }, 3000);
        },

        _generateAgent: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            MessageToast.show(this.getResourceBundle().getText("msg.generationStarted"));
            
            SecurityUtils.secureCallFunction(oModel, "/GenerateAgent", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    MessageToast.show(this.getResourceBundle().getText("msg.agentGenerated"));
                    this._refreshTemplateData();
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.generationFailed"));
                }.bind(this)
            });
        },

        _buildAgent: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            MessageToast.show(this.getResourceBundle().getText("msg.buildStarted"));
            
            SecurityUtils.secureCallFunction(oModel, "/BuildAgent", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    MessageToast.show(this.getResourceBundle().getText("msg.buildCompleted"));
                    this._refreshTemplateData();
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.buildFailed"));
                }.bind(this)
            });
        },

        _validateTemplate: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            MessageToast.show(this.getResourceBundle().getText("msg.validationStarted"));
            
            SecurityUtils.secureCallFunction(oModel, "/ValidateTemplate", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    MessageToast.show(this.getResourceBundle().getText("msg.templateValidated"));
                    this._refreshTemplateData();
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.validationFailed"));
                }.bind(this)
            });
        },

        _cloneTemplate: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            SecurityUtils.secureCallFunction(oModel, "/CloneTemplate", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    MessageToast.show(this.getResourceBundle().getText("msg.templateCloned"));
                    this._refreshTemplateData();
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.cloneFailed"));
                }.bind(this)
            });
        },

        _loadDeploymentOptions: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            SecurityUtils.secureCallFunction(oModel, "/GetDeploymentOptions", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    this._displayDeploymentOptions(data);
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.loadingDeploymentOptions"));
                }.bind(this)
            });
        },

        _initializeTestRunner: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            SecurityUtils.secureCallFunction(oModel, "/GetTestSuite", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    this._setupTestRunner(data);
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.loadingTestSuite"));
                }.bind(this)
            });
        },

        _loadConfiguration: function(oContext) {
            const oModel = this.getView().getModel();
            const sTemplateId = oContext.getObject().templateId;
            
            SecurityUtils.secureCallFunction(oModel, "/GetAgentConfiguration", {
                urlParameters: {
                    templateId: sTemplateId
                },
                success: function(data) {
                    this._displayConfiguration(data);
                }.bind(this),
                error: function(error) {
                    MessageToast.show(this.getResourceBundle().getText("error.loadingConfiguration"));
                }.bind(this)
            });
        },

        _updateGenerationProgress: function(data) {
            // Update code generation progress
            const oProgressIndicator = this.getView().byId("generationProgress");
            if (oProgressIndicator) {
                oProgressIndicator.setPercentValue(data.progress);
                oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.currentStep}`);
            }
        },

        _updateBuildProgress: function(data) {
            // Update build progress
            const oProgressIndicator = this.getView().byId("buildProgress");
            if (oProgressIndicator) {
                oProgressIndicator.setPercentValue(data.progress);
                oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.currentStep}`);
            }
        },

        _updateDeploymentProgress: function(data) {
            // Update deployment progress
            const oProgressIndicator = this.getView().byId("deploymentProgress");
            if (oProgressIndicator) {
                oProgressIndicator.setPercentValue(data.progress);
                oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.currentStep}`);
            }
        },

        _updateTestProgress: function(data) {
            // Update test execution progress
            const oProgressIndicator = this.getView().byId("testProgress");
            if (oProgressIndicator) {
                oProgressIndicator.setPercentValue(data.progress);
                oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.testsCompleted}/${data.totalTests}`);
            }
        },

        _refreshTemplateData: function() {
            const oContext = this.base.getView().getBindingContext();
            if (oContext) {
                oContext.refresh();
            }
        },

        _displayDeploymentOptions: function(data) {
            // Display deployment options in dialog
        },

        _setupTestRunner: function(data) {
            // Setup test runner with test suite
        },

        _displayConfiguration: function(data) {
            // Display configuration in editor
        },

        getResourceBundle: function() {
            return this.getView().getModel("i18n").getResourceBundle();
        },

        onExit: function() {
            if (this._eventSource) {
                this._eventSource.close();
            }
            if (this._pollInterval) {
                clearInterval(this._pollInterval);
            }
            if (this._wizardValidationInterval) {
                clearInterval(this._wizardValidationInterval);
            }
        }
    });
});