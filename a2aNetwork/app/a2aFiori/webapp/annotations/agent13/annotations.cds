using A2AService as service from '../../../../srv/a2a-service';

// Agent 13 - Agent Builder Agent UI Annotations
annotate service.AgentTemplates with @(
    UI : {
        // List Report Configuration
        SelectionFields : [
            templateType,
            agentCategory,
            complexity,
            deploymentStatus,
            createdAt
        ],
        
        LineItem : [
            {Value: templateName, Label: 'Template Name'},
            {Value: templateType, Label: 'Template Type'},
            {Value: agentCategory, Label: 'Agent Category'},
            {Value: complexity, Label: 'Complexity'},
            {Value: deploymentStatus, Label: 'Status', Criticality: statusCriticality},
            {Value: version, Label: 'Version'},
            {Value: usageCount, Label: 'Usage Count'},
            {Value: rating, Label: 'Rating', Visualization: #Rating},
            {Value: lastDeployed, Label: 'Last Deployed'},
            {Value: createdAt, Label: 'Created'}
        ],
        
        // Object Page Configuration
        HeaderInfo : {
            TypeName : 'Agent Template',
            TypeNamePlural : 'Agent Templates',
            Title : {Value : templateName},
            Description : {Value : description},
            ImageUrl : 'sap-icon://developer-settings'
        },
        
        // Facets for Object Page
        Facets : [
            {
                $Type : 'UI.ReferenceFacet',
                Target : '@UI.FieldGroup#General',
                Label : 'General Information'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : '@UI.FieldGroup#TemplateConfig',
                Label : 'Template Configuration'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : '@UI.FieldGroup#CodeGeneration',
                Label : 'Code Generation Settings'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : '@UI.FieldGroup#DeploymentConfig',
                Label : 'Deployment Configuration'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : '@UI.FieldGroup#AgentCapabilities',
                Label : 'Agent Capabilities'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : '@UI.FieldGroup#BuildMetrics',
                Label : 'Build Metrics'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : 'TemplateParameters/@UI.LineItem',
                Label : 'Template Parameters'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : 'AgentComponents/@UI.LineItem',
                Label : 'Agent Components'
            },
            {
                $Type : 'UI.ReferenceFacet',
                Target : 'DeploymentHistory/@UI.LineItem',
                Label : 'Deployment History'
            }
        ],
        
        // Field Groups
        FieldGroup#General : {
            Data : [
                {Value : templateName},
                {Value : description},
                {Value : templateType},
                {Value : agentCategory},
                {Value : complexity},
                {Value : deploymentStatus},
                {Value : version}
            ]
        },
        
        FieldGroup#TemplateConfig : {
            Data : [
                {Value : baseTemplate},
                {Value : templateLanguage},
                {Value : frameworkVersion},
                {Value : dependencies},
                {Value : prerequisites},
                {Value : templateSource},
                {Value : templateFormat},
                {Value : customizable}
            ]
        },
        
        FieldGroup#CodeGeneration : {
            Data : [
                {Value : codeLanguage},
                {Value : codeStyle},
                {Value : lintingRules},
                {Value : testFramework},
                {Value : documentationStyle},
                {Value : codeQualityTarget, Visualization : #Rating},
                {Value : autoGenerateTests},
                {Value : autoGenerateDocs}
            ]
        },
        
        FieldGroup#DeploymentConfig : {
            Data : [
                {Value : deploymentTarget},
                {Value : containerImage},
                {Value : resourceRequirements},
                {Value : scalingPolicy},
                {Value : environmentVariables},
                {Value : secretsManagement},
                {Value : healthCheckConfig},
                {Value : monitoringEnabled}
            ]
        },
        
        FieldGroup#AgentCapabilities : {
            Data : [
                {Value : supportedProtocols},
                {Value : communicationMode},
                {Value : authenticationMethods},
                {Value : dataProcessingCapabilities},
                {Value : integrationPoints},
                {Value : apiSpecification},
                {Value : eventHandling},
                {Value : loggingLevel}
            ]
        },
        
        FieldGroup#BuildMetrics : {
            Data : [
                {Value : buildTime},
                {Value : buildSuccessRate, Visualization : #Rating},
                {Value : codeSize},
                {Value : dependencyCount},
                {Value : testCoverage, Visualization : #Rating},
                {Value : performanceScore, Visualization : #Rating},
                {Value : securityScore, Visualization : #Rating},
                {Value : maintainabilityIndex, Visualization : #Rating}
            ]
        }
    },
    
    // Capabilities
    Capabilities : {
        SearchRestrictions : {Searchable : true},
        InsertRestrictions : {Insertable : true},
        UpdateRestrictions : {Updatable : true},
        DeleteRestrictions : {Deletable : true}
    }
);

// Template Parameters as associated entity
annotate service.TemplateParameters with @(
    UI : {
        LineItem : [
            {Value: parameterName, Label: 'Parameter Name'},
            {Value: parameterType, Label: 'Type'},
            {Value: defaultValue, Label: 'Default Value'},
            {Value: isRequired, Label: 'Required'},
            {Value: validation, Label: 'Validation'},
            {Value: displayName, Label: 'Display Name'},
            {Value: helpText, Label: 'Help Text'},
            {Value: category, Label: 'Category'},
            {Value: sortOrder, Label: 'Sort Order'}
        ]
    }
);

// Agent Components as associated entity
annotate service.AgentComponents with @(
    UI : {
        LineItem : [
            {Value: componentName, Label: 'Component Name'},
            {Value: componentType, Label: 'Type'},
            {Value: version, Label: 'Version'},
            {Value: isRequired, Label: 'Required'},
            {Value: status, Label: 'Status', Criticality: statusCriticality},
            {Value: sourceRepository, Label: 'Source Repository'},
            {Value: buildStatus, Label: 'Build Status'},
            {Value: testStatus, Label: 'Test Status'},
            {Value: lastUpdated, Label: 'Last Updated'}
        ]
    }
);

// Deployment History as associated entity
annotate service.DeploymentHistory with @(
    UI : {
        LineItem : [
            {Value: deploymentId, Label: 'Deployment ID'},
            {Value: deploymentTime, Label: 'Deployment Time'},
            {Value: deploymentTarget, Label: 'Target'},
            {Value: deploymentStatus, Label: 'Status', Criticality: statusCriticality},
            {Value: agentName, Label: 'Agent Name'},
            {Value: version, Label: 'Version'},
            {Value: deployedBy, Label: 'Deployed By'},
            {Value: duration, Label: 'Duration'},
            {Value: rollbackAvailable, Label: 'Rollback Available'}
        ]
    }
);

// Agent Instances
annotate service.AgentInstances with @(
    UI : {
        SelectionFields : [
            agentName,
            agentType,
            status,
            environment
        ],
        
        LineItem : [
            {Value: agentName, Label: 'Agent Name'},
            {Value: agentType, Label: 'Agent Type'},
            {Value: status, Label: 'Status', Criticality: statusCriticality},
            {Value: environment, Label: 'Environment'},
            {Value: version, Label: 'Version'},
            {Value: endpoint, Label: 'Endpoint'},
            {Value: healthStatus, Label: 'Health', Criticality: healthCriticality},
            {Value: uptime, Label: 'Uptime'},
            {Value: lastActivity, Label: 'Last Activity'}
        ]
    }
);

// Code Repositories
annotate service.CodeRepositories with @(
    UI : {
        SelectionFields : [
            repositoryName,
            repositoryType,
            isActive
        ],
        
        LineItem : [
            {Value: repositoryName, Label: 'Repository Name'},
            {Value: repositoryType, Label: 'Type'},
            {Value: repositoryUrl, Label: 'Repository URL'},
            {Value: branch, Label: 'Branch'},
            {Value: lastCommit, Label: 'Last Commit'},
            {Value: commitCount, Label: 'Commits'},
            {Value: contributors, Label: 'Contributors'},
            {Value: isActive, Label: 'Active'}
        ]
    }
);

// Build Pipelines
annotate service.BuildPipelines with @(
    UI : {
        SelectionFields : [
            pipelineName,
            pipelineType,
            status
        ],
        
        LineItem : [
            {Value: pipelineName, Label: 'Pipeline Name'},
            {Value: pipelineType, Label: 'Type'},
            {Value: status, Label: 'Status', Criticality: statusCriticality},
            {Value: lastRunTime, Label: 'Last Run'},
            {Value: successRate, Label: 'Success Rate', Visualization: #Rating},
            {Value: averageDuration, Label: 'Avg Duration'},
            {Value: nextRunTime, Label: 'Next Run'},
            {Value: triggerType, Label: 'Trigger'}
        ]
    }
);

// Template Library
annotate service.TemplateLibrary with @(
    UI : {
        SelectionFields : [
            libraryName,
            category,
            visibility
        ],
        
        LineItem : [
            {Value: libraryName, Label: 'Library Name'},
            {Value: category, Label: 'Category'},
            {Value: templateCount, Label: 'Templates'},
            {Value: visibility, Label: 'Visibility'},
            {Value: downloads, Label: 'Downloads'},
            {Value: rating, Label: 'Rating', Visualization: #Rating},
            {Value: lastUpdated, Label: 'Last Updated'},
            {Value: maintainer, Label: 'Maintainer'}
        ]
    }
);

// Value Help annotations
annotate service.AgentTemplates {
    templateType @Common.ValueList : {
        $Type : 'Common.ValueListType',
        CollectionPath : 'TemplateTypes',
        Parameters : [{
            $Type : 'Common.ValueListParameterOut',
            LocalDataProperty : templateType,
            ValueListProperty : 'typeName'
        }]
    };
    
    agentCategory @Common.ValueList : {
        $Type : 'Common.ValueListType',
        CollectionPath : 'AgentCategories',
        Parameters : [{
            $Type : 'Common.ValueListParameterOut',
            LocalDataProperty : agentCategory,
            ValueListProperty : 'categoryName'
        }]
    };
    
    deploymentTarget @Common.ValueList : {
        $Type : 'Common.ValueListType',
        CollectionPath : 'DeploymentTargets',
        Parameters : [{
            $Type : 'Common.ValueListParameterOut',
            LocalDataProperty : deploymentTarget,
            ValueListProperty : 'targetName'
        }]
    };
}