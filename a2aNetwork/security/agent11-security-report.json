{
  "summary": {
    "total": 861,
    "critical": 41,
    "high": 728,
    "medium": 92,
    "low": 0
  },
  "byType": {
    "auth": [
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 60,
        "code": "* @function onRunCompliance",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 26,
        "code": "<IconTabFilter text=\"{i18n>tab.basicInfo}\" key=\"basic\" icon=\"sap-icon://detail-view\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 61,
        "code": "selectedKey=\"{create>/queryType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 67,
        "code": "<core:Item key=\"select\" text=\"{i18n>query.select}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 68,
        "code": "<core:Item key=\"insert\" text=\"{i18n>query.insert}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 69,
        "code": "<core:Item key=\"update\" text=\"{i18n>query.update}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 70,
        "code": "<core:Item key=\"delete\" text=\"{i18n>query.delete}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"create\" text=\"{i18n>query.create}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"alter\" text=\"{i18n>query.alter}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"drop\" text=\"{i18n>query.drop}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"procedure\" text=\"{i18n>query.procedure}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 75,
        "code": "<core:Item key=\"function\" text=\"{i18n>query.function}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 76,
        "code": "<core:Item key=\"trigger\" text=\"{i18n>query.trigger}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 77,
        "code": "<core:Item key=\"view\" text=\"{i18n>query.view}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 78,
        "code": "<core:Item key=\"index\" text=\"{i18n>query.index}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 85,
        "code": "selectedKey=\"{create>/databaseType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 91,
        "code": "<core:Item key=\"mysql\" text=\"{i18n>db.mysql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 92,
        "code": "<core:Item key=\"postgresql\" text=\"{i18n>db.postgresql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 93,
        "code": "<core:Item key=\"oracle\" text=\"{i18n>db.oracle}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 94,
        "code": "<core:Item key=\"sqlserver\" text=\"{i18n>db.sqlserver}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 95,
        "code": "<core:Item key=\"sqlite\" text=\"{i18n>db.sqlite}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 96,
        "code": "<core:Item key=\"hana\" text=\"{i18n>db.hana}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 97,
        "code": "<core:Item key=\"db2\" text=\"{i18n>db.db2}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 98,
        "code": "<core:Item key=\"snowflake\" text=\"{i18n>db.snowflake}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 99,
        "code": "<core:Item key=\"bigquery\" text=\"{i18n>db.bigquery}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 106,
        "code": "selectedKey=\"{create>/priority}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 108,
        "code": "<SegmentedButtonItem key=\"low\" text=\"{i18n>priority.low}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 109,
        "code": "<SegmentedButtonItem key=\"medium\" text=\"{i18n>priority.medium}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 110,
        "code": "<SegmentedButtonItem key=\"high\" text=\"{i18n>priority.high}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 111,
        "code": "<SegmentedButtonItem key=\"critical\" text=\"{i18n>priority.critical}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 119,
        "code": "selectedKey=\"{create>/complexity}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 120,
        "code": "<core:Item key=\"simple\" text=\"{i18n>complexity.simple}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 121,
        "code": "<core:Item key=\"moderate\" text=\"{i18n>complexity.moderate}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 122,
        "code": "<core:Item key=\"complex\" text=\"{i18n>complexity.complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 123,
        "code": "<core:Item key=\"very_complex\" text=\"{i18n>complexity.very_complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 152,
        "code": "<ComboBox id=\"queryLanguageCombo\" selectedKey=\"{create>/queryLanguage}\" selectionChange=\".onQueryLanguageChange\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 153,
        "code": "<core:Item key=\"sql\" text=\"SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 154,
        "code": "<core:Item key=\"tsql\" text=\"T-SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 155,
        "code": "<core:Item key=\"plsql\" text=\"PL/SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 156,
        "code": "<core:Item key=\"mysql\" text=\"MySQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 157,
        "code": "<core:Item key=\"postgresql\" text=\"PostgreSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 158,
        "code": "<core:Item key=\"nosql\" text=\"NoSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 175,
        "code": "<ComboBox id=\"indexUsageCombo\" selectedKey=\"{create>/indexUsage}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 176,
        "code": "<core:Item key=\"auto\" text=\"{i18n>indexUsage.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 177,
        "code": "<core:Item key=\"force\" text=\"{i18n>indexUsage.force}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 178,
        "code": "<core:Item key=\"hint\" text=\"{i18n>indexUsage.hint}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 179,
        "code": "<core:Item key=\"none\" text=\"{i18n>indexUsage.none}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 209,
        "code": "<IconTabFilter text=\"{i18n>tab.databaseConfig}\" key=\"database\" icon=\"sap-icon://database\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 242,
        "code": "<ComboBox id=\"transactionModeCombo\" selectedKey=\"{create>/transactionMode}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 243,
        "code": "<core:Item key=\"auto\" text=\"{i18n>transaction.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 244,
        "code": "<core:Item key=\"manual\" text=\"{i18n>transaction.manual}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 245,
        "code": "<core:Item key=\"read_only\" text=\"{i18n>transaction.read_only}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 246,
        "code": "<core:Item key=\"read_write\" text=\"{i18n>transaction.read_write}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 251,
        "code": "<ComboBox id=\"isolationLevelCombo\" selectedKey=\"{create>/isolationLevel}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 252,
        "code": "<core:Item key=\"read_uncommitted\" text=\"{i18n>isolation.read_uncommitted}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 253,
        "code": "<core:Item key=\"read_committed\" text=\"{i18n>isolation.read_committed}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 254,
        "code": "<core:Item key=\"repeatable_read\" text=\"{i18n>isolation.repeatable_read}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 255,
        "code": "<core:Item key=\"serializable\" text=\"{i18n>isolation.serializable}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 268,
        "code": "<IconTabFilter text=\"{i18n>tab.parameters}\" key=\"parameters\" icon=\"sap-icon://list\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 308,
        "code": "<ComboBox selectedKey=\"{parameterType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 309,
        "code": "<core:Item key=\"input\" text=\"Input\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 310,
        "code": "<core:Item key=\"output\" text=\"Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 311,
        "code": "<core:Item key=\"inout\" text=\"Input/Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 314,
        "code": "<ComboBox selectedKey=\"{dataType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 315,
        "code": "<core:Item key=\"varchar\" text=\"VARCHAR\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 316,
        "code": "<core:Item key=\"int\" text=\"INTEGER\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 317,
        "code": "<core:Item key=\"decimal\" text=\"DECIMAL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 318,
        "code": "<core:Item key=\"date\" text=\"DATE\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 319,
        "code": "<core:Item key=\"datetime\" text=\"DATETIME\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 320,
        "code": "<core:Item key=\"boolean\" text=\"BOOLEAN\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 334,
        "code": "<IconTabFilter text=\"{i18n>tab.security}\" key=\"security\" icon=\"sap-icon://shield\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 355,
        "code": "<ComboBox id=\"dataClassificationCombo\" selectedKey=\"{create>/dataClassification}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 356,
        "code": "<core:Item key=\"public\" text=\"Public\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 357,
        "code": "<core:Item key=\"internal\" text=\"Internal\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 358,
        "code": "<core:Item key=\"confidential\" text=\"Confidential\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 359,
        "code": "<core:Item key=\"restricted\" text=\"Restricted\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 68,
        "code": "selectedKey=\"{/selectedDatabase}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"main_db\" text=\"{i18n>mainDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"analytics_db\" text=\"{i18n>analyticsDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"reporting_db\" text=\"{i18n>reportingDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"archive_db\" text=\"{i18n>archiveDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 79,
        "code": "<Select selectedKey=\"{/sqlDialect}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 81,
        "code": "<core:Item key=\"HANA\" text=\"SAP HANA\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 82,
        "code": "<core:Item key=\"POSTGRESQL\" text=\"PostgreSQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 83,
        "code": "<core:Item key=\"MYSQL\" text=\"MySQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 84,
        "code": "<core:Item key=\"SQLITE\" text=\"SQLite\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 85,
        "code": "<core:Item key=\"ORACLE\" text=\"Oracle\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 86,
        "code": "<core:Item key=\"SQLSERVER\" text=\"SQL Server\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "manifest.json",
        "line": 70,
        "code": "\"press\": \".extension.a2a.network.agent11.ext.controller.ListReportExt.onRunCompliance\",",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 29,
        "code": "reject(new Error('Failed to fetch CSRF token: ' + error));",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "const key = \"rateLimit_\" + userId + \"_\" + operation;",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      }
    ],
    "insecure": [
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 507,
        "code": "if (!this._securityUtils.validateWebSocketUrl('ws://localhost:8011/compliance/updates')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 513,
        "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/compliance/updates', {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "manifest.json",
        "line": 14,
        "code": "\"uri\": \"https://a2a/agent11/v1/odata/\",",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "manifest.json",
        "line": 182,
        "code": "\"allowedOrigins\": [\"https://*.ondemand.com\"],",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 845,
        "code": "if (url.startsWith('http://')) {",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 846,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 793,
        "code": "if (url.startsWith('ws://')) {",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 794,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 793,
        "code": "if (url.startsWith('ws://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 794,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 845,
        "code": "if (url.startsWith('http://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 846,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      }
    ],
    "errorHandling": [
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 108,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 132,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 250,
        "code": ".then(function(oProgressDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 597,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 55,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 96,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 141,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 202,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 381,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 57,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 100,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 143,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 191,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 43,
        "code": "return this.getCSRFToken().then(function(token) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      }
    ],
    "resources": [
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 306,
        "code": "this._complianceEventSource = new EventSource('/api/agent11/compliance/progress-stream');",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 801,
        "code": "ws.addEventListener('open', function() {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 805,
        "code": "ws.addEventListener('error', function(error) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 809,
        "code": "ws.addEventListener('message', function(event) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 853,
        "code": "const originalAddEventListener = eventSource.addEventListener;",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 854,
        "code": "eventSource.addEventListener = function(type, listener, options) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 798,
        "code": "const ws = new WebSocket(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 850,
        "code": "const eventSource = new EventSource(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      }
    ],
    "sapFiori": [
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 75,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectTasksFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 82,
        "code": "this.getResourceBundle().getText(\"msg.runComplianceConfirm\", [aSelectedContexts.length]),",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 281,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.complianceCheckStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 286,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.complianceCheckFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 406,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.complianceCheckCompleted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 521,
        "code": "var sMessage = oBundle.getText(\"msg.websocketDisconnected\") || \"Connection lost. Reconnecting...\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 555,
        "code": "var sStartMsg = oBundle.getText(\"msg.complianceStarted\") || \"Compliance check started\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 559,
        "code": "var sCompleteMsg = oBundle.getText(\"msg.complianceCompleted\") || \"Compliance check completed\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 564,
        "code": "var sErrorMsg = oBundle.getText(\"error.complianceFailed\") || \"Compliance check failed\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 569,
        "code": "var sRuleMsg = oBundle.getText(\"msg.ruleUpdated\") || \"Compliance rule updated\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 18,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ListReportExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 565,
        "code": "var safeError = SecurityUtils.escapeHTML(data.error || 'Unknown error');",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 191,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.noViolationsToReview\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 11,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ObjectPageExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 222,
        "code": "const sanitized = this._securityUtils.escapeHTML(naturalLanguage);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 292,
        "code": "const sanitizedQuery = SecurityUtils.escapeHTML(naturalLanguage.trim());",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 726,
        "code": "* Safely escape HTML content",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 730,
        "code": "escapeHTML: function(content) {",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 929,
        "code": "return this.escapeHTML(result);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 937,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 949,
        "code": "return this.escapeHTML(String(result));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      }
    ],
    "sqlSecurity": [
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 277,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 356,
        "code": "urlParameters: { taskIds: aTaskIds.join(',') },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 86,
        "code": "this._executeComplianceChecks(aSelectedContexts);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 240,
        "code": "* @function _executeComplianceChecks",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 241,
        "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 245,
        "code": "_executeComplianceChecks: function(aSelectedContexts) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 239,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 274,
        "code": "urlParameters: { taskId: oScheduleData.taskId },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 305,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 12,
        "code": "* Prevents SQL injection through mandatory parameterized queries",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 45,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 46,
        "code": "const parameterizedQuery = this._sqlSecurity.buildSelectQuery(queryOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 52,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 88,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 89,
        "code": "const parameterizedQuery = this._sqlSecurity.buildInsertQuery(insertOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 95,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 131,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 132,
        "code": "const parameterizedQuery = this._sqlSecurity.buildUpdateQuery(updateOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 138,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 179,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 180,
        "code": "const parameterizedQuery = this._sqlSecurity.buildDeleteQuery(deleteOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 186,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 25,
        "code": "* Execute a SELECT query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 29,
        "code": "executeSelect: function(queryOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 55,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 68,
        "code": "* Execute an INSERT query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 72,
        "code": "executeInsert: function(insertOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 98,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 111,
        "code": "* Execute an UPDATE query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 115,
        "code": "executeUpdate: function(updateOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 141,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 154,
        "code": "* Execute a DELETE query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 158,
        "code": "executeDelete: function(deleteOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 189,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 7,
        "code": "* SQL Security Module - Prevents SQL injection through parameterized queries",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 12,
        "code": "* Create a parameterized query object",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 14,
        "code": "* @param {array} parameters - Array of parameters to bind",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 17,
        "code": "createParameterizedQuery: function(template, parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 25,
        "code": "// Validate parameter count",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 26,
        "code": "if (!parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 27,
        "code": "parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 30,
        "code": "if (placeholderCount !== parameters.length) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 31,
        "code": "throw new Error(\"Parameter count mismatch: expected \" + placeholderCount + \", got \" + parameters.length);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 34,
        "code": "// Validate and sanitize parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 35,
        "code": "const sanitizedParams = parameters.map(this.sanitizeParameter.bind(this));",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 39,
        "code": "parameters: sanitizedParams,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 41,
        "code": "isParameterized: true,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 47,
        "code": "* Sanitize a single parameter value",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 48,
        "code": "* @param {any} value - Parameter value to sanitize",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 51,
        "code": "sanitizeParameter: function(value) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 58,
        "code": "// Remove any SQL meta-characters that could break out of parameterization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 59,
        "code": "// Note: In a proper parameterized query, these should be safe, but we add extra protection",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 69,
        "code": "throw new Error(\"Invalid number parameter: \" + value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 79,
        "code": "return this.sanitizeParameter(String(value));",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 110,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 120,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 123,
        "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 146,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 152,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 160,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 165,
        "code": "parameters.push(data[column]);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 174,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 180,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 188,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 193,
        "code": "parameters.push(data[column]);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 203,
        "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 209,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 215,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 222,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 225,
        "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 231,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 238,
        "code": "_buildWhereClause: function(conditions, parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 251,
        "code": "parameters.push(...value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 259,
        "code": "parameters.push(value.value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 264,
        "code": "parameters.push(value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 305,
        "code": "if (!parameterizedQuery || !parameterizedQuery.isParameterized) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 309,
        "code": "Log.info(\"Executing parameterized query\", {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 310,
        "code": "template: parameterizedQuery.template,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 311,
        "code": "paramCount: parameterizedQuery.parameters.length,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 312,
        "code": "hash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 99,
        "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 320,
        "code": "message: \"Query executed successfully\"",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 128,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 794,
        "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 802,
        "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 820,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 834,
        "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 848,
        "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 20,
        "code": "const securityValidation = SecurityUtils.validateSQL(sql, options.parameters, {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 322,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 446,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 447,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 448,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 449,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 450,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 451,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 726,
        "code": "value: SecurityUtils.sanitizeSQLParameter(tableName),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 749,
        "code": "value: SecurityUtils.sanitizeSQLParameter(columnName),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 796,
        "code": "parameters: {},",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 804,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 814,
        "code": "parameters: {},",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 822,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 832,
        "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 836,
        "code": "parameters: Object.fromEntries(columns.map(createParameterEntry)),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 846,
        "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 850,
        "code": "parameters: Object.fromEntries(columns.map(createUpdateParameterEntry)),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 901,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type || ''),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 902,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table || ''),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 903,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 904,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 905,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 906,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 932,
        "code": "parameters: { table: pattern.table }",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 936,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 944,
        "code": "parameters: { table: pattern.table }",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 948,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 956,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 964,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 126,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 39,
        "code": "* @param {object} mParameters - Parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 42,
        "code": "secureCallFunction: function(oModel, sFunctionName, mParameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 44,
        "code": "const secureParams = Object.assign({}, mParameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 80,
        "code": "* @param {object} params - Query parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 183,
        "code": "// Advanced parameter validation",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 196,
        "code": "// Check for excessive parameter length",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 198,
        "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 205,
        "code": "// Check for proper parameterization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 207,
        "code": "const hasParameters = /[?$:]\\w*|\\{\\w+\\}/g.test(sanitized);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 209,
        "code": "if (hasLiterals && !hasParameters && !options.allowLiterals) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 210,
        "code": "warnings.push(\"SQL contains string literals - consider using parameterized queries\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 249,
        "code": "* Sanitize SQL parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 250,
        "code": "* @param {any} param - Parameter to sanitize",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 251,
        "code": "* @returns {any} Sanitized parameter",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 253,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 269,
        "code": "* Create secure parameterized query with advanced templates",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 271,
        "code": "* @param {object} parameters - Parameters to bind",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 275,
        "code": "createParameterizedQuery: function(baseQuery, parameters, options) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 278,
        "code": "const validation = this.validateSQL(baseQuery, parameters, {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 290,
        "code": "parameters: null,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 296,
        "code": "// Advanced parameter sanitization and validation",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 298,
        "code": "const parameterErrors = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 300,
        "code": "if (parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 301,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 302,
        "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 306,
        "code": "parameterErrors.push(...sanitized.errors);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 311,
        "code": "// Generate secure query with proper parameter binding",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 315,
        "code": "isValid: parameterErrors.length === 0,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 317,
        "code": "parameters: sanitizedParams,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 318,
        "code": "errors: parameterErrors,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 323,
        "code": "parameterTypes: secureQuery.parameterTypes",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 328,
        "code": "* Advanced parameter sanitization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 335,
        "code": "// Check parameter length limits",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 336,
        "code": "if (value.length > (options.maxParameterLength || 1000)) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 337,
        "code": "errors.push(\"Parameter '\" + key + \"' exceeds maximum length\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 348,
        "code": "// Additional validation for specific parameter types",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 350,
        "code": "// ID parameters should be numeric or UUID format",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 352,
        "code": "errors.push(\"Parameter '\" + key + \"' should be numeric or UUID format\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 359,
        "code": "errors.push(\"Parameter '\" + key + \"' should be valid email format\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 370,
        "code": "// Handle other parameter types",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 373,
        "code": "errors.push(\"Parameter '\" + key + \"' must be a finite number\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 393,
        "code": "value: this.sanitizeSQLParameter(value),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 399,
        "code": "* Generate secure query with proper parameter binding",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 402,
        "code": "_generateSecureQuery: function(baseQuery, parameters, options) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 403,
        "code": "const parameterTypes = {};",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 406,
        "code": "// Replace named parameters with positional parameters for better security",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 407,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 408,
        "code": "const paramType = this._detectParameterType(value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 409,
        "code": "parameterTypes[key] = paramType;",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 418,
        "code": "parameterTypes: parameterTypes",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 423,
        "code": "* Detect parameter data type for proper binding",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 426,
        "code": "_detectParameterType: function(value) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 523,
        "code": "parameterCount: details.parameterCount,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 736,
        "code": "* Validate database connection parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 123,
        "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 464,
        "code": "* @param {string} operation - Operation type (query, execute, etc.)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 471,
        "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 581,
        "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      }
    ],
    "databaseSecurity": [
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 500,
        "code": "* @description Initializes secure WebSocket connection for real-time updates.",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 521,
        "code": "var sMessage = oBundle.getText(\"msg.websocketDisconnected\") || \"Connection lost. Reconnecting...\";",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 527,
        "code": "console.warn(\"WebSocket connection failed, falling back to polling\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 712,
        "code": "// Clean up WebSocket connections",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 718,
        "code": "// Clean up EventSource connections",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 736,
        "code": "* Validate database connection parameters",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 737,
        "code": "* @param {object} connection - Connection configuration",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 740,
        "code": "validateConnection: function(connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 743,
        "code": "if (!connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 746,
        "code": "errors: [\"Connection configuration is required\"]",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 753,
        "code": "if (!connection[field]) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 758,
        "code": "// Check for secure connection",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 759,
        "code": "if (connection.host && !connection.ssl && !connection.host.includes('localhost')) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 760,
        "code": "errors.push(\"SSL/TLS encryption should be enabled for external connections\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 764,
        "code": "if (connection.password && connection.password.length < 8) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 769,
        "code": "if (connection.host) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 771,
        "code": "if (!hostPattern.test(connection.host)) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 783,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 785,
        "code": "* @param {object} options - Connection options",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 802,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      }
    ],
    "queryValidation": [
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 86,
        "code": "this._executeComplianceChecks(aSelectedContexts);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 240,
        "code": "* @function _executeComplianceChecks",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 241,
        "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 245,
        "code": "_executeComplianceChecks: function(aSelectedContexts) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 86,
        "code": "this._executeComplianceChecks(aSelectedContexts);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 240,
        "code": "* @function _executeComplianceChecks",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 241,
        "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 245,
        "code": "_executeComplianceChecks: function(aSelectedContexts) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 3,
        "code": "\"a2a/network/agent11/ext/utils/SQLSecurityModule\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 7,
        "code": "], function (Controller, SQLSecurityModule, SecurityUtils, MessageBox, Log) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 11,
        "code": "* Secure SQL Controller - All SQL operations must use this controller",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 12,
        "code": "* Prevents SQL injection through mandatory parameterized queries",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 14,
        "code": "return Controller.extend(\"a2a.network.agent11.ext.controller.SecureSQLController\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 20,
        "code": "this._sqlSecurity = SQLSecurityModule;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 33,
        "code": "if (!this._securityUtils.hasRole(\"SQLUser\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 34,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"SELECT\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 35,
        "code": "reject(new Error(\"Access denied: SQL query requires SQLUser role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 46,
        "code": "const parameterizedQuery = this._sqlSecurity.buildSelectQuery(queryOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 49,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 76,
        "code": "if (!this._securityUtils.hasRole(\"SQLWriter\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 77,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"INSERT\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 78,
        "code": "reject(new Error(\"Access denied: SQL insert requires SQLWriter role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 89,
        "code": "const parameterizedQuery = this._sqlSecurity.buildInsertQuery(insertOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 92,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 119,
        "code": "if (!this._securityUtils.hasRole(\"SQLWriter\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 120,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"UPDATE\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 121,
        "code": "reject(new Error(\"Access denied: SQL update requires SQLWriter role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 132,
        "code": "const parameterizedQuery = this._sqlSecurity.buildUpdateQuery(updateOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 135,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 162,
        "code": "if (!this._securityUtils.hasRole(\"SQLAdmin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 163,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"DELETE\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 164,
        "code": "reject(new Error(\"Access denied: SQL delete requires SQLAdmin role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 180,
        "code": "const parameterizedQuery = this._sqlSecurity.buildDeleteQuery(deleteOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 183,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 207,
        "code": "* Translate natural language to SQL (secure)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 209,
        "code": "* @returns {Promise} SQL query options",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 211,
        "code": "translateToSQL: function(naturalLanguage) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 215,
        "code": "if (!this._securityUtils.hasRole(\"SQLUser\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 216,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"TRANSLATE\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 217,
        "code": "reject(new Error(\"Access denied: SQL translation requires SQLUser role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 236,
        "code": "this._securityUtils.auditLog(\"SQL_TRANSLATE\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 256,
        "code": "// For now, we'll use the mock from SQLSecurityModule",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 25,
        "code": "* Execute a SELECT query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 29,
        "code": "executeSelect: function(queryOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 55,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 68,
        "code": "* Execute an INSERT query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 72,
        "code": "executeInsert: function(insertOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 98,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 111,
        "code": "* Execute an UPDATE query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 115,
        "code": "executeUpdate: function(updateOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 141,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 154,
        "code": "* Execute a DELETE query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 158,
        "code": "executeDelete: function(deleteOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 189,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 25,
        "code": "* Execute a SELECT query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 29,
        "code": "executeSelect: function(queryOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 55,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 68,
        "code": "* Execute an INSERT query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 72,
        "code": "executeInsert: function(insertOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 98,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 111,
        "code": "* Execute an UPDATE query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 115,
        "code": "executeUpdate: function(updateOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 141,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 154,
        "code": "* Execute a DELETE query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 158,
        "code": "executeDelete: function(deleteOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 189,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 7,
        "code": "* SQL Security Module - Prevents SQL injection through parameterized queries",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 8,
        "code": "* All SQL operations must go through this module",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 13,
        "code": "* @param {string} template - SQL template with ? placeholders",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 19,
        "code": "throw new Error(\"SQL template must be a non-empty string\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 58,
        "code": "// Remove any SQL meta-characters that could break out of parameterization",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 84,
        "code": "* Validate SQL identifier (table/column name)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 98,
        "code": "// Check against SQL reserved words",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 272,
        "code": "* Validate SQL operator",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 99,
        "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 320,
        "code": "message: \"Query executed successfully\"",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 99,
        "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 320,
        "code": "message: \"Query executed successfully\"",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 10,
        "code": "* Comprehensive SQL query validation with enhanced security",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 11,
        "code": "* @param {string} sql - The SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 12,
        "code": "* @param {string} dialect - The SQL dialect (HANA, POSTGRESQL, etc.)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 16,
        "code": "validateSQL: function (sql, dialect, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 20,
        "code": "const securityValidation = SecurityUtils.validateSQL(sql, options.parameters, {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 42,
        "code": "const sanitizedSQL = securityValidation.sanitized;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 45,
        "code": "const syntaxIssues = this._checkEnhancedSyntax(sanitizedSQL, dialect, options);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 54,
        "code": "const performanceSuggestions = this._getEnhancedPerformanceSuggestions(sanitizedSQL, dialect);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 58,
        "code": "const complexityValidation = SecurityUtils.validateQueryComplexity(sanitizedSQL, options.complexityLimits);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 77,
        "code": "sanitized: sanitizedSQL,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 83,
        "code": "queryHash: this._generateQueryFingerprint(sanitizedSQL)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 88,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 89,
        "code": "* @param {string} sql - The SQL to sanitize",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "* @returns {string} Sanitized SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 92,
        "code": "sanitizeSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 93,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 96,
        "code": "const validation = SecurityUtils.validateSQL(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 104,
        "code": "_checkSecurityVulnerabilities: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 106,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 108,
        "code": "// Check for SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 119,
        "code": "if (pattern.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 120,
        "code": "issues.push(\"Potential SQL injection pattern detected\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 128,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 138,
        "code": "* Basic SQL syntax validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 141,
        "code": "_checkBasicSyntax: function (sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 144,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 147,
        "code": "const openParens = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 148,
        "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 150,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 154,
        "code": "if (lowerSQL.includes('select') && !lowerSQL.includes('from') &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 155,
        "code": "!lowerSQL.includes('dual') && dialect !== 'HANA') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 160,
        "code": "if ((lowerSQL.includes('update') || lowerSQL.includes('delete')) &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 161,
        "code": "!lowerSQL.includes('where')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 172,
        "code": "_getPerformanceSuggestions: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 174,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 177,
        "code": "if (lowerSQL.includes('select *')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 186,
        "code": "if (lowerSQL.includes('like \\'%')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 195,
        "code": "if (/where\\s+\\w+\\s*\\(/i.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 207,
        "code": "* Format SQL query for better readability",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 208,
        "code": "* @param {string} sql - The SQL to format",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 209,
        "code": "* @returns {string} Formatted SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 211,
        "code": "formatSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 212,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 214,
        "code": "// Basic SQL formatting",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 215,
        "code": "let formatted = sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 246,
        "code": "* Extract table names from SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 247,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 250,
        "code": "extractTableNames: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 251,
        "code": "if (!sql) return [];",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 254,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 257,
        "code": "const fromMatches = sql.match(/from\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 269,
        "code": "const joinMatches = sql.match(/join\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 322,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 372,
        "code": "* Estimate query complexity based on SQL structure",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 373,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 376,
        "code": "estimateComplexity: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 377,
        "code": "if (!sql) return { level: 'Unknown', score: 0, factors: [] };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 379,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 384,
        "code": "const tables = this.extractTableNames(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 391,
        "code": "const joinCount = (sql.match(/join/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 398,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 406,
        "code": "const includesAggregation = (agg) => lowerSQL.includes(agg);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 414,
        "code": "if (lowerSQL.includes('over(') || lowerSQL.includes('partition by')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 439,
        "code": "* Generate SQL from common patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 441,
        "code": "* @returns {string} Generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 443,
        "code": "generateSQLFromPattern: function (pattern) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 444,
        "code": "// Sanitize all pattern components before SQL generation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 446,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 447,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 448,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 449,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 450,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 451,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 454,
        "code": "let generatedSQL = \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 458,
        "code": "generatedSQL = \"SELECT * FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 462,
        "code": "generatedSQL = \"SELECT ? FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 466,
        "code": "generatedSQL = \"SELECT COUNT(*) FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 470,
        "code": "generatedSQL = \"INSERT INTO ? (?) VALUES (?)\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 474,
        "code": "generatedSQL = \"UPDATE ? SET ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 478,
        "code": "generatedSQL = \"DELETE FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 485,
        "code": "// Validate the generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 486,
        "code": "const validation = SecurityUtils.validateSQL(generatedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 488,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 496,
        "code": "* Get SQL dialect-specific syntax information",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 497,
        "code": "* @param {string} dialect - The SQL dialect",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 504,
        "code": "features: ['Column store', 'In-memory processing', 'SQL Script'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 509,
        "code": "'POSTGRESQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 510,
        "code": "name: 'PostgreSQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 516,
        "code": "'MYSQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 517,
        "code": "name: 'MySQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 523,
        "code": "'SQLITE': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 524,
        "code": "name: 'SQLite',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 532,
        "code": "features: ['Advanced analytics', 'Partitioning', 'PL/SQL'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 537,
        "code": "'SQLSERVER': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 538,
        "code": "name: 'Microsoft SQL Server',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 539,
        "code": "features: ['T-SQL', 'Columnstore indexes', 'In-memory OLTP'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 559,
        "code": "_checkEnhancedSyntax: function(sql, dialect, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 562,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 565,
        "code": "const openParens = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 566,
        "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 568,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 572,
        "code": "const singleQuotes = (sql.match(/'/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 573,
        "code": "const doubleQuotes = (sql.match(/\"/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 575,
        "code": "errors.push(\"Unmatched single quotes in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 578,
        "code": "errors.push(\"Unmatched double quotes in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 583,
        "code": "if (lowerSQL.includes('dual') && !lowerSQL.includes('sys.dual')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 586,
        "code": "} else if (dialect === 'POSTGRESQL') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 587,
        "code": "if (lowerSQL.includes('limit') && lowerSQL.includes('top')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 588,
        "code": "errors.push(\"PostgreSQL uses LIMIT, not TOP\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 590,
        "code": "} else if (dialect === 'SQLSERVER') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 591,
        "code": "if (lowerSQL.includes('limit') && !lowerSQL.includes('top')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 592,
        "code": "errors.push(\"SQL Server uses TOP, not LIMIT\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 597,
        "code": "if (lowerSQL.includes('truncate table')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 601,
        "code": "if (lowerSQL.includes('with recursive') && dialect !== 'POSTGRESQL') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 612,
        "code": "_getEnhancedPerformanceSuggestions: function(sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 614,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 617,
        "code": "if (lowerSQL.includes('select *')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 627,
        "code": "if (lowerSQL.includes(\"like '%\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 637,
        "code": "if (/where\\s+\\w*\\s*\\(/i.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 647,
        "code": "if ((sql.match(/\\bor\\b/gi) || []).length > 2) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 657,
        "code": "if (lowerSQL.includes('in (select') && !lowerSQL.includes('exists')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 668,
        "code": "if (lowerSQL.includes('group by') && !lowerSQL.includes('order by')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 685,
        "code": "_generateQueryFingerprint: function(sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 686,
        "code": "// Normalize SQL for fingerprinting",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 687,
        "code": "const normalized = sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 726,
        "code": "value: SecurityUtils.sanitizeSQLParameter(tableName),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 749,
        "code": "value: SecurityUtils.sanitizeSQLParameter(columnName),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 774,
        "code": "* Generate secure SQL templates based on intent and entities",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 777,
        "code": "_generateSecureSQLTemplates: function(intent, entities, context) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 794,
        "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 802,
        "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 812,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 820,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 834,
        "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 848,
        "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 887,
        "code": "* Sanitize pattern for SQL generation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 901,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type || ''),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 902,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table || ''),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 903,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 904,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 905,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 906,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 925,
        "code": "* Generate secure SQL template",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 126,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 126,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 57,
        "code": "Log.info(\"Secure SQL function call successful\", sFunctionName);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 78,
        "code": "* Advanced SQL injection prevention and validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 79,
        "code": "* @param {string} sql - SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 84,
        "code": "validateSQL: function(sql, params, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 87,
        "code": "if (!sql || typeof sql !== 'string') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 91,
        "code": "errors: [\"SQL query must be a non-empty string\"],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 99,
        "code": "let sanitized = sql.trim();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 116,
        "code": "// Dangerous SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 152,
        "code": "{ pattern: /--[^\\r\\n]*/gi, penalty: 20, message: \"SQL comment detected\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 164,
        "code": "{ pattern: /mysql\\./gi, penalty: 25, message: \"MySQL system database access\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 165,
        "code": "{ pattern: /pg_catalog/gi, penalty: 25, message: \"PostgreSQL catalog access\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 173,
        "code": "{ pattern: /pg_sleep\\s*\\(/gi, penalty: 35, message: \"PostgreSQL sleep detected\" }",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 210,
        "code": "warnings.push(\"SQL contains string literals - consider using parameterized queries\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 241,
        "code": "original: sql,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 244,
        "code": "detectedPatterns: criticalPatterns.filter(p => p.pattern.test(sql)).map(p => p.message)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 249,
        "code": "* Sanitize SQL parameters",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 253,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 259,
        "code": ".replace(/--/g, '') // Remove SQL comments",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 270,
        "code": "* @param {string} baseQuery - Base SQL query with placeholders",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 278,
        "code": "const validation = this.validateSQL(baseQuery, parameters, {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 302,
        "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 393,
        "code": "value: this.sanitizeSQLParameter(value),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 462,
        "code": "* Rate limiting for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 505,
        "code": "* Audit logging for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 534,
        "code": "Log.info(\"SQL Audit Log\", JSON.stringify(auditEntry));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 711,
        "code": "const auditLog = JSON.parse(sessionStorage.getItem('sqlAuditLog')) || [];",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 719,
        "code": "sessionStorage.setItem('sqlAuditLog', JSON.stringify(auditLog));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 783,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 802,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 806,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 811,
        "code": "// Validate incoming SQL data",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 814,
        "code": "// Additional validation for SQL-related messages",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 815,
        "code": "if (data.type && data.type.includes('SQL') || data.type.includes('QUERY')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 816,
        "code": "const validation = this.validateSQL(data.sql || '');",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 818,
        "code": "Log.warning(\"Invalid SQL received via WebSocket\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 835,
        "code": "* Create secure EventSource for SQL monitoring",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 861,
        "code": "// SQL-specific validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 862,
        "code": "if (data.sql || data.query) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 863,
        "code": "const validation = this.validateSQL(data.sql || data.query);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 865,
        "code": "Log.warning(\"Invalid SQL received via EventSource\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 887,
        "code": "* Check user authorization for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 892,
        "code": "checkSQLAuth: function(operation, resource) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 894,
        "code": "// SQL-specific authorization checks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 919,
        "code": "* Sanitize SQL query result for display",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 923,
        "code": "sanitizeSQLResult: function(result) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 937,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 946,
        "code": "return result.map(item => this.sanitizeSQLResult(item));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 954,
        "code": "* @param {string} sql - SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 958,
        "code": "validateQueryComplexity: function(sql, limits) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 970,
        "code": "if (!sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 971,
        "code": "return { isValid: false, reason: \"No SQL provided\", complexity: 0, score: 0 };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 974,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 981,
        "code": "if (sql.length > limits.maxQueryLength) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 998,
        "code": "const matches = (sql.match(pattern) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1014,
        "code": "for (let char of sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1020,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1035,
        "code": "const unionCount = (sql.match(/\\bunion\\b/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1036,
        "code": "const unionAllCount = (sql.match(/\\bunion\\s+all\\b/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1049,
        "code": "while ((match = tablePattern.exec(sql)) !== null) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1065,
        "code": "const hasWhere = /\\bwhere\\b/gi.test(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1088,
        "code": "const matches = (sql.match(pattern) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1096,
        "code": "if (!limits.allowRecursiveCTE && /\\bwith\\s+recursive\\b/gi.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1114,
        "code": "if (pattern.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 123,
        "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 464,
        "code": "* @param {string} operation - Operation type (query, execute, etc.)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 471,
        "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 581,
        "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 123,
        "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 464,
        "code": "* @param {string} operation - Operation type (query, execute, etc.)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 471,
        "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 581,
        "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "xss": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 7,
        "code": "], function (Controller, SQLSecurityModule, SecurityUtils, MessageBox, Log) {",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 35,
        "code": "reject(new Error(\"Access denied: SQL query requires SQLUser role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 78,
        "code": "reject(new Error(\"Access denied: SQL insert requires SQLWriter role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 121,
        "code": "reject(new Error(\"Access denied: SQL update requires SQLWriter role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 164,
        "code": "reject(new Error(\"Access denied: SQL delete requires SQLAdmin role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 217,
        "code": "reject(new Error(\"Access denied: SQL translation requires SQLUser role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 19,
        "code": "throw new Error(\"SQL template must be a non-empty string\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 150,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 488,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 568,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 575,
        "code": "errors.push(\"Unmatched single quotes in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 578,
        "code": "errors.push(\"Unmatched double quotes in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 588,
        "code": "errors.push(\"PostgreSQL uses LIMIT, not TOP\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 592,
        "code": "errors.push(\"SQL Server uses TOP, not LIMIT\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 91,
        "code": "errors: [\"SQL query must be a non-empty string\"],",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 164,
        "code": "{ pattern: /mysql\\./gi, penalty: 25, message: \"MySQL system database access\" },",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 244,
        "code": "detectedPatterns: criticalPatterns.filter(p => p.pattern.test(sql)).map(p => p.message)",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 806,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 814,
        "code": "// Additional validation for SQL-related messages",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      }
    ],
    "dataExposure": [
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 52,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 95,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 138,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 186,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 297,
        "code": "_buildQueryOptionsFromParsed: function(parsed) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 218,
        "code": "<!-- Connection String -->",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 219,
        "code": "<Label text=\"{i18n>field.connectionString}\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 220,
        "code": "<Input id=\"connectionStringInput\" value=\"{create>/connectionString}\" placeholder=\"{i18n>placeholder.connectionString}\" type=\"Password\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 115,
        "code": "<Label text=\"{i18n>sqlQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 18,
        "code": "<IconTabFilter text=\"{i18n>originalQuery}\" icon=\"sap-icon://document\" iconColor=\"Neutral\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 107,
        "code": "<IconTabFilter text=\"{i18n>optimizedQuery}\" icon=\"sap-icon://accelerated\" iconColor=\"Positive\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 112,
        "code": "<Label text=\"{i18n>improvedQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 30,
        "code": "text=\"{= ${i18n>queryFailed} + ': ' + ${/errorMessage} }\"",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "manifest.json",
        "line": 53,
        "code": "\"pattern\": \":?query:\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "manifest.json",
        "line": 99,
        "code": "\"pattern\": \"ComplianceTasks({key}):?query:\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 17,
        "code": "createParameterizedQuery: function(template, parameters) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 112,
        "code": "buildSelectQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 154,
        "code": "buildInsertQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 182,
        "code": "buildUpdateQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 217,
        "code": "buildDeleteQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 290,
        "code": "_generateQueryHash: function(query) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 83,
        "code": "queryHash: this._generateQueryFingerprint(sanitizedSQL)",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 685,
        "code": "_generateQueryFingerprint: function(sql) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "unencryptedStorage",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 495,
        "code": "sessionStorage.setItem(key, JSON.stringify(rateLimitData));",
        "message": "Security issue: dataExposure - unencryptedStorage",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "unencryptedStorage",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 719,
        "code": "sessionStorage.setItem('sqlAuditLog', JSON.stringify(auditLog));",
        "message": "Security issue: dataExposure - unencryptedStorage",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 275,
        "code": "createParameterizedQuery: function(baseQuery, parameters, options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 289,
        "code": "query: null,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 316,
        "code": "query: secureQuery.query,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 322,
        "code": "queryHash: this._generateQueryHash(secureQuery.query),",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 402,
        "code": "_generateSecureQuery: function(baseQuery, parameters, options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 413,
        "code": "processedQuery = processedQuery.replace(new RegExp(\":\" + key + \"\\\\b\", 'g'), placeholder);",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 417,
        "code": "query: processedQuery,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 450,
        "code": "_generateQueryHash: function(query) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 470,
        "code": "query: { maxRequests: 100, window: 3600000 }, // 100 queries per hour",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 517,
        "code": "queryHash: details.queryHash,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 518,
        "code": "queryType: details.queryType,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 545,
        "code": "validateNaturalLanguageQuery: function(naturalQuery) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 958,
        "code": "validateQueryComplexity: function(sql, limits) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 965,
        "code": "maxQueryLength: 10000,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 971,
        "code": "return { isValid: false, reason: \"No SQL provided\", complexity: 0, score: 0 };",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 1026,
        "code": "issues.push(\"Too many subqueries (\" + subqueryCount + \", limit: \" + limits.maxSubqueries + \")\");",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "sqlInjection": [
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 235,
        "code": "text=\"{= ${/validation/isValid} ? ${i18n>sqlIsValid} : ${i18n>sqlHasErrors} }\"",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 24,
        "code": "text=\"{= ${i18n>queryExecutedSuccessfully} + ' ' + ${/resultCount} + ' ' + ${i18n>rowsReturned} }\"",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 31,
        "code": "throw new Error(\"Parameter count mismatch: expected \" + placeholderCount + \", got \" + parameters.length);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 119,
        "code": "let query = 'SELECT ' + columns.join(', ') + ' FROM ' + table;",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 172,
        "code": "const query = 'INSERT INTO ' + table + ' (' + columns.join(', ') + ') VALUES (' + placeholders.join(', ') + ')';",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 200,
        "code": "let query = 'UPDATE ' + table + ' SET ' + setClauses.join(', ');",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 250,
        "code": "clauses.push(validColumn + ' IN (' + placeholders + ')');",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 258,
        "code": "clauses.push(validColumn + ' ' + op + ' ?');",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 129,
        "code": "issues.push(\"Dangerous function '\" + func + \"' detected\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 794,
        "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 802,
        "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 820,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 834,
        "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 848,
        "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 387,
        "code": "factors.push(`${tables.length} tables involved`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 394,
        "code": "factors.push(`${joinCount} JOIN operations`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 401,
        "code": "factors.push(`${subqueryCount} nested expressions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 410,
        "code": "factors.push(`${aggCount} aggregation functions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 832,
        "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 846,
        "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeParameterUsage",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 844,
        "code": "const createSetClause = function(col) { return col + \" = ?\"; };",
        "message": "SQL parameters concatenated directly",
        "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 198,
        "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 231,
        "code": "errors.push(\"Operation '\" + firstWord + \"' is not allowed in this context\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 337,
        "code": "errors.push(\"Parameter '\" + key + \"' exceeds maximum length\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 352,
        "code": "errors.push(\"Parameter '\" + key + \"' should be numeric or UUID format\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 359,
        "code": "errors.push(\"Parameter '\" + key + \"' should be valid email format\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 373,
        "code": "errors.push(\"Parameter '\" + key + \"' must be a finite number\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 413,
        "code": "processedQuery = processedQuery.replace(new RegExp(\":\" + key + \"\\\\b\", 'g'), placeholder);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "const key = \"rateLimit_\" + userId + \"_\" + operation;",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 498,
        "code": "Log.warning(\"Rate limit exceeded for user \" + userId + \" operation \" + operation);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1005,
        "code": "issues.push(\"Too many joins (\" + totalJoins + \", limit: \" + limits.maxJoins + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1026,
        "code": "issues.push(\"Too many subqueries (\" + subqueryCount + \", limit: \" + limits.maxSubqueries + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1030,
        "code": "issues.push(\"Query nesting too deep (\" + maxDepth + \" levels)\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1042,
        "code": "issues.push(\"Too many UNION operations (\" + unionCount + \", limit: \" + limits.maxUnions + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1058,
        "code": "issues.push(\"Too many tables referenced (\" + tableCount + \", limit: \" + limits.maxTables + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeParameterUsage",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "SQL parameters concatenated directly",
        "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeParameterUsage",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1166,
        "code": "baseTime *= (1 + complexity / 50);",
        "message": "SQL parameters concatenated directly",
        "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
      }
    ],
    "validation": [
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 131,
        "code": "<!-- SQL Statement Tab -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 136,
        "code": "<!-- SQL Statement Editor -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 137,
        "code": "<Label text=\"{i18n>field.sqlStatement}\" required=\"true\" class=\"sapUiSmallMarginBottom\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 143,
        "code": "value=\"{create>/sqlStatement}\"",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 145,
        "code": "change=\".onSQLStatementChange\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 291,
        "code": "<Text text=\"{i18n>field.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 313,
        "code": "<Input value=\"{parameterValue}\" placeholder=\"{i18n>placeholder.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 38,
        "code": "id=\"queryNameInput\"",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 222,
        "code": "<!-- Schema Name -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 223,
        "code": "<Label text=\"{i18n>field.schemaName}\"/>",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 225,
        "code": "<!-- Schema options will be loaded dynamically -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 97,
        "code": "<Label text=\"{i18n>includeSchemaInfo}:\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 98,
        "code": "<CheckBox selected=\"{/includeSchemaInfo}\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 95,
        "code": "<!-- Dynamic columns will be created based on result schema -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 47,
        "code": "* Sanitize a single parameter value",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 48,
        "code": "* @param {any} value - Parameter value to sanitize",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 51,
        "code": "sanitizeParameter: function(value) {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 69,
        "code": "throw new Error(\"Invalid number parameter: \" + value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 79,
        "code": "return this.sanitizeParameter(String(value));",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 251,
        "code": "parameters.push(...value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 259,
        "code": "parameters.push(value.value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 264,
        "code": "parameters.push(value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 93,
        "code": "// Only allow alphanumeric, underscore, and dot (for schema.table)",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 450,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 804,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 822,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 832,
        "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 846,
        "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 905,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 88,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 198,
        "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 301,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 302,
        "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 393,
        "code": "value: this.sanitizeSQLParameter(value),",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 407,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 408,
        "code": "const paramType = this._detectParameterType(value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 426,
        "code": "_detectParameterType: function(value) {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 118,
        "code": "{ pattern: /;\\s*drop\\s+(table|database|schema)/gi, penalty: 50, message: \"DROP statement injection\" },",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 162,
        "code": "{ pattern: /information_schema/gi, penalty: 30, message: \"Information schema access\" },",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      }
    ],
    "csrf": [
      {
        "type": "csrf",
        "subtype": "missingCSRFToken",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 72,
        "code": "oModel.callFunction(sFunctionName, secureParams);",
        "message": "Missing CSRF token in SQL operation",
        "fix": "Add CSRF token to all SQL operation requests"
      }
    ],
    "compliance": [
      {
        "type": "compliance",
        "message": "Missing crossNavigation in manifest.json",
        "severity": "MEDIUM"
      }
    ]
  },
  "byFile": {
    "controller/ListReportExt.controller.js": [
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 60,
        "code": "* @function onRunCompliance",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 507,
        "code": "if (!this._securityUtils.validateWebSocketUrl('ws://localhost:8011/compliance/updates')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 513,
        "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/compliance/updates', {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 108,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 132,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 250,
        "code": ".then(function(oProgressDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 597,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 306,
        "code": "this._complianceEventSource = new EventSource('/api/agent11/compliance/progress-stream');",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 75,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectTasksFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 82,
        "code": "this.getResourceBundle().getText(\"msg.runComplianceConfirm\", [aSelectedContexts.length]),",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 281,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.complianceCheckStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 286,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.complianceCheckFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 406,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.complianceCheckCompleted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 521,
        "code": "var sMessage = oBundle.getText(\"msg.websocketDisconnected\") || \"Connection lost. Reconnecting...\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 555,
        "code": "var sStartMsg = oBundle.getText(\"msg.complianceStarted\") || \"Compliance check started\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 559,
        "code": "var sCompleteMsg = oBundle.getText(\"msg.complianceCompleted\") || \"Compliance check completed\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 564,
        "code": "var sErrorMsg = oBundle.getText(\"error.complianceFailed\") || \"Compliance check failed\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 569,
        "code": "var sRuleMsg = oBundle.getText(\"msg.ruleUpdated\") || \"Compliance rule updated\";",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 18,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ListReportExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 565,
        "code": "var safeError = SecurityUtils.escapeHTML(data.error || 'Unknown error');",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 277,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 356,
        "code": "urlParameters: { taskIds: aTaskIds.join(',') },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 86,
        "code": "this._executeComplianceChecks(aSelectedContexts);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 240,
        "code": "* @function _executeComplianceChecks",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 241,
        "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 245,
        "code": "_executeComplianceChecks: function(aSelectedContexts) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 500,
        "code": "* @description Initializes secure WebSocket connection for real-time updates.",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 521,
        "code": "var sMessage = oBundle.getText(\"msg.websocketDisconnected\") || \"Connection lost. Reconnecting...\";",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 527,
        "code": "console.warn(\"WebSocket connection failed, falling back to polling\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 712,
        "code": "// Clean up WebSocket connections",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 718,
        "code": "// Clean up EventSource connections",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 86,
        "code": "this._executeComplianceChecks(aSelectedContexts);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 240,
        "code": "* @function _executeComplianceChecks",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 241,
        "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 245,
        "code": "_executeComplianceChecks: function(aSelectedContexts) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 86,
        "code": "this._executeComplianceChecks(aSelectedContexts);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 240,
        "code": "* @function _executeComplianceChecks",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 241,
        "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 245,
        "code": "_executeComplianceChecks: function(aSelectedContexts) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "controller/ObjectPageExt.controller.js": [
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 55,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 96,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 141,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 202,
        "code": ".then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 381,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 191,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.noViolationsToReview\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 11,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ObjectPageExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 239,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 274,
        "code": "urlParameters: { taskId: oScheduleData.taskId },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 305,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      }
    ],
    "controller/SecureSQLController.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 7,
        "code": "], function (Controller, SQLSecurityModule, SecurityUtils, MessageBox, Log) {",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 35,
        "code": "reject(new Error(\"Access denied: SQL query requires SQLUser role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 78,
        "code": "reject(new Error(\"Access denied: SQL insert requires SQLWriter role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 121,
        "code": "reject(new Error(\"Access denied: SQL update requires SQLWriter role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 164,
        "code": "reject(new Error(\"Access denied: SQL delete requires SQLAdmin role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 217,
        "code": "reject(new Error(\"Access denied: SQL translation requires SQLUser role\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 57,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 100,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 143,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 191,
        "code": ".then(resolve)",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 52,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 95,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 138,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 186,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 297,
        "code": "_buildQueryOptionsFromParsed: function(parsed) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/SecureSQLController.js",
        "line": 222,
        "code": "const sanitized = this._securityUtils.escapeHTML(naturalLanguage);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 12,
        "code": "* Prevents SQL injection through mandatory parameterized queries",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 45,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 46,
        "code": "const parameterizedQuery = this._sqlSecurity.buildSelectQuery(queryOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 52,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 88,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 89,
        "code": "const parameterizedQuery = this._sqlSecurity.buildInsertQuery(insertOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 95,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 131,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 132,
        "code": "const parameterizedQuery = this._sqlSecurity.buildUpdateQuery(updateOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 138,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 179,
        "code": "// Build secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 180,
        "code": "const parameterizedQuery = this._sqlSecurity.buildDeleteQuery(deleteOptions);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 186,
        "code": "queryHash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 25,
        "code": "* Execute a SELECT query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 29,
        "code": "executeSelect: function(queryOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 55,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 68,
        "code": "* Execute an INSERT query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 72,
        "code": "executeInsert: function(insertOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 98,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 111,
        "code": "* Execute an UPDATE query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 115,
        "code": "executeUpdate: function(updateOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 141,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 154,
        "code": "* Execute a DELETE query safely",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 158,
        "code": "executeDelete: function(deleteOptions) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 189,
        "code": "// Execute through secure channel",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 3,
        "code": "\"a2a/network/agent11/ext/utils/SQLSecurityModule\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 7,
        "code": "], function (Controller, SQLSecurityModule, SecurityUtils, MessageBox, Log) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 11,
        "code": "* Secure SQL Controller - All SQL operations must use this controller",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 12,
        "code": "* Prevents SQL injection through mandatory parameterized queries",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 14,
        "code": "return Controller.extend(\"a2a.network.agent11.ext.controller.SecureSQLController\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 20,
        "code": "this._sqlSecurity = SQLSecurityModule;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 33,
        "code": "if (!this._securityUtils.hasRole(\"SQLUser\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 34,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"SELECT\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 35,
        "code": "reject(new Error(\"Access denied: SQL query requires SQLUser role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 46,
        "code": "const parameterizedQuery = this._sqlSecurity.buildSelectQuery(queryOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 49,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 76,
        "code": "if (!this._securityUtils.hasRole(\"SQLWriter\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 77,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"INSERT\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 78,
        "code": "reject(new Error(\"Access denied: SQL insert requires SQLWriter role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 89,
        "code": "const parameterizedQuery = this._sqlSecurity.buildInsertQuery(insertOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 92,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 119,
        "code": "if (!this._securityUtils.hasRole(\"SQLWriter\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 120,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"UPDATE\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 121,
        "code": "reject(new Error(\"Access denied: SQL update requires SQLWriter role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 132,
        "code": "const parameterizedQuery = this._sqlSecurity.buildUpdateQuery(updateOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 135,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 162,
        "code": "if (!this._securityUtils.hasRole(\"SQLAdmin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 163,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"DELETE\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 164,
        "code": "reject(new Error(\"Access denied: SQL delete requires SQLAdmin role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 180,
        "code": "const parameterizedQuery = this._sqlSecurity.buildDeleteQuery(deleteOptions);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 183,
        "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 207,
        "code": "* Translate natural language to SQL (secure)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 209,
        "code": "* @returns {Promise} SQL query options",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 211,
        "code": "translateToSQL: function(naturalLanguage) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 215,
        "code": "if (!this._securityUtils.hasRole(\"SQLUser\") && !this._securityUtils.hasRole(\"Admin\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 216,
        "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"TRANSLATE\" });",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 217,
        "code": "reject(new Error(\"Access denied: SQL translation requires SQLUser role\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 236,
        "code": "this._securityUtils.auditLog(\"SQL_TRANSLATE\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 256,
        "code": "// For now, we'll use the mock from SQLSecurityModule",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 25,
        "code": "* Execute a SELECT query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 29,
        "code": "executeSelect: function(queryOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 55,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 68,
        "code": "* Execute an INSERT query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 72,
        "code": "executeInsert: function(insertOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 98,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 111,
        "code": "* Execute an UPDATE query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 115,
        "code": "executeUpdate: function(updateOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 141,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 154,
        "code": "* Execute a DELETE query safely",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 158,
        "code": "executeDelete: function(deleteOptions) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 189,
        "code": "// Execute through secure channel",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 25,
        "code": "* Execute a SELECT query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 29,
        "code": "executeSelect: function(queryOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 55,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 56,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 68,
        "code": "* Execute an INSERT query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 72,
        "code": "executeInsert: function(insertOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 98,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 99,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 111,
        "code": "* Execute an UPDATE query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 115,
        "code": "executeUpdate: function(updateOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 141,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 142,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 154,
        "code": "* Execute a DELETE query safely",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 158,
        "code": "executeDelete: function(deleteOptions) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 189,
        "code": "// Execute through secure channel",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 190,
        "code": "this._executeSecureQuery(parameterizedQuery)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 251,
        "code": "* Execute a secure parameterized query",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 254,
        "code": "_executeSecureQuery: function(parameterizedQuery) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/SecureSQLController.js",
        "line": 257,
        "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "fragment/CreateSQLQuery.fragment.xml": [
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 26,
        "code": "<IconTabFilter text=\"{i18n>tab.basicInfo}\" key=\"basic\" icon=\"sap-icon://detail-view\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 61,
        "code": "selectedKey=\"{create>/queryType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 67,
        "code": "<core:Item key=\"select\" text=\"{i18n>query.select}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 68,
        "code": "<core:Item key=\"insert\" text=\"{i18n>query.insert}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 69,
        "code": "<core:Item key=\"update\" text=\"{i18n>query.update}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 70,
        "code": "<core:Item key=\"delete\" text=\"{i18n>query.delete}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"create\" text=\"{i18n>query.create}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"alter\" text=\"{i18n>query.alter}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"drop\" text=\"{i18n>query.drop}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"procedure\" text=\"{i18n>query.procedure}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 75,
        "code": "<core:Item key=\"function\" text=\"{i18n>query.function}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 76,
        "code": "<core:Item key=\"trigger\" text=\"{i18n>query.trigger}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 77,
        "code": "<core:Item key=\"view\" text=\"{i18n>query.view}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 78,
        "code": "<core:Item key=\"index\" text=\"{i18n>query.index}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 85,
        "code": "selectedKey=\"{create>/databaseType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 91,
        "code": "<core:Item key=\"mysql\" text=\"{i18n>db.mysql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 92,
        "code": "<core:Item key=\"postgresql\" text=\"{i18n>db.postgresql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 93,
        "code": "<core:Item key=\"oracle\" text=\"{i18n>db.oracle}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 94,
        "code": "<core:Item key=\"sqlserver\" text=\"{i18n>db.sqlserver}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 95,
        "code": "<core:Item key=\"sqlite\" text=\"{i18n>db.sqlite}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 96,
        "code": "<core:Item key=\"hana\" text=\"{i18n>db.hana}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 97,
        "code": "<core:Item key=\"db2\" text=\"{i18n>db.db2}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 98,
        "code": "<core:Item key=\"snowflake\" text=\"{i18n>db.snowflake}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 99,
        "code": "<core:Item key=\"bigquery\" text=\"{i18n>db.bigquery}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 106,
        "code": "selectedKey=\"{create>/priority}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 108,
        "code": "<SegmentedButtonItem key=\"low\" text=\"{i18n>priority.low}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 109,
        "code": "<SegmentedButtonItem key=\"medium\" text=\"{i18n>priority.medium}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 110,
        "code": "<SegmentedButtonItem key=\"high\" text=\"{i18n>priority.high}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 111,
        "code": "<SegmentedButtonItem key=\"critical\" text=\"{i18n>priority.critical}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 119,
        "code": "selectedKey=\"{create>/complexity}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 120,
        "code": "<core:Item key=\"simple\" text=\"{i18n>complexity.simple}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 121,
        "code": "<core:Item key=\"moderate\" text=\"{i18n>complexity.moderate}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 122,
        "code": "<core:Item key=\"complex\" text=\"{i18n>complexity.complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 123,
        "code": "<core:Item key=\"very_complex\" text=\"{i18n>complexity.very_complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 152,
        "code": "<ComboBox id=\"queryLanguageCombo\" selectedKey=\"{create>/queryLanguage}\" selectionChange=\".onQueryLanguageChange\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 153,
        "code": "<core:Item key=\"sql\" text=\"SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 154,
        "code": "<core:Item key=\"tsql\" text=\"T-SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 155,
        "code": "<core:Item key=\"plsql\" text=\"PL/SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 156,
        "code": "<core:Item key=\"mysql\" text=\"MySQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 157,
        "code": "<core:Item key=\"postgresql\" text=\"PostgreSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 158,
        "code": "<core:Item key=\"nosql\" text=\"NoSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 175,
        "code": "<ComboBox id=\"indexUsageCombo\" selectedKey=\"{create>/indexUsage}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 176,
        "code": "<core:Item key=\"auto\" text=\"{i18n>indexUsage.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 177,
        "code": "<core:Item key=\"force\" text=\"{i18n>indexUsage.force}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 178,
        "code": "<core:Item key=\"hint\" text=\"{i18n>indexUsage.hint}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 179,
        "code": "<core:Item key=\"none\" text=\"{i18n>indexUsage.none}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 209,
        "code": "<IconTabFilter text=\"{i18n>tab.databaseConfig}\" key=\"database\" icon=\"sap-icon://database\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 242,
        "code": "<ComboBox id=\"transactionModeCombo\" selectedKey=\"{create>/transactionMode}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 243,
        "code": "<core:Item key=\"auto\" text=\"{i18n>transaction.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 244,
        "code": "<core:Item key=\"manual\" text=\"{i18n>transaction.manual}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 245,
        "code": "<core:Item key=\"read_only\" text=\"{i18n>transaction.read_only}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 246,
        "code": "<core:Item key=\"read_write\" text=\"{i18n>transaction.read_write}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 251,
        "code": "<ComboBox id=\"isolationLevelCombo\" selectedKey=\"{create>/isolationLevel}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 252,
        "code": "<core:Item key=\"read_uncommitted\" text=\"{i18n>isolation.read_uncommitted}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 253,
        "code": "<core:Item key=\"read_committed\" text=\"{i18n>isolation.read_committed}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 254,
        "code": "<core:Item key=\"repeatable_read\" text=\"{i18n>isolation.repeatable_read}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 255,
        "code": "<core:Item key=\"serializable\" text=\"{i18n>isolation.serializable}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 268,
        "code": "<IconTabFilter text=\"{i18n>tab.parameters}\" key=\"parameters\" icon=\"sap-icon://list\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 308,
        "code": "<ComboBox selectedKey=\"{parameterType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 309,
        "code": "<core:Item key=\"input\" text=\"Input\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 310,
        "code": "<core:Item key=\"output\" text=\"Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 311,
        "code": "<core:Item key=\"inout\" text=\"Input/Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 314,
        "code": "<ComboBox selectedKey=\"{dataType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 315,
        "code": "<core:Item key=\"varchar\" text=\"VARCHAR\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 316,
        "code": "<core:Item key=\"int\" text=\"INTEGER\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 317,
        "code": "<core:Item key=\"decimal\" text=\"DECIMAL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 318,
        "code": "<core:Item key=\"date\" text=\"DATE\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 319,
        "code": "<core:Item key=\"datetime\" text=\"DATETIME\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 320,
        "code": "<core:Item key=\"boolean\" text=\"BOOLEAN\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 334,
        "code": "<IconTabFilter text=\"{i18n>tab.security}\" key=\"security\" icon=\"sap-icon://shield\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 355,
        "code": "<ComboBox id=\"dataClassificationCombo\" selectedKey=\"{create>/dataClassification}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 356,
        "code": "<core:Item key=\"public\" text=\"Public\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 357,
        "code": "<core:Item key=\"internal\" text=\"Internal\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 358,
        "code": "<core:Item key=\"confidential\" text=\"Confidential\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 359,
        "code": "<core:Item key=\"restricted\" text=\"Restricted\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 131,
        "code": "<!-- SQL Statement Tab -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 136,
        "code": "<!-- SQL Statement Editor -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 137,
        "code": "<Label text=\"{i18n>field.sqlStatement}\" required=\"true\" class=\"sapUiSmallMarginBottom\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 143,
        "code": "value=\"{create>/sqlStatement}\"",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 145,
        "code": "change=\".onSQLStatementChange\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 291,
        "code": "<Text text=\"{i18n>field.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 313,
        "code": "<Input value=\"{parameterValue}\" placeholder=\"{i18n>placeholder.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 38,
        "code": "id=\"queryNameInput\"",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 222,
        "code": "<!-- Schema Name -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 223,
        "code": "<Label text=\"{i18n>field.schemaName}\"/>",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 225,
        "code": "<!-- Schema options will be loaded dynamically -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 218,
        "code": "<!-- Connection String -->",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 219,
        "code": "<Label text=\"{i18n>field.connectionString}\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 220,
        "code": "<Input id=\"connectionStringInput\" value=\"{create>/connectionString}\" placeholder=\"{i18n>placeholder.connectionString}\" type=\"Password\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      }
    ],
    "fragment/NaturalLanguageTranslator.fragment.xml": [
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 235,
        "code": "text=\"{= ${/validation/isValid} ? ${i18n>sqlIsValid} : ${i18n>sqlHasErrors} }\"",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 68,
        "code": "selectedKey=\"{/selectedDatabase}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"main_db\" text=\"{i18n>mainDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"analytics_db\" text=\"{i18n>analyticsDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"reporting_db\" text=\"{i18n>reportingDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"archive_db\" text=\"{i18n>archiveDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 79,
        "code": "<Select selectedKey=\"{/sqlDialect}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 81,
        "code": "<core:Item key=\"HANA\" text=\"SAP HANA\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 82,
        "code": "<core:Item key=\"POSTGRESQL\" text=\"PostgreSQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 83,
        "code": "<core:Item key=\"MYSQL\" text=\"MySQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 84,
        "code": "<core:Item key=\"SQLITE\" text=\"SQLite\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 85,
        "code": "<core:Item key=\"ORACLE\" text=\"Oracle\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 86,
        "code": "<core:Item key=\"SQLSERVER\" text=\"SQL Server\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 97,
        "code": "<Label text=\"{i18n>includeSchemaInfo}:\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 98,
        "code": "<CheckBox selected=\"{/includeSchemaInfo}\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 115,
        "code": "<Label text=\"{i18n>sqlQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "fragment/QueryOptimizer.fragment.xml": [
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 18,
        "code": "<IconTabFilter text=\"{i18n>originalQuery}\" icon=\"sap-icon://document\" iconColor=\"Neutral\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 107,
        "code": "<IconTabFilter text=\"{i18n>optimizedQuery}\" icon=\"sap-icon://accelerated\" iconColor=\"Positive\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 112,
        "code": "<Label text=\"{i18n>improvedQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "fragment/QueryResults.fragment.xml": [
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 24,
        "code": "text=\"{= ${i18n>queryExecutedSuccessfully} + ' ' + ${/resultCount} + ' ' + ${i18n>rowsReturned} }\"",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 95,
        "code": "<!-- Dynamic columns will be created based on result schema -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 30,
        "code": "text=\"{= ${i18n>queryFailed} + ': ' + ${/errorMessage} }\"",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "manifest.json": [
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "manifest.json",
        "line": 70,
        "code": "\"press\": \".extension.a2a.network.agent11.ext.controller.ListReportExt.onRunCompliance\",",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "manifest.json",
        "line": 14,
        "code": "\"uri\": \"https://a2a/agent11/v1/odata/\",",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "manifest.json",
        "line": 182,
        "code": "\"allowedOrigins\": [\"https://*.ondemand.com\"],",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "manifest.json",
        "line": 53,
        "code": "\"pattern\": \":?query:\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "manifest.json",
        "line": 99,
        "code": "\"pattern\": \"ComplianceTasks({key}):?query:\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "utils/SQLSecurityModule.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 19,
        "code": "throw new Error(\"SQL template must be a non-empty string\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 31,
        "code": "throw new Error(\"Parameter count mismatch: expected \" + placeholderCount + \", got \" + parameters.length);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 119,
        "code": "let query = 'SELECT ' + columns.join(', ') + ' FROM ' + table;",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 172,
        "code": "const query = 'INSERT INTO ' + table + ' (' + columns.join(', ') + ') VALUES (' + placeholders.join(', ') + ')';",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 200,
        "code": "let query = 'UPDATE ' + table + ' SET ' + setClauses.join(', ');",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 250,
        "code": "clauses.push(validColumn + ' IN (' + placeholders + ')');",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLSecurityModule.js",
        "line": 258,
        "code": "clauses.push(validColumn + ' ' + op + ' ?');",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 47,
        "code": "* Sanitize a single parameter value",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 48,
        "code": "* @param {any} value - Parameter value to sanitize",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 51,
        "code": "sanitizeParameter: function(value) {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 69,
        "code": "throw new Error(\"Invalid number parameter: \" + value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 79,
        "code": "return this.sanitizeParameter(String(value));",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 251,
        "code": "parameters.push(...value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 259,
        "code": "parameters.push(value.value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 264,
        "code": "parameters.push(value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 93,
        "code": "// Only allow alphanumeric, underscore, and dot (for schema.table)",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 17,
        "code": "createParameterizedQuery: function(template, parameters) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 112,
        "code": "buildSelectQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 154,
        "code": "buildInsertQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 182,
        "code": "buildUpdateQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 217,
        "code": "buildDeleteQuery: function(options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 290,
        "code": "_generateQueryHash: function(query) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 7,
        "code": "* SQL Security Module - Prevents SQL injection through parameterized queries",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 12,
        "code": "* Create a parameterized query object",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 14,
        "code": "* @param {array} parameters - Array of parameters to bind",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 17,
        "code": "createParameterizedQuery: function(template, parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 25,
        "code": "// Validate parameter count",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 26,
        "code": "if (!parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 27,
        "code": "parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 30,
        "code": "if (placeholderCount !== parameters.length) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 31,
        "code": "throw new Error(\"Parameter count mismatch: expected \" + placeholderCount + \", got \" + parameters.length);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 34,
        "code": "// Validate and sanitize parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 35,
        "code": "const sanitizedParams = parameters.map(this.sanitizeParameter.bind(this));",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 39,
        "code": "parameters: sanitizedParams,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 41,
        "code": "isParameterized: true,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 47,
        "code": "* Sanitize a single parameter value",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 48,
        "code": "* @param {any} value - Parameter value to sanitize",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 51,
        "code": "sanitizeParameter: function(value) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 58,
        "code": "// Remove any SQL meta-characters that could break out of parameterization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 59,
        "code": "// Note: In a proper parameterized query, these should be safe, but we add extra protection",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 69,
        "code": "throw new Error(\"Invalid number parameter: \" + value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 79,
        "code": "return this.sanitizeParameter(String(value));",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 110,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 120,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 123,
        "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 146,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 152,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 160,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 165,
        "code": "parameters.push(data[column]);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 174,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 180,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 188,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 193,
        "code": "parameters.push(data[column]);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 203,
        "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 209,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 215,
        "code": "* @returns {object} Parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 222,
        "code": "const parameters = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 225,
        "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 231,
        "code": "return this.createParameterizedQuery(query, parameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 238,
        "code": "_buildWhereClause: function(conditions, parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 251,
        "code": "parameters.push(...value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 259,
        "code": "parameters.push(value.value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 264,
        "code": "parameters.push(value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 305,
        "code": "if (!parameterizedQuery || !parameterizedQuery.isParameterized) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 309,
        "code": "Log.info(\"Executing parameterized query\", {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 310,
        "code": "template: parameterizedQuery.template,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 311,
        "code": "paramCount: parameterizedQuery.parameters.length,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 312,
        "code": "hash: parameterizedQuery.hash",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 99,
        "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 320,
        "code": "message: \"Query executed successfully\"",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 7,
        "code": "* SQL Security Module - Prevents SQL injection through parameterized queries",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 8,
        "code": "* All SQL operations must go through this module",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 13,
        "code": "* @param {string} template - SQL template with ? placeholders",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 19,
        "code": "throw new Error(\"SQL template must be a non-empty string\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 58,
        "code": "// Remove any SQL meta-characters that could break out of parameterization",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 84,
        "code": "* Validate SQL identifier (table/column name)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 98,
        "code": "// Check against SQL reserved words",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 272,
        "code": "* Validate SQL operator",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 99,
        "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 320,
        "code": "message: \"Query executed successfully\"",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 99,
        "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 301,
        "code": "* Execute parameterized query (mock for UI5)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 304,
        "code": "executeQuery: function(parameterizedQuery) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 306,
        "code": "throw new Error(\"Only parameterized queries can be executed\");",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLSecurityModule.js",
        "line": 320,
        "code": "message: \"Query executed successfully\"",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "utils/SQLUtils.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 150,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 488,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 568,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 575,
        "code": "errors.push(\"Unmatched single quotes in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 578,
        "code": "errors.push(\"Unmatched double quotes in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 588,
        "code": "errors.push(\"PostgreSQL uses LIMIT, not TOP\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 592,
        "code": "errors.push(\"SQL Server uses TOP, not LIMIT\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 129,
        "code": "issues.push(\"Dangerous function '\" + func + \"' detected\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 794,
        "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 802,
        "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 820,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 834,
        "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 848,
        "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 387,
        "code": "factors.push(`${tables.length} tables involved`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 394,
        "code": "factors.push(`${joinCount} JOIN operations`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 401,
        "code": "factors.push(`${subqueryCount} nested expressions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 410,
        "code": "factors.push(`${aggCount} aggregation functions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 832,
        "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 846,
        "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeParameterUsage",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 844,
        "code": "const createSetClause = function(col) { return col + \" = ?\"; };",
        "message": "SQL parameters concatenated directly",
        "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 450,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 804,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 822,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 832,
        "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 846,
        "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 905,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 88,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 83,
        "code": "queryHash: this._generateQueryFingerprint(sanitizedSQL)",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 685,
        "code": "_generateQueryFingerprint: function(sql) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 292,
        "code": "const sanitizedQuery = SecurityUtils.escapeHTML(naturalLanguage.trim());",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 128,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 794,
        "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 802,
        "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 820,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 834,
        "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 848,
        "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 20,
        "code": "const securityValidation = SecurityUtils.validateSQL(sql, options.parameters, {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 322,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 446,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 447,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 448,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 449,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 450,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 451,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 726,
        "code": "value: SecurityUtils.sanitizeSQLParameter(tableName),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 749,
        "code": "value: SecurityUtils.sanitizeSQLParameter(columnName),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 796,
        "code": "parameters: {},",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 804,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 814,
        "code": "parameters: {},",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 822,
        "code": "parameters: { param1: 'value' },",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 832,
        "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 836,
        "code": "parameters: Object.fromEntries(columns.map(createParameterEntry)),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 846,
        "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 850,
        "code": "parameters: Object.fromEntries(columns.map(createUpdateParameterEntry)),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 901,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type || ''),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 902,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table || ''),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 903,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 904,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 905,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 906,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 932,
        "code": "parameters: { table: pattern.table }",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 936,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 944,
        "code": "parameters: { table: pattern.table }",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 948,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 956,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 964,
        "code": "parameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 126,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 10,
        "code": "* Comprehensive SQL query validation with enhanced security",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 11,
        "code": "* @param {string} sql - The SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 12,
        "code": "* @param {string} dialect - The SQL dialect (HANA, POSTGRESQL, etc.)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 16,
        "code": "validateSQL: function (sql, dialect, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 20,
        "code": "const securityValidation = SecurityUtils.validateSQL(sql, options.parameters, {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 42,
        "code": "const sanitizedSQL = securityValidation.sanitized;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 45,
        "code": "const syntaxIssues = this._checkEnhancedSyntax(sanitizedSQL, dialect, options);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 54,
        "code": "const performanceSuggestions = this._getEnhancedPerformanceSuggestions(sanitizedSQL, dialect);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 58,
        "code": "const complexityValidation = SecurityUtils.validateQueryComplexity(sanitizedSQL, options.complexityLimits);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 77,
        "code": "sanitized: sanitizedSQL,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 83,
        "code": "queryHash: this._generateQueryFingerprint(sanitizedSQL)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 88,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 89,
        "code": "* @param {string} sql - The SQL to sanitize",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "* @returns {string} Sanitized SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 92,
        "code": "sanitizeSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 93,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 96,
        "code": "const validation = SecurityUtils.validateSQL(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 104,
        "code": "_checkSecurityVulnerabilities: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 106,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 108,
        "code": "// Check for SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 119,
        "code": "if (pattern.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 120,
        "code": "issues.push(\"Potential SQL injection pattern detected\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 128,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 138,
        "code": "* Basic SQL syntax validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 141,
        "code": "_checkBasicSyntax: function (sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 144,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 147,
        "code": "const openParens = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 148,
        "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 150,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 154,
        "code": "if (lowerSQL.includes('select') && !lowerSQL.includes('from') &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 155,
        "code": "!lowerSQL.includes('dual') && dialect !== 'HANA') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 160,
        "code": "if ((lowerSQL.includes('update') || lowerSQL.includes('delete')) &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 161,
        "code": "!lowerSQL.includes('where')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 172,
        "code": "_getPerformanceSuggestions: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 174,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 177,
        "code": "if (lowerSQL.includes('select *')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 186,
        "code": "if (lowerSQL.includes('like \\'%')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 195,
        "code": "if (/where\\s+\\w+\\s*\\(/i.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 207,
        "code": "* Format SQL query for better readability",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 208,
        "code": "* @param {string} sql - The SQL to format",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 209,
        "code": "* @returns {string} Formatted SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 211,
        "code": "formatSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 212,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 214,
        "code": "// Basic SQL formatting",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 215,
        "code": "let formatted = sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 246,
        "code": "* Extract table names from SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 247,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 250,
        "code": "extractTableNames: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 251,
        "code": "if (!sql) return [];",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 254,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 257,
        "code": "const fromMatches = sql.match(/from\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 269,
        "code": "const joinMatches = sql.match(/join\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 322,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 372,
        "code": "* Estimate query complexity based on SQL structure",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 373,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 376,
        "code": "estimateComplexity: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 377,
        "code": "if (!sql) return { level: 'Unknown', score: 0, factors: [] };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 379,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 384,
        "code": "const tables = this.extractTableNames(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 391,
        "code": "const joinCount = (sql.match(/join/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 398,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 406,
        "code": "const includesAggregation = (agg) => lowerSQL.includes(agg);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 414,
        "code": "if (lowerSQL.includes('over(') || lowerSQL.includes('partition by')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 439,
        "code": "* Generate SQL from common patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 441,
        "code": "* @returns {string} Generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 443,
        "code": "generateSQLFromPattern: function (pattern) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 444,
        "code": "// Sanitize all pattern components before SQL generation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 446,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 447,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 448,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 449,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 450,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 451,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 454,
        "code": "let generatedSQL = \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 458,
        "code": "generatedSQL = \"SELECT * FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 462,
        "code": "generatedSQL = \"SELECT ? FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 466,
        "code": "generatedSQL = \"SELECT COUNT(*) FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 470,
        "code": "generatedSQL = \"INSERT INTO ? (?) VALUES (?)\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 474,
        "code": "generatedSQL = \"UPDATE ? SET ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 478,
        "code": "generatedSQL = \"DELETE FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 485,
        "code": "// Validate the generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 486,
        "code": "const validation = SecurityUtils.validateSQL(generatedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 488,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 496,
        "code": "* Get SQL dialect-specific syntax information",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 497,
        "code": "* @param {string} dialect - The SQL dialect",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 504,
        "code": "features: ['Column store', 'In-memory processing', 'SQL Script'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 509,
        "code": "'POSTGRESQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 510,
        "code": "name: 'PostgreSQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 516,
        "code": "'MYSQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 517,
        "code": "name: 'MySQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 523,
        "code": "'SQLITE': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 524,
        "code": "name: 'SQLite',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 532,
        "code": "features: ['Advanced analytics', 'Partitioning', 'PL/SQL'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 537,
        "code": "'SQLSERVER': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 538,
        "code": "name: 'Microsoft SQL Server',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 539,
        "code": "features: ['T-SQL', 'Columnstore indexes', 'In-memory OLTP'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 559,
        "code": "_checkEnhancedSyntax: function(sql, dialect, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 562,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 565,
        "code": "const openParens = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 566,
        "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 568,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 572,
        "code": "const singleQuotes = (sql.match(/'/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 573,
        "code": "const doubleQuotes = (sql.match(/\"/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 575,
        "code": "errors.push(\"Unmatched single quotes in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 578,
        "code": "errors.push(\"Unmatched double quotes in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 583,
        "code": "if (lowerSQL.includes('dual') && !lowerSQL.includes('sys.dual')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 586,
        "code": "} else if (dialect === 'POSTGRESQL') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 587,
        "code": "if (lowerSQL.includes('limit') && lowerSQL.includes('top')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 588,
        "code": "errors.push(\"PostgreSQL uses LIMIT, not TOP\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 590,
        "code": "} else if (dialect === 'SQLSERVER') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 591,
        "code": "if (lowerSQL.includes('limit') && !lowerSQL.includes('top')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 592,
        "code": "errors.push(\"SQL Server uses TOP, not LIMIT\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 597,
        "code": "if (lowerSQL.includes('truncate table')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 601,
        "code": "if (lowerSQL.includes('with recursive') && dialect !== 'POSTGRESQL') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 612,
        "code": "_getEnhancedPerformanceSuggestions: function(sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 614,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 617,
        "code": "if (lowerSQL.includes('select *')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 627,
        "code": "if (lowerSQL.includes(\"like '%\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 637,
        "code": "if (/where\\s+\\w*\\s*\\(/i.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 647,
        "code": "if ((sql.match(/\\bor\\b/gi) || []).length > 2) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 657,
        "code": "if (lowerSQL.includes('in (select') && !lowerSQL.includes('exists')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 668,
        "code": "if (lowerSQL.includes('group by') && !lowerSQL.includes('order by')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 685,
        "code": "_generateQueryFingerprint: function(sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 686,
        "code": "// Normalize SQL for fingerprinting",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 687,
        "code": "const normalized = sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 726,
        "code": "value: SecurityUtils.sanitizeSQLParameter(tableName),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 749,
        "code": "value: SecurityUtils.sanitizeSQLParameter(columnName),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 774,
        "code": "* Generate secure SQL templates based on intent and entities",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 777,
        "code": "_generateSecureSQLTemplates: function(intent, entities, context) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 794,
        "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 802,
        "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 812,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 820,
        "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 834,
        "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 848,
        "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 887,
        "code": "* Sanitize pattern for SQL generation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 901,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type || ''),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 902,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table || ''),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 903,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 904,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 905,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 906,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 925,
        "code": "* Generate secure SQL template",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 126,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 115,
        "code": "/sp_executesql/i",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 126,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "utils/SecurityUtils.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 91,
        "code": "errors: [\"SQL query must be a non-empty string\"],",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 164,
        "code": "{ pattern: /mysql\\./gi, penalty: 25, message: \"MySQL system database access\" },",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 244,
        "code": "detectedPatterns: criticalPatterns.filter(p => p.pattern.test(sql)).map(p => p.message)",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 806,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 814,
        "code": "// Additional validation for SQL-related messages",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 198,
        "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 231,
        "code": "errors.push(\"Operation '\" + firstWord + \"' is not allowed in this context\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 337,
        "code": "errors.push(\"Parameter '\" + key + \"' exceeds maximum length\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 352,
        "code": "errors.push(\"Parameter '\" + key + \"' should be numeric or UUID format\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 359,
        "code": "errors.push(\"Parameter '\" + key + \"' should be valid email format\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 373,
        "code": "errors.push(\"Parameter '\" + key + \"' must be a finite number\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 413,
        "code": "processedQuery = processedQuery.replace(new RegExp(\":\" + key + \"\\\\b\", 'g'), placeholder);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "const key = \"rateLimit_\" + userId + \"_\" + operation;",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 498,
        "code": "Log.warning(\"Rate limit exceeded for user \" + userId + \" operation \" + operation);",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1005,
        "code": "issues.push(\"Too many joins (\" + totalJoins + \", limit: \" + limits.maxJoins + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1026,
        "code": "issues.push(\"Too many subqueries (\" + subqueryCount + \", limit: \" + limits.maxSubqueries + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1030,
        "code": "issues.push(\"Query nesting too deep (\" + maxDepth + \" levels)\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1042,
        "code": "issues.push(\"Too many UNION operations (\" + unionCount + \", limit: \" + limits.maxUnions + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1058,
        "code": "issues.push(\"Too many tables referenced (\" + tableCount + \", limit: \" + limits.maxTables + \")\");",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeParameterUsage",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "SQL parameters concatenated directly",
        "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeParameterUsage",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 1166,
        "code": "baseTime *= (1 + complexity / 50);",
        "message": "SQL parameters concatenated directly",
        "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
      },
      {
        "type": "csrf",
        "subtype": "missingCSRFToken",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 72,
        "code": "oModel.callFunction(sFunctionName, secureParams);",
        "message": "Missing CSRF token in SQL operation",
        "fix": "Add CSRF token to all SQL operation requests"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 29,
        "code": "reject(new Error('Failed to fetch CSRF token: ' + error));",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "const key = \"rateLimit_\" + userId + \"_\" + operation;",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 198,
        "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 301,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 302,
        "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 393,
        "code": "value: this.sanitizeSQLParameter(value),",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 407,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 408,
        "code": "const paramType = this._detectParameterType(value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 426,
        "code": "_detectParameterType: function(value) {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 118,
        "code": "{ pattern: /;\\s*drop\\s+(table|database|schema)/gi, penalty: 50, message: \"DROP statement injection\" },",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 162,
        "code": "{ pattern: /information_schema/gi, penalty: 30, message: \"Information schema access\" },",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 845,
        "code": "if (url.startsWith('http://')) {",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 846,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 793,
        "code": "if (url.startsWith('ws://')) {",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 794,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 793,
        "code": "if (url.startsWith('ws://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 794,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 845,
        "code": "if (url.startsWith('http://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 846,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 43,
        "code": "return this.getCSRFToken().then(function(token) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "unencryptedStorage",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 495,
        "code": "sessionStorage.setItem(key, JSON.stringify(rateLimitData));",
        "message": "Security issue: dataExposure - unencryptedStorage",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "unencryptedStorage",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 719,
        "code": "sessionStorage.setItem('sqlAuditLog', JSON.stringify(auditLog));",
        "message": "Security issue: dataExposure - unencryptedStorage",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 275,
        "code": "createParameterizedQuery: function(baseQuery, parameters, options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 289,
        "code": "query: null,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 316,
        "code": "query: secureQuery.query,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 322,
        "code": "queryHash: this._generateQueryHash(secureQuery.query),",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 402,
        "code": "_generateSecureQuery: function(baseQuery, parameters, options) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 413,
        "code": "processedQuery = processedQuery.replace(new RegExp(\":\" + key + \"\\\\b\", 'g'), placeholder);",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 417,
        "code": "query: processedQuery,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 450,
        "code": "_generateQueryHash: function(query) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 470,
        "code": "query: { maxRequests: 100, window: 3600000 }, // 100 queries per hour",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 517,
        "code": "queryHash: details.queryHash,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 518,
        "code": "queryType: details.queryType,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 545,
        "code": "validateNaturalLanguageQuery: function(naturalQuery) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 958,
        "code": "validateQueryComplexity: function(sql, limits) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 965,
        "code": "maxQueryLength: 10000,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 971,
        "code": "return { isValid: false, reason: \"No SQL provided\", complexity: 0, score: 0 };",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 1026,
        "code": "issues.push(\"Too many subqueries (\" + subqueryCount + \", limit: \" + limits.maxSubqueries + \")\");",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 801,
        "code": "ws.addEventListener('open', function() {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 805,
        "code": "ws.addEventListener('error', function(error) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 809,
        "code": "ws.addEventListener('message', function(event) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 853,
        "code": "const originalAddEventListener = eventSource.addEventListener;",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 854,
        "code": "eventSource.addEventListener = function(type, listener, options) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 798,
        "code": "const ws = new WebSocket(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 850,
        "code": "const eventSource = new EventSource(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 726,
        "code": "* Safely escape HTML content",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 730,
        "code": "escapeHTML: function(content) {",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 929,
        "code": "return this.escapeHTML(result);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 937,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 949,
        "code": "return this.escapeHTML(String(result));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 39,
        "code": "* @param {object} mParameters - Parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 42,
        "code": "secureCallFunction: function(oModel, sFunctionName, mParameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 44,
        "code": "const secureParams = Object.assign({}, mParameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 80,
        "code": "* @param {object} params - Query parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 183,
        "code": "// Advanced parameter validation",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 196,
        "code": "// Check for excessive parameter length",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 198,
        "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 205,
        "code": "// Check for proper parameterization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 207,
        "code": "const hasParameters = /[?$:]\\w*|\\{\\w+\\}/g.test(sanitized);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 209,
        "code": "if (hasLiterals && !hasParameters && !options.allowLiterals) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 210,
        "code": "warnings.push(\"SQL contains string literals - consider using parameterized queries\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 249,
        "code": "* Sanitize SQL parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 250,
        "code": "* @param {any} param - Parameter to sanitize",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 251,
        "code": "* @returns {any} Sanitized parameter",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 253,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 269,
        "code": "* Create secure parameterized query with advanced templates",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 271,
        "code": "* @param {object} parameters - Parameters to bind",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 275,
        "code": "createParameterizedQuery: function(baseQuery, parameters, options) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 278,
        "code": "const validation = this.validateSQL(baseQuery, parameters, {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 290,
        "code": "parameters: null,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 296,
        "code": "// Advanced parameter sanitization and validation",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 298,
        "code": "const parameterErrors = [];",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 300,
        "code": "if (parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 301,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 302,
        "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 306,
        "code": "parameterErrors.push(...sanitized.errors);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 311,
        "code": "// Generate secure query with proper parameter binding",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 315,
        "code": "isValid: parameterErrors.length === 0,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 317,
        "code": "parameters: sanitizedParams,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 318,
        "code": "errors: parameterErrors,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 323,
        "code": "parameterTypes: secureQuery.parameterTypes",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 328,
        "code": "* Advanced parameter sanitization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 335,
        "code": "// Check parameter length limits",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 336,
        "code": "if (value.length > (options.maxParameterLength || 1000)) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 337,
        "code": "errors.push(\"Parameter '\" + key + \"' exceeds maximum length\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 348,
        "code": "// Additional validation for specific parameter types",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 350,
        "code": "// ID parameters should be numeric or UUID format",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 352,
        "code": "errors.push(\"Parameter '\" + key + \"' should be numeric or UUID format\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 359,
        "code": "errors.push(\"Parameter '\" + key + \"' should be valid email format\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 370,
        "code": "// Handle other parameter types",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 373,
        "code": "errors.push(\"Parameter '\" + key + \"' must be a finite number\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 393,
        "code": "value: this.sanitizeSQLParameter(value),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 399,
        "code": "* Generate secure query with proper parameter binding",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 402,
        "code": "_generateSecureQuery: function(baseQuery, parameters, options) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 403,
        "code": "const parameterTypes = {};",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 406,
        "code": "// Replace named parameters with positional parameters for better security",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 407,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 408,
        "code": "const paramType = this._detectParameterType(value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 409,
        "code": "parameterTypes[key] = paramType;",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 418,
        "code": "parameterTypes: parameterTypes",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 423,
        "code": "* Detect parameter data type for proper binding",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 426,
        "code": "_detectParameterType: function(value) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 523,
        "code": "parameterCount: details.parameterCount,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 736,
        "code": "* Validate database connection parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 123,
        "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 464,
        "code": "* @param {string} operation - Operation type (query, execute, etc.)",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 471,
        "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 581,
        "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 736,
        "code": "* Validate database connection parameters",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 737,
        "code": "* @param {object} connection - Connection configuration",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 740,
        "code": "validateConnection: function(connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 743,
        "code": "if (!connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 746,
        "code": "errors: [\"Connection configuration is required\"]",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 753,
        "code": "if (!connection[field]) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 758,
        "code": "// Check for secure connection",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 759,
        "code": "if (connection.host && !connection.ssl && !connection.host.includes('localhost')) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 760,
        "code": "errors.push(\"SSL/TLS encryption should be enabled for external connections\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 764,
        "code": "if (connection.password && connection.password.length < 8) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 769,
        "code": "if (connection.host) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 771,
        "code": "if (!hostPattern.test(connection.host)) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 783,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 785,
        "code": "* @param {object} options - Connection options",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 802,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 57,
        "code": "Log.info(\"Secure SQL function call successful\", sFunctionName);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 78,
        "code": "* Advanced SQL injection prevention and validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 79,
        "code": "* @param {string} sql - SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 84,
        "code": "validateSQL: function(sql, params, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 87,
        "code": "if (!sql || typeof sql !== 'string') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 91,
        "code": "errors: [\"SQL query must be a non-empty string\"],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 99,
        "code": "let sanitized = sql.trim();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 116,
        "code": "// Dangerous SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 152,
        "code": "{ pattern: /--[^\\r\\n]*/gi, penalty: 20, message: \"SQL comment detected\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 164,
        "code": "{ pattern: /mysql\\./gi, penalty: 25, message: \"MySQL system database access\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 165,
        "code": "{ pattern: /pg_catalog/gi, penalty: 25, message: \"PostgreSQL catalog access\" },",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 173,
        "code": "{ pattern: /pg_sleep\\s*\\(/gi, penalty: 35, message: \"PostgreSQL sleep detected\" }",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 191,
        "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 210,
        "code": "warnings.push(\"SQL contains string literals - consider using parameterized queries\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 241,
        "code": "original: sql,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 244,
        "code": "detectedPatterns: criticalPatterns.filter(p => p.pattern.test(sql)).map(p => p.message)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 249,
        "code": "* Sanitize SQL parameters",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 253,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 259,
        "code": ".replace(/--/g, '') // Remove SQL comments",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 270,
        "code": "* @param {string} baseQuery - Base SQL query with placeholders",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 278,
        "code": "const validation = this.validateSQL(baseQuery, parameters, {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 302,
        "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 393,
        "code": "value: this.sanitizeSQLParameter(value),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 462,
        "code": "* Rate limiting for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 505,
        "code": "* Audit logging for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 534,
        "code": "Log.info(\"SQL Audit Log\", JSON.stringify(auditEntry));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 711,
        "code": "const auditLog = JSON.parse(sessionStorage.getItem('sqlAuditLog')) || [];",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 719,
        "code": "sessionStorage.setItem('sqlAuditLog', JSON.stringify(auditLog));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 783,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 802,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 806,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 811,
        "code": "// Validate incoming SQL data",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 814,
        "code": "// Additional validation for SQL-related messages",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 815,
        "code": "if (data.type && data.type.includes('SQL') || data.type.includes('QUERY')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 816,
        "code": "const validation = this.validateSQL(data.sql || '');",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 818,
        "code": "Log.warning(\"Invalid SQL received via WebSocket\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 835,
        "code": "* Create secure EventSource for SQL monitoring",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 861,
        "code": "// SQL-specific validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 862,
        "code": "if (data.sql || data.query) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 863,
        "code": "const validation = this.validateSQL(data.sql || data.query);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 865,
        "code": "Log.warning(\"Invalid SQL received via EventSource\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 887,
        "code": "* Check user authorization for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 892,
        "code": "checkSQLAuth: function(operation, resource) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 894,
        "code": "// SQL-specific authorization checks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 919,
        "code": "* Sanitize SQL query result for display",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 923,
        "code": "sanitizeSQLResult: function(result) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 937,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 946,
        "code": "return result.map(item => this.sanitizeSQLResult(item));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 954,
        "code": "* @param {string} sql - SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 958,
        "code": "validateQueryComplexity: function(sql, limits) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 970,
        "code": "if (!sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 971,
        "code": "return { isValid: false, reason: \"No SQL provided\", complexity: 0, score: 0 };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 974,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 981,
        "code": "if (sql.length > limits.maxQueryLength) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 982,
        "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 998,
        "code": "const matches = (sql.match(pattern) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1014,
        "code": "for (let char of sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1020,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1035,
        "code": "const unionCount = (sql.match(/\\bunion\\b/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1036,
        "code": "const unionAllCount = (sql.match(/\\bunion\\s+all\\b/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1049,
        "code": "while ((match = tablePattern.exec(sql)) !== null) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1065,
        "code": "const hasWhere = /\\bwhere\\b/gi.test(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1088,
        "code": "const matches = (sql.match(pattern) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1096,
        "code": "if (!limits.allowRecursiveCTE && /\\bwith\\s+recursive\\b/gi.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 1114,
        "code": "if (pattern.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 123,
        "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 464,
        "code": "* @param {string} operation - Operation type (query, execute, etc.)",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 471,
        "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 581,
        "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 123,
        "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 125,
        "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 464,
        "code": "* @param {string} operation - Operation type (query, execute, etc.)",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 471,
        "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 581,
        "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "undefined": [
      {
        "type": "compliance",
        "message": "Missing crossNavigation in manifest.json",
        "severity": "MEDIUM"
      }
    ]
  },
  "details": [
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 60,
      "code": "* @function onRunCompliance",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 507,
      "code": "if (!this._securityUtils.validateWebSocketUrl('ws://localhost:8011/compliance/updates')) {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 513,
      "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/compliance/updates', {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 108,
      "code": ".then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 132,
      "code": ".then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 250,
      "code": ".then(function(oProgressDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 597,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unclosedConnections",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 306,
      "code": "this._complianceEventSource = new EventSource('/api/agent11/compliance/progress-stream');",
      "message": "Security issue: resources - unclosedConnections",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 75,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectTasksFirst\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 82,
      "code": "this.getResourceBundle().getText(\"msg.runComplianceConfirm\", [aSelectedContexts.length]),",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 281,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.complianceCheckStarted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 286,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.complianceCheckFailed\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 406,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.complianceCheckCompleted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 521,
      "code": "var sMessage = oBundle.getText(\"msg.websocketDisconnected\") || \"Connection lost. Reconnecting...\";",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 555,
      "code": "var sStartMsg = oBundle.getText(\"msg.complianceStarted\") || \"Compliance check started\";",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 559,
      "code": "var sCompleteMsg = oBundle.getText(\"msg.complianceCompleted\") || \"Compliance check completed\";",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 564,
      "code": "var sErrorMsg = oBundle.getText(\"error.complianceFailed\") || \"Compliance check failed\";",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 569,
      "code": "var sRuleMsg = oBundle.getText(\"msg.ruleUpdated\") || \"Compliance rule updated\";",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "improperExtensionPoint",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 18,
      "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ListReportExt\", {",
      "message": "Security issue: sapFiori - improperExtensionPoint",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 565,
      "code": "var safeError = SecurityUtils.escapeHTML(data.error || 'Unknown error');",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 277,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 356,
      "code": "urlParameters: { taskIds: aTaskIds.join(',') },",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 86,
      "code": "this._executeComplianceChecks(aSelectedContexts);",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 240,
      "code": "* @function _executeComplianceChecks",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 241,
      "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 245,
      "code": "_executeComplianceChecks: function(aSelectedContexts) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 500,
      "code": "* @description Initializes secure WebSocket connection for real-time updates.",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 521,
      "code": "var sMessage = oBundle.getText(\"msg.websocketDisconnected\") || \"Connection lost. Reconnecting...\";",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 527,
      "code": "console.warn(\"WebSocket connection failed, falling back to polling\");",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 712,
      "code": "// Clean up WebSocket connections",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 718,
      "code": "// Clean up EventSource connections",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 86,
      "code": "this._executeComplianceChecks(aSelectedContexts);",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 240,
      "code": "* @function _executeComplianceChecks",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 241,
      "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 245,
      "code": "_executeComplianceChecks: function(aSelectedContexts) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 86,
      "code": "this._executeComplianceChecks(aSelectedContexts);",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 240,
      "code": "* @function _executeComplianceChecks",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 241,
      "code": "* @description Executes compliance checks for selected tasks with progress tracking.",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 245,
      "code": "_executeComplianceChecks: function(aSelectedContexts) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 55,
      "code": ".then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 96,
      "code": ".then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 141,
      "code": ".then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 202,
      "code": ".then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 381,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 191,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.noViolationsToReview\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "improperExtensionPoint",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 11,
      "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ObjectPageExt\", {",
      "message": "Security issue: sapFiori - improperExtensionPoint",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 239,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 274,
      "code": "urlParameters: { taskId: oScheduleData.taskId },",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 305,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 7,
      "code": "], function (Controller, SQLSecurityModule, SecurityUtils, MessageBox, Log) {",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 35,
      "code": "reject(new Error(\"Access denied: SQL query requires SQLUser role\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 78,
      "code": "reject(new Error(\"Access denied: SQL insert requires SQLWriter role\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 121,
      "code": "reject(new Error(\"Access denied: SQL update requires SQLWriter role\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 164,
      "code": "reject(new Error(\"Access denied: SQL delete requires SQLAdmin role\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 217,
      "code": "reject(new Error(\"Access denied: SQL translation requires SQLUser role\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 57,
      "code": ".then(resolve)",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 100,
      "code": ".then(resolve)",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 143,
      "code": ".then(resolve)",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 191,
      "code": ".then(resolve)",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 52,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 95,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 138,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 186,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 254,
      "code": "_executeSecureQuery: function(parameterizedQuery) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 297,
      "code": "_buildQueryOptionsFromParsed: function(parsed) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "controller/SecureSQLController.js",
      "line": 222,
      "code": "const sanitized = this._securityUtils.escapeHTML(naturalLanguage);",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeSQLExecution",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 257,
      "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
      "message": "SQL execution without validation",
      "fix": "Use SQLUtils.validateSQL() before execution"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 12,
      "code": "* Prevents SQL injection through mandatory parameterized queries",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 45,
      "code": "// Build secure parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 46,
      "code": "const parameterizedQuery = this._sqlSecurity.buildSelectQuery(queryOptions);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 52,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 56,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 88,
      "code": "// Build secure parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 89,
      "code": "const parameterizedQuery = this._sqlSecurity.buildInsertQuery(insertOptions);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 95,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 99,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 131,
      "code": "// Build secure parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 132,
      "code": "const parameterizedQuery = this._sqlSecurity.buildUpdateQuery(updateOptions);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 138,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 142,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 179,
      "code": "// Build secure parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 180,
      "code": "const parameterizedQuery = this._sqlSecurity.buildDeleteQuery(deleteOptions);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 186,
      "code": "queryHash: parameterizedQuery.hash",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 190,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 251,
      "code": "* Execute a secure parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 254,
      "code": "_executeSecureQuery: function(parameterizedQuery) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 257,
      "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 25,
      "code": "* Execute a SELECT query safely",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 29,
      "code": "executeSelect: function(queryOptions) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 55,
      "code": "// Execute through secure channel",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 56,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 68,
      "code": "* Execute an INSERT query safely",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 72,
      "code": "executeInsert: function(insertOptions) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 98,
      "code": "// Execute through secure channel",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 99,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 111,
      "code": "* Execute an UPDATE query safely",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 115,
      "code": "executeUpdate: function(updateOptions) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 141,
      "code": "// Execute through secure channel",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 142,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 154,
      "code": "* Execute a DELETE query safely",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 158,
      "code": "executeDelete: function(deleteOptions) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 189,
      "code": "// Execute through secure channel",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 190,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 251,
      "code": "* Execute a secure parameterized query",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 254,
      "code": "_executeSecureQuery: function(parameterizedQuery) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 257,
      "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 3,
      "code": "\"a2a/network/agent11/ext/utils/SQLSecurityModule\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 7,
      "code": "], function (Controller, SQLSecurityModule, SecurityUtils, MessageBox, Log) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 11,
      "code": "* Secure SQL Controller - All SQL operations must use this controller",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 12,
      "code": "* Prevents SQL injection through mandatory parameterized queries",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 14,
      "code": "return Controller.extend(\"a2a.network.agent11.ext.controller.SecureSQLController\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 20,
      "code": "this._sqlSecurity = SQLSecurityModule;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 33,
      "code": "if (!this._securityUtils.hasRole(\"SQLUser\") && !this._securityUtils.hasRole(\"Admin\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 34,
      "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"SELECT\" });",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 35,
      "code": "reject(new Error(\"Access denied: SQL query requires SQLUser role\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 46,
      "code": "const parameterizedQuery = this._sqlSecurity.buildSelectQuery(queryOptions);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 49,
      "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 76,
      "code": "if (!this._securityUtils.hasRole(\"SQLWriter\") && !this._securityUtils.hasRole(\"Admin\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 77,
      "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"INSERT\" });",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 78,
      "code": "reject(new Error(\"Access denied: SQL insert requires SQLWriter role\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 89,
      "code": "const parameterizedQuery = this._sqlSecurity.buildInsertQuery(insertOptions);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 92,
      "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 119,
      "code": "if (!this._securityUtils.hasRole(\"SQLWriter\") && !this._securityUtils.hasRole(\"Admin\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 120,
      "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"UPDATE\" });",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 121,
      "code": "reject(new Error(\"Access denied: SQL update requires SQLWriter role\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 132,
      "code": "const parameterizedQuery = this._sqlSecurity.buildUpdateQuery(updateOptions);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 135,
      "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 162,
      "code": "if (!this._securityUtils.hasRole(\"SQLAdmin\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 163,
      "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"DELETE\" });",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 164,
      "code": "reject(new Error(\"Access denied: SQL delete requires SQLAdmin role\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 180,
      "code": "const parameterizedQuery = this._sqlSecurity.buildDeleteQuery(deleteOptions);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 183,
      "code": "this._securityUtils.auditLog(\"SQL_QUERY\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 207,
      "code": "* Translate natural language to SQL (secure)",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 209,
      "code": "* @returns {Promise} SQL query options",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 211,
      "code": "translateToSQL: function(naturalLanguage) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 215,
      "code": "if (!this._securityUtils.hasRole(\"SQLUser\") && !this._securityUtils.hasRole(\"Admin\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 216,
      "code": "this._securityUtils.auditLog(\"SQL_ACCESS_DENIED\", { operation: \"TRANSLATE\" });",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 217,
      "code": "reject(new Error(\"Access denied: SQL translation requires SQLUser role\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 236,
      "code": "this._securityUtils.auditLog(\"SQL_TRANSLATE\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 256,
      "code": "// For now, we'll use the mock from SQLSecurityModule",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 257,
      "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 25,
      "code": "* Execute a SELECT query safely",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 29,
      "code": "executeSelect: function(queryOptions) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 55,
      "code": "// Execute through secure channel",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 56,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 68,
      "code": "* Execute an INSERT query safely",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 72,
      "code": "executeInsert: function(insertOptions) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 98,
      "code": "// Execute through secure channel",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 99,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 111,
      "code": "* Execute an UPDATE query safely",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 115,
      "code": "executeUpdate: function(updateOptions) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 141,
      "code": "// Execute through secure channel",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 142,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 154,
      "code": "* Execute a DELETE query safely",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 158,
      "code": "executeDelete: function(deleteOptions) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 189,
      "code": "// Execute through secure channel",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 190,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 251,
      "code": "* Execute a secure parameterized query",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 254,
      "code": "_executeSecureQuery: function(parameterizedQuery) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 257,
      "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 25,
      "code": "* Execute a SELECT query safely",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 29,
      "code": "executeSelect: function(queryOptions) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 55,
      "code": "// Execute through secure channel",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 56,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 68,
      "code": "* Execute an INSERT query safely",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 72,
      "code": "executeInsert: function(insertOptions) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 98,
      "code": "// Execute through secure channel",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 99,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 111,
      "code": "* Execute an UPDATE query safely",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 115,
      "code": "executeUpdate: function(updateOptions) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 141,
      "code": "// Execute through secure channel",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 142,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 154,
      "code": "* Execute a DELETE query safely",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 158,
      "code": "executeDelete: function(deleteOptions) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 189,
      "code": "// Execute through secure channel",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 190,
      "code": "this._executeSecureQuery(parameterizedQuery)",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 251,
      "code": "* Execute a secure parameterized query",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 254,
      "code": "_executeSecureQuery: function(parameterizedQuery) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/SecureSQLController.js",
      "line": 257,
      "code": "return this._sqlSecurity.executeQuery(parameterizedQuery);",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "sqlInjection",
      "subtype": "dynamicQueryBuilding",
      "severity": "CRITICAL",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 383,
      "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
      "message": "Dynamic SQL query building without validation",
      "fix": "Validate and sanitize all SQL components"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 26,
      "code": "<IconTabFilter text=\"{i18n>tab.basicInfo}\" key=\"basic\" icon=\"sap-icon://detail-view\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 61,
      "code": "selectedKey=\"{create>/queryType}\"",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 67,
      "code": "<core:Item key=\"select\" text=\"{i18n>query.select}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 68,
      "code": "<core:Item key=\"insert\" text=\"{i18n>query.insert}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 69,
      "code": "<core:Item key=\"update\" text=\"{i18n>query.update}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 70,
      "code": "<core:Item key=\"delete\" text=\"{i18n>query.delete}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 71,
      "code": "<core:Item key=\"create\" text=\"{i18n>query.create}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 72,
      "code": "<core:Item key=\"alter\" text=\"{i18n>query.alter}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 73,
      "code": "<core:Item key=\"drop\" text=\"{i18n>query.drop}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 74,
      "code": "<core:Item key=\"procedure\" text=\"{i18n>query.procedure}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 75,
      "code": "<core:Item key=\"function\" text=\"{i18n>query.function}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 76,
      "code": "<core:Item key=\"trigger\" text=\"{i18n>query.trigger}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 77,
      "code": "<core:Item key=\"view\" text=\"{i18n>query.view}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 78,
      "code": "<core:Item key=\"index\" text=\"{i18n>query.index}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 85,
      "code": "selectedKey=\"{create>/databaseType}\"",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 91,
      "code": "<core:Item key=\"mysql\" text=\"{i18n>db.mysql}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 92,
      "code": "<core:Item key=\"postgresql\" text=\"{i18n>db.postgresql}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 93,
      "code": "<core:Item key=\"oracle\" text=\"{i18n>db.oracle}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 94,
      "code": "<core:Item key=\"sqlserver\" text=\"{i18n>db.sqlserver}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 95,
      "code": "<core:Item key=\"sqlite\" text=\"{i18n>db.sqlite}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 96,
      "code": "<core:Item key=\"hana\" text=\"{i18n>db.hana}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 97,
      "code": "<core:Item key=\"db2\" text=\"{i18n>db.db2}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 98,
      "code": "<core:Item key=\"snowflake\" text=\"{i18n>db.snowflake}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 99,
      "code": "<core:Item key=\"bigquery\" text=\"{i18n>db.bigquery}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 106,
      "code": "selectedKey=\"{create>/priority}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 108,
      "code": "<SegmentedButtonItem key=\"low\" text=\"{i18n>priority.low}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 109,
      "code": "<SegmentedButtonItem key=\"medium\" text=\"{i18n>priority.medium}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 110,
      "code": "<SegmentedButtonItem key=\"high\" text=\"{i18n>priority.high}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 111,
      "code": "<SegmentedButtonItem key=\"critical\" text=\"{i18n>priority.critical}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 119,
      "code": "selectedKey=\"{create>/complexity}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 120,
      "code": "<core:Item key=\"simple\" text=\"{i18n>complexity.simple}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 121,
      "code": "<core:Item key=\"moderate\" text=\"{i18n>complexity.moderate}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 122,
      "code": "<core:Item key=\"complex\" text=\"{i18n>complexity.complex}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 123,
      "code": "<core:Item key=\"very_complex\" text=\"{i18n>complexity.very_complex}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 132,
      "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 152,
      "code": "<ComboBox id=\"queryLanguageCombo\" selectedKey=\"{create>/queryLanguage}\" selectionChange=\".onQueryLanguageChange\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 153,
      "code": "<core:Item key=\"sql\" text=\"SQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 154,
      "code": "<core:Item key=\"tsql\" text=\"T-SQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 155,
      "code": "<core:Item key=\"plsql\" text=\"PL/SQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 156,
      "code": "<core:Item key=\"mysql\" text=\"MySQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 157,
      "code": "<core:Item key=\"postgresql\" text=\"PostgreSQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 158,
      "code": "<core:Item key=\"nosql\" text=\"NoSQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 175,
      "code": "<ComboBox id=\"indexUsageCombo\" selectedKey=\"{create>/indexUsage}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 176,
      "code": "<core:Item key=\"auto\" text=\"{i18n>indexUsage.auto}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 177,
      "code": "<core:Item key=\"force\" text=\"{i18n>indexUsage.force}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 178,
      "code": "<core:Item key=\"hint\" text=\"{i18n>indexUsage.hint}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 179,
      "code": "<core:Item key=\"none\" text=\"{i18n>indexUsage.none}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 209,
      "code": "<IconTabFilter text=\"{i18n>tab.databaseConfig}\" key=\"database\" icon=\"sap-icon://database\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 224,
      "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 242,
      "code": "<ComboBox id=\"transactionModeCombo\" selectedKey=\"{create>/transactionMode}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 243,
      "code": "<core:Item key=\"auto\" text=\"{i18n>transaction.auto}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 244,
      "code": "<core:Item key=\"manual\" text=\"{i18n>transaction.manual}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 245,
      "code": "<core:Item key=\"read_only\" text=\"{i18n>transaction.read_only}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 246,
      "code": "<core:Item key=\"read_write\" text=\"{i18n>transaction.read_write}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 251,
      "code": "<ComboBox id=\"isolationLevelCombo\" selectedKey=\"{create>/isolationLevel}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 252,
      "code": "<core:Item key=\"read_uncommitted\" text=\"{i18n>isolation.read_uncommitted}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 253,
      "code": "<core:Item key=\"read_committed\" text=\"{i18n>isolation.read_committed}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 254,
      "code": "<core:Item key=\"repeatable_read\" text=\"{i18n>isolation.repeatable_read}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 255,
      "code": "<core:Item key=\"serializable\" text=\"{i18n>isolation.serializable}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 268,
      "code": "<IconTabFilter text=\"{i18n>tab.parameters}\" key=\"parameters\" icon=\"sap-icon://list\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 308,
      "code": "<ComboBox selectedKey=\"{parameterType}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 309,
      "code": "<core:Item key=\"input\" text=\"Input\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 310,
      "code": "<core:Item key=\"output\" text=\"Output\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 311,
      "code": "<core:Item key=\"inout\" text=\"Input/Output\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 314,
      "code": "<ComboBox selectedKey=\"{dataType}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 315,
      "code": "<core:Item key=\"varchar\" text=\"VARCHAR\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 316,
      "code": "<core:Item key=\"int\" text=\"INTEGER\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 317,
      "code": "<core:Item key=\"decimal\" text=\"DECIMAL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 318,
      "code": "<core:Item key=\"date\" text=\"DATE\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 319,
      "code": "<core:Item key=\"datetime\" text=\"DATETIME\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 320,
      "code": "<core:Item key=\"boolean\" text=\"BOOLEAN\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 334,
      "code": "<IconTabFilter text=\"{i18n>tab.security}\" key=\"security\" icon=\"sap-icon://shield\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 355,
      "code": "<ComboBox id=\"dataClassificationCombo\" selectedKey=\"{create>/dataClassification}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 356,
      "code": "<core:Item key=\"public\" text=\"Public\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 357,
      "code": "<core:Item key=\"internal\" text=\"Internal\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 358,
      "code": "<core:Item key=\"confidential\" text=\"Confidential\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 359,
      "code": "<core:Item key=\"restricted\" text=\"Restricted\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 131,
      "code": "<!-- SQL Statement Tab -->",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 132,
      "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 136,
      "code": "<!-- SQL Statement Editor -->",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 137,
      "code": "<Label text=\"{i18n>field.sqlStatement}\" required=\"true\" class=\"sapUiSmallMarginBottom\"/>",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 143,
      "code": "value=\"{create>/sqlStatement}\"",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 145,
      "code": "change=\".onSQLStatementChange\"/>",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 383,
      "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 291,
      "code": "<Text text=\"{i18n>field.parameterValue}\"/>",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 313,
      "code": "<Input value=\"{parameterValue}\" placeholder=\"{i18n>placeholder.parameterValue}\"/>",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "unsanitizedQueryInput",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 38,
      "code": "id=\"queryNameInput\"",
      "message": "SQL query input not sanitized",
      "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 222,
      "code": "<!-- Schema Name -->",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 223,
      "code": "<Label text=\"{i18n>field.schemaName}\"/>",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 224,
      "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 225,
      "code": "<!-- Schema options will be loaded dynamically -->",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 218,
      "code": "<!-- Connection String -->",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 219,
      "code": "<Label text=\"{i18n>field.connectionString}\"/>",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 220,
      "code": "<Input id=\"connectionStringInput\" value=\"{create>/connectionString}\" placeholder=\"{i18n>placeholder.connectionString}\" type=\"Password\"/>",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlInjection",
      "subtype": "dynamicQueryBuilding",
      "severity": "CRITICAL",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 235,
      "code": "text=\"{= ${/validation/isValid} ? ${i18n>sqlIsValid} : ${i18n>sqlHasErrors} }\"",
      "message": "Dynamic SQL query building without validation",
      "fix": "Validate and sanitize all SQL components"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 68,
      "code": "selectedKey=\"{/selectedDatabase}\"",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 71,
      "code": "<core:Item key=\"main_db\" text=\"{i18n>mainDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 72,
      "code": "<core:Item key=\"analytics_db\" text=\"{i18n>analyticsDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 73,
      "code": "<core:Item key=\"reporting_db\" text=\"{i18n>reportingDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 74,
      "code": "<core:Item key=\"archive_db\" text=\"{i18n>archiveDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 79,
      "code": "<Select selectedKey=\"{/sqlDialect}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 81,
      "code": "<core:Item key=\"HANA\" text=\"SAP HANA\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 82,
      "code": "<core:Item key=\"POSTGRESQL\" text=\"PostgreSQL\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 83,
      "code": "<core:Item key=\"MYSQL\" text=\"MySQL\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 84,
      "code": "<core:Item key=\"SQLITE\" text=\"SQLite\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 85,
      "code": "<core:Item key=\"ORACLE\" text=\"Oracle\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 86,
      "code": "<core:Item key=\"SQLSERVER\" text=\"SQL Server\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 97,
      "code": "<Label text=\"{i18n>includeSchemaInfo}:\" />",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 98,
      "code": "<CheckBox selected=\"{/includeSchemaInfo}\" />",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 115,
      "code": "<Label text=\"{i18n>sqlQuery}:\" />",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryOptimizer.fragment.xml",
      "line": 18,
      "code": "<IconTabFilter text=\"{i18n>originalQuery}\" icon=\"sap-icon://document\" iconColor=\"Neutral\">",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryOptimizer.fragment.xml",
      "line": 107,
      "code": "<IconTabFilter text=\"{i18n>optimizedQuery}\" icon=\"sap-icon://accelerated\" iconColor=\"Positive\">",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryOptimizer.fragment.xml",
      "line": 112,
      "code": "<Label text=\"{i18n>improvedQuery}:\" />",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "fragment/QueryResults.fragment.xml",
      "line": 24,
      "code": "text=\"{= ${i18n>queryExecutedSuccessfully} + ' ' + ${/resultCount} + ' ' + ${i18n>rowsReturned} }\"",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/QueryResults.fragment.xml",
      "line": 95,
      "code": "<!-- Dynamic columns will be created based on result schema -->",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryResults.fragment.xml",
      "line": 30,
      "code": "text=\"{= ${i18n>queryFailed} + ': ' + ${/errorMessage} }\"",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "manifest.json",
      "line": 70,
      "code": "\"press\": \".extension.a2a.network.agent11.ext.controller.ListReportExt.onRunCompliance\",",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "manifest.json",
      "line": 14,
      "code": "\"uri\": \"https://a2a/agent11/v1/odata/\",",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "manifest.json",
      "line": 182,
      "code": "\"allowedOrigins\": [\"https://*.ondemand.com\"],",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "manifest.json",
      "line": 53,
      "code": "\"pattern\": \":?query:\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "manifest.json",
      "line": 99,
      "code": "\"pattern\": \"ComplianceTasks({key}):?query:\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 19,
      "code": "throw new Error(\"SQL template must be a non-empty string\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLSecurityModule.js",
      "line": 31,
      "code": "throw new Error(\"Parameter count mismatch: expected \" + placeholderCount + \", got \" + parameters.length);",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLSecurityModule.js",
      "line": 119,
      "code": "let query = 'SELECT ' + columns.join(', ') + ' FROM ' + table;",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLSecurityModule.js",
      "line": 172,
      "code": "const query = 'INSERT INTO ' + table + ' (' + columns.join(', ') + ') VALUES (' + placeholders.join(', ') + ')';",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLSecurityModule.js",
      "line": 200,
      "code": "let query = 'UPDATE ' + table + ' SET ' + setClauses.join(', ');",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLSecurityModule.js",
      "line": 250,
      "code": "clauses.push(validColumn + ' IN (' + placeholders + ')');",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLSecurityModule.js",
      "line": 258,
      "code": "clauses.push(validColumn + ' ' + op + ' ?');",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 47,
      "code": "* Sanitize a single parameter value",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 48,
      "code": "* @param {any} value - Parameter value to sanitize",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 51,
      "code": "sanitizeParameter: function(value) {",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 69,
      "code": "throw new Error(\"Invalid number parameter: \" + value);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 79,
      "code": "return this.sanitizeParameter(String(value));",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 251,
      "code": "parameters.push(...value);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 259,
      "code": "parameters.push(value.value);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 264,
      "code": "parameters.push(value);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 93,
      "code": "// Only allow alphanumeric, underscore, and dot (for schema.table)",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 17,
      "code": "createParameterizedQuery: function(template, parameters) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 112,
      "code": "buildSelectQuery: function(options) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 154,
      "code": "buildInsertQuery: function(options) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 182,
      "code": "buildUpdateQuery: function(options) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 217,
      "code": "buildDeleteQuery: function(options) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 290,
      "code": "_generateQueryHash: function(query) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLSecurityModule.js",
      "line": 304,
      "code": "executeQuery: function(parameterizedQuery) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeSQLExecution",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 304,
      "code": "executeQuery: function(parameterizedQuery) {",
      "message": "SQL execution without validation",
      "fix": "Use SQLUtils.validateSQL() before execution"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 7,
      "code": "* SQL Security Module - Prevents SQL injection through parameterized queries",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 12,
      "code": "* Create a parameterized query object",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 14,
      "code": "* @param {array} parameters - Array of parameters to bind",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 17,
      "code": "createParameterizedQuery: function(template, parameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 25,
      "code": "// Validate parameter count",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 26,
      "code": "if (!parameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 27,
      "code": "parameters = [];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 30,
      "code": "if (placeholderCount !== parameters.length) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 31,
      "code": "throw new Error(\"Parameter count mismatch: expected \" + placeholderCount + \", got \" + parameters.length);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 34,
      "code": "// Validate and sanitize parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 35,
      "code": "const sanitizedParams = parameters.map(this.sanitizeParameter.bind(this));",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 39,
      "code": "parameters: sanitizedParams,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 41,
      "code": "isParameterized: true,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 47,
      "code": "* Sanitize a single parameter value",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 48,
      "code": "* @param {any} value - Parameter value to sanitize",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 51,
      "code": "sanitizeParameter: function(value) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 58,
      "code": "// Remove any SQL meta-characters that could break out of parameterization",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 59,
      "code": "// Note: In a proper parameterized query, these should be safe, but we add extra protection",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 69,
      "code": "throw new Error(\"Invalid number parameter: \" + value);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 79,
      "code": "return this.sanitizeParameter(String(value));",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 110,
      "code": "* @returns {object} Parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 120,
      "code": "const parameters = [];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 123,
      "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 146,
      "code": "return this.createParameterizedQuery(query, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 152,
      "code": "* @returns {object} Parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 160,
      "code": "const parameters = [];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 165,
      "code": "parameters.push(data[column]);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 174,
      "code": "return this.createParameterizedQuery(query, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 180,
      "code": "* @returns {object} Parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 188,
      "code": "const parameters = [];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 193,
      "code": "parameters.push(data[column]);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 203,
      "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 209,
      "code": "return this.createParameterizedQuery(query, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 215,
      "code": "* @returns {object} Parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 222,
      "code": "const parameters = [];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 225,
      "code": "const whereClause = this._buildWhereClause(conditions, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 231,
      "code": "return this.createParameterizedQuery(query, parameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 238,
      "code": "_buildWhereClause: function(conditions, parameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 251,
      "code": "parameters.push(...value);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 259,
      "code": "parameters.push(value.value);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 264,
      "code": "parameters.push(value);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 301,
      "code": "* Execute parameterized query (mock for UI5)",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 304,
      "code": "executeQuery: function(parameterizedQuery) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 305,
      "code": "if (!parameterizedQuery || !parameterizedQuery.isParameterized) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 306,
      "code": "throw new Error(\"Only parameterized queries can be executed\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 309,
      "code": "Log.info(\"Executing parameterized query\", {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 310,
      "code": "template: parameterizedQuery.template,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 311,
      "code": "paramCount: parameterizedQuery.parameters.length,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 312,
      "code": "hash: parameterizedQuery.hash",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 99,
      "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 301,
      "code": "* Execute parameterized query (mock for UI5)",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 304,
      "code": "executeQuery: function(parameterizedQuery) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 306,
      "code": "throw new Error(\"Only parameterized queries can be executed\");",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 320,
      "code": "message: \"Query executed successfully\"",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 7,
      "code": "* SQL Security Module - Prevents SQL injection through parameterized queries",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 8,
      "code": "* All SQL operations must go through this module",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 13,
      "code": "* @param {string} template - SQL template with ? placeholders",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 19,
      "code": "throw new Error(\"SQL template must be a non-empty string\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 58,
      "code": "// Remove any SQL meta-characters that could break out of parameterization",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 84,
      "code": "* Validate SQL identifier (table/column name)",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 98,
      "code": "// Check against SQL reserved words",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 272,
      "code": "* Validate SQL operator",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 99,
      "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 301,
      "code": "* Execute parameterized query (mock for UI5)",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 304,
      "code": "executeQuery: function(parameterizedQuery) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 306,
      "code": "throw new Error(\"Only parameterized queries can be executed\");",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 320,
      "code": "message: \"Query executed successfully\"",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 99,
      "code": "const reserved = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'EXECUTE'];",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 301,
      "code": "* Execute parameterized query (mock for UI5)",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 304,
      "code": "executeQuery: function(parameterizedQuery) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 306,
      "code": "throw new Error(\"Only parameterized queries can be executed\");",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLSecurityModule.js",
      "line": 320,
      "code": "message: \"Query executed successfully\"",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 150,
      "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 488,
      "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 568,
      "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 575,
      "code": "errors.push(\"Unmatched single quotes in SQL query\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 578,
      "code": "errors.push(\"Unmatched double quotes in SQL query\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 588,
      "code": "errors.push(\"PostgreSQL uses LIMIT, not TOP\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 592,
      "code": "errors.push(\"SQL Server uses TOP, not LIMIT\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 129,
      "code": "issues.push(\"Dangerous function '\" + func + \"' detected\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 794,
      "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 802,
      "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 820,
      "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 834,
      "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 848,
      "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 387,
      "code": "factors.push(`${tables.length} tables involved`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 394,
      "code": "factors.push(`${joinCount} JOIN operations`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 401,
      "code": "factors.push(`${subqueryCount} nested expressions`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 410,
      "code": "factors.push(`${aggCount} aggregation functions`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 832,
      "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 846,
      "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeParameterUsage",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 844,
      "code": "const createSetClause = function(col) { return col + \" = ?\"; };",
      "message": "SQL parameters concatenated directly",
      "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 450,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 804,
      "code": "parameters: { param1: 'value' },",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 822,
      "code": "parameters: { param1: 'value' },",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 832,
      "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 846,
      "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 905,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "unsanitizedQueryInput",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 88,
      "code": "* Sanitizes SQL input to prevent injection attacks",
      "message": "SQL query input not sanitized",
      "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
    },
    {
      "type": "validation",
      "subtype": "noSQLSyntaxCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "No SQL syntax validation",
      "fix": "Implement SQL syntax validation"
    },
    {
      "type": "errorHandling",
      "subtype": "missingSQLErrorHandling",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "Security issue: errorHandling - missingSQLErrorHandling",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 83,
      "code": "queryHash: this._generateQueryFingerprint(sanitizedSQL)",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 685,
      "code": "_generateQueryFingerprint: function(sql) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unboundedQueries",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "Security issue: resources - unboundedQueries",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 292,
      "code": "const sanitizedQuery = SecurityUtils.escapeHTML(naturalLanguage.trim());",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 128,
      "code": "if (lowerSQL.includes(func + '(')) {",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 794,
      "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 802,
      "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 820,
      "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 834,
      "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 848,
      "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 20,
      "code": "const securityValidation = SecurityUtils.validateSQL(sql, options.parameters, {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 322,
      "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 446,
      "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 447,
      "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 448,
      "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 449,
      "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 450,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 451,
      "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 726,
      "code": "value: SecurityUtils.sanitizeSQLParameter(tableName),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 749,
      "code": "value: SecurityUtils.sanitizeSQLParameter(columnName),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 796,
      "code": "parameters: {},",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 804,
      "code": "parameters: { param1: 'value' },",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 814,
      "code": "parameters: {},",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 822,
      "code": "parameters: { param1: 'value' },",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 832,
      "code": "const createParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 836,
      "code": "parameters: Object.fromEntries(columns.map(createParameterEntry)),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 846,
      "code": "const createUpdateParameterEntry = (col, i) => [`param${i+1}`, 'value'];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 850,
      "code": "parameters: Object.fromEntries(columns.map(createUpdateParameterEntry)),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 901,
      "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type || ''),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 902,
      "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table || ''),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 903,
      "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 904,
      "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 905,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 906,
      "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 932,
      "code": "parameters: { table: pattern.table }",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 936,
      "code": "parameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 944,
      "code": "parameters: { table: pattern.table }",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 948,
      "code": "parameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 956,
      "code": "parameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 964,
      "code": "parameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 126,
      "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 10,
      "code": "* Comprehensive SQL query validation with enhanced security",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 11,
      "code": "* @param {string} sql - The SQL query to validate",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 12,
      "code": "* @param {string} dialect - The SQL dialect (HANA, POSTGRESQL, etc.)",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 16,
      "code": "validateSQL: function (sql, dialect, options) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 20,
      "code": "const securityValidation = SecurityUtils.validateSQL(sql, options.parameters, {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 42,
      "code": "const sanitizedSQL = securityValidation.sanitized;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 45,
      "code": "const syntaxIssues = this._checkEnhancedSyntax(sanitizedSQL, dialect, options);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 54,
      "code": "const performanceSuggestions = this._getEnhancedPerformanceSuggestions(sanitizedSQL, dialect);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 58,
      "code": "const complexityValidation = SecurityUtils.validateQueryComplexity(sanitizedSQL, options.complexityLimits);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 77,
      "code": "sanitized: sanitizedSQL,",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 83,
      "code": "queryHash: this._generateQueryFingerprint(sanitizedSQL)",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 88,
      "code": "* Sanitizes SQL input to prevent injection attacks",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 89,
      "code": "* @param {string} sql - The SQL to sanitize",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "* @returns {string} Sanitized SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 92,
      "code": "sanitizeSQL: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 93,
      "code": "if (!sql) return \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 96,
      "code": "const validation = SecurityUtils.validateSQL(sql);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 104,
      "code": "_checkSecurityVulnerabilities: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 106,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 108,
      "code": "// Check for SQL injection patterns",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 119,
      "code": "if (pattern.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 120,
      "code": "issues.push(\"Potential SQL injection pattern detected\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 128,
      "code": "if (lowerSQL.includes(func + '(')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 138,
      "code": "* Basic SQL syntax validation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 141,
      "code": "_checkBasicSyntax: function (sql, dialect) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 144,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 147,
      "code": "const openParens = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 148,
      "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 150,
      "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 154,
      "code": "if (lowerSQL.includes('select') && !lowerSQL.includes('from') &&",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 155,
      "code": "!lowerSQL.includes('dual') && dialect !== 'HANA') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 160,
      "code": "if ((lowerSQL.includes('update') || lowerSQL.includes('delete')) &&",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 161,
      "code": "!lowerSQL.includes('where')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 172,
      "code": "_getPerformanceSuggestions: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 174,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 177,
      "code": "if (lowerSQL.includes('select *')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 186,
      "code": "if (lowerSQL.includes('like \\'%')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 195,
      "code": "if (/where\\s+\\w+\\s*\\(/i.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 207,
      "code": "* Format SQL query for better readability",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 208,
      "code": "* @param {string} sql - The SQL to format",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 209,
      "code": "* @returns {string} Formatted SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 211,
      "code": "formatSQL: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 212,
      "code": "if (!sql) return \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 214,
      "code": "// Basic SQL formatting",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 215,
      "code": "let formatted = sql",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 246,
      "code": "* Extract table names from SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 247,
      "code": "* @param {string} sql - The SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 250,
      "code": "extractTableNames: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 251,
      "code": "if (!sql) return [];",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 254,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 257,
      "code": "const fromMatches = sql.match(/from\\s+(\\w+)/gi);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 269,
      "code": "const joinMatches = sql.match(/join\\s+(\\w+)/gi);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 322,
      "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 372,
      "code": "* Estimate query complexity based on SQL structure",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 373,
      "code": "* @param {string} sql - The SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 376,
      "code": "estimateComplexity: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 377,
      "code": "if (!sql) return { level: 'Unknown', score: 0, factors: [] };",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 379,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 384,
      "code": "const tables = this.extractTableNames(sql);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 391,
      "code": "const joinCount = (sql.match(/join/gi) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 398,
      "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 406,
      "code": "const includesAggregation = (agg) => lowerSQL.includes(agg);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 414,
      "code": "if (lowerSQL.includes('over(') || lowerSQL.includes('partition by')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 439,
      "code": "* Generate SQL from common patterns",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 441,
      "code": "* @returns {string} Generated SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 443,
      "code": "generateSQLFromPattern: function (pattern) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 444,
      "code": "// Sanitize all pattern components before SQL generation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 446,
      "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 447,
      "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 448,
      "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 449,
      "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 450,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 451,
      "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 454,
      "code": "let generatedSQL = \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 458,
      "code": "generatedSQL = \"SELECT * FROM ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 462,
      "code": "generatedSQL = \"SELECT ? FROM ? WHERE ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 466,
      "code": "generatedSQL = \"SELECT COUNT(*) FROM ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 470,
      "code": "generatedSQL = \"INSERT INTO ? (?) VALUES (?)\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 474,
      "code": "generatedSQL = \"UPDATE ? SET ? WHERE ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 478,
      "code": "generatedSQL = \"DELETE FROM ? WHERE ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 485,
      "code": "// Validate the generated SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 486,
      "code": "const validation = SecurityUtils.validateSQL(generatedSQL);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 488,
      "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 496,
      "code": "* Get SQL dialect-specific syntax information",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 497,
      "code": "* @param {string} dialect - The SQL dialect",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 504,
      "code": "features: ['Column store', 'In-memory processing', 'SQL Script'],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 509,
      "code": "'POSTGRESQL': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 510,
      "code": "name: 'PostgreSQL',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 516,
      "code": "'MYSQL': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 517,
      "code": "name: 'MySQL',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 523,
      "code": "'SQLITE': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 524,
      "code": "name: 'SQLite',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 532,
      "code": "features: ['Advanced analytics', 'Partitioning', 'PL/SQL'],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 537,
      "code": "'SQLSERVER': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 538,
      "code": "name: 'Microsoft SQL Server',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 539,
      "code": "features: ['T-SQL', 'Columnstore indexes', 'In-memory OLTP'],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 559,
      "code": "_checkEnhancedSyntax: function(sql, dialect, options) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 562,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 565,
      "code": "const openParens = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 566,
      "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 568,
      "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 572,
      "code": "const singleQuotes = (sql.match(/'/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 573,
      "code": "const doubleQuotes = (sql.match(/\"/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 575,
      "code": "errors.push(\"Unmatched single quotes in SQL query\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 578,
      "code": "errors.push(\"Unmatched double quotes in SQL query\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 583,
      "code": "if (lowerSQL.includes('dual') && !lowerSQL.includes('sys.dual')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 586,
      "code": "} else if (dialect === 'POSTGRESQL') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 587,
      "code": "if (lowerSQL.includes('limit') && lowerSQL.includes('top')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 588,
      "code": "errors.push(\"PostgreSQL uses LIMIT, not TOP\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 590,
      "code": "} else if (dialect === 'SQLSERVER') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 591,
      "code": "if (lowerSQL.includes('limit') && !lowerSQL.includes('top')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 592,
      "code": "errors.push(\"SQL Server uses TOP, not LIMIT\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 597,
      "code": "if (lowerSQL.includes('truncate table')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 601,
      "code": "if (lowerSQL.includes('with recursive') && dialect !== 'POSTGRESQL') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 612,
      "code": "_getEnhancedPerformanceSuggestions: function(sql, dialect) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 614,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 617,
      "code": "if (lowerSQL.includes('select *')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 627,
      "code": "if (lowerSQL.includes(\"like '%\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 637,
      "code": "if (/where\\s+\\w*\\s*\\(/i.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 647,
      "code": "if ((sql.match(/\\bor\\b/gi) || []).length > 2) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 657,
      "code": "if (lowerSQL.includes('in (select') && !lowerSQL.includes('exists')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 668,
      "code": "if (lowerSQL.includes('group by') && !lowerSQL.includes('order by')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 685,
      "code": "_generateQueryFingerprint: function(sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 686,
      "code": "// Normalize SQL for fingerprinting",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 687,
      "code": "const normalized = sql",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 726,
      "code": "value: SecurityUtils.sanitizeSQLParameter(tableName),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 749,
      "code": "value: SecurityUtils.sanitizeSQLParameter(columnName),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 774,
      "code": "* Generate secure SQL templates based on intent and entities",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 777,
      "code": "_generateSecureSQLTemplates: function(intent, entities, context) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 794,
      "code": "sql: \"SELECT \" + (columns.length ? columns.join(', ') : '*') + \" FROM \" + primaryTable,",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 802,
      "code": "sql: \"SELECT \" + columns[0] + \" FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 812,
      "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable,",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 820,
      "code": "sql: \"SELECT COUNT(*) FROM \" + primaryTable + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 834,
      "code": "sql: \"INSERT INTO \" + primaryTable + \" (\" + columns.join(', ') + \") VALUES (\" + placeholders + \")\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 848,
      "code": "sql: \"UPDATE \" + primaryTable + \" SET \" + setClause + \" WHERE \" + columns[0] + \" = ?\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 887,
      "code": "* Sanitize pattern for SQL generation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 901,
      "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type || ''),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 902,
      "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table || ''),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 903,
      "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 904,
      "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 905,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 906,
      "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 925,
      "code": "* Generate secure SQL template",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 126,
      "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 115,
      "code": "/sp_executesql/i",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 126,
      "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 65,
      "code": "Log.error(\"Secure SQL function call failed\", error);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 91,
      "code": "errors: [\"SQL query must be a non-empty string\"],",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 164,
      "code": "{ pattern: /mysql\\./gi, penalty: 25, message: \"MySQL system database access\" },",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 191,
      "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 244,
      "code": "detectedPatterns: criticalPatterns.filter(p => p.pattern.test(sql)).map(p => p.message)",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 806,
      "code": "Log.error(\"SQL WebSocket error\", error);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 814,
      "code": "// Additional validation for SQL-related messages",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 191,
      "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 198,
      "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 231,
      "code": "errors.push(\"Operation '\" + firstWord + \"' is not allowed in this context\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 337,
      "code": "errors.push(\"Parameter '\" + key + \"' exceeds maximum length\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 352,
      "code": "errors.push(\"Parameter '\" + key + \"' should be numeric or UUID format\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 359,
      "code": "errors.push(\"Parameter '\" + key + \"' should be valid email format\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 373,
      "code": "errors.push(\"Parameter '\" + key + \"' must be a finite number\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 413,
      "code": "processedQuery = processedQuery.replace(new RegExp(\":\" + key + \"\\\\b\", 'g'), placeholder);",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 477,
      "code": "const key = \"rateLimit_\" + userId + \"_\" + operation;",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 498,
      "code": "Log.warning(\"Rate limit exceeded for user \" + userId + \" operation \" + operation);",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 982,
      "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 1005,
      "code": "issues.push(\"Too many joins (\" + totalJoins + \", limit: \" + limits.maxJoins + \")\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 1026,
      "code": "issues.push(\"Too many subqueries (\" + subqueryCount + \", limit: \" + limits.maxSubqueries + \")\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 1030,
      "code": "issues.push(\"Query nesting too deep (\" + maxDepth + \" levels)\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 1042,
      "code": "issues.push(\"Too many UNION operations (\" + unionCount + \", limit: \" + limits.maxUnions + \")\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 1058,
      "code": "issues.push(\"Too many tables referenced (\" + tableCount + \", limit: \" + limits.maxTables + \")\");",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeParameterUsage",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 412,
      "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
      "message": "SQL parameters concatenated directly",
      "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeParameterUsage",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 1166,
      "code": "baseTime *= (1 + complexity / 50);",
      "message": "SQL parameters concatenated directly",
      "fix": "Use SQLUtils.sanitizeSQL() for all parameters"
    },
    {
      "type": "csrf",
      "subtype": "missingCSRFToken",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 72,
      "code": "oModel.callFunction(sFunctionName, secureParams);",
      "message": "Missing CSRF token in SQL operation",
      "fix": "Add CSRF token to all SQL operation requests"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 29,
      "code": "reject(new Error('Failed to fetch CSRF token: ' + error));",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 477,
      "code": "const key = \"rateLimit_\" + userId + \"_\" + operation;",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 198,
      "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 301,
      "code": "Object.entries(parameters).forEach(([key, value]) => {",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 302,
      "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 331,
      "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 393,
      "code": "value: this.sanitizeSQLParameter(value),",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 407,
      "code": "Object.entries(parameters).forEach(([key, value]) => {",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 408,
      "code": "const paramType = this._detectParameterType(value);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 426,
      "code": "_detectParameterType: function(value) {",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "noSQLSyntaxCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "No SQL syntax validation",
      "fix": "Implement SQL syntax validation"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 118,
      "code": "{ pattern: /;\\s*drop\\s+(table|database|schema)/gi, penalty: 50, message: \"DROP statement injection\" },",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 162,
      "code": "{ pattern: /information_schema/gi, penalty: 30, message: \"Information schema access\" },",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "insecure",
      "subtype": "httpEndpoints",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 845,
      "code": "if (url.startsWith('http://')) {",
      "message": "Insecure HTTP endpoint for database operations",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "httpEndpoints",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 846,
      "code": "secureUrl = url.replace('http://', 'https://');",
      "message": "Insecure HTTP endpoint for database operations",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "unencryptedWebSocket",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 793,
      "code": "if (url.startsWith('ws://')) {",
      "message": "WebSocket connection without encryption",
      "fix": "Use wss:// protocol for SQL operations"
    },
    {
      "type": "insecure",
      "subtype": "unencryptedWebSocket",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 794,
      "code": "secureUrl = url.replace('ws://', 'wss://');",
      "message": "WebSocket connection without encryption",
      "fix": "Use wss:// protocol for SQL operations"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 793,
      "code": "if (url.startsWith('ws://')) {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 794,
      "code": "secureUrl = url.replace('ws://', 'wss://');",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 845,
      "code": "if (url.startsWith('http://')) {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 846,
      "code": "secureUrl = url.replace('http://', 'https://');",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 43,
      "code": "return this.getCSRFToken().then(function(token) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "missingSQLErrorHandling",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "Security issue: errorHandling - missingSQLErrorHandling",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "unencryptedStorage",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 495,
      "code": "sessionStorage.setItem(key, JSON.stringify(rateLimitData));",
      "message": "Security issue: dataExposure - unencryptedStorage",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "unencryptedStorage",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 719,
      "code": "sessionStorage.setItem('sqlAuditLog', JSON.stringify(auditLog));",
      "message": "Security issue: dataExposure - unencryptedStorage",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 275,
      "code": "createParameterizedQuery: function(baseQuery, parameters, options) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 289,
      "code": "query: null,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 316,
      "code": "query: secureQuery.query,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 322,
      "code": "queryHash: this._generateQueryHash(secureQuery.query),",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 402,
      "code": "_generateSecureQuery: function(baseQuery, parameters, options) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 413,
      "code": "processedQuery = processedQuery.replace(new RegExp(\":\" + key + \"\\\\b\", 'g'), placeholder);",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 417,
      "code": "query: processedQuery,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 450,
      "code": "_generateQueryHash: function(query) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 470,
      "code": "query: { maxRequests: 100, window: 3600000 }, // 100 queries per hour",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 517,
      "code": "queryHash: details.queryHash,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 518,
      "code": "queryType: details.queryType,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 545,
      "code": "validateNaturalLanguageQuery: function(naturalQuery) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 958,
      "code": "validateQueryComplexity: function(sql, limits) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 965,
      "code": "maxQueryLength: 10000,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 971,
      "code": "return { isValid: false, reason: \"No SQL provided\", complexity: 0, score: 0 };",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 982,
      "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 1026,
      "code": "issues.push(\"Too many subqueries (\" + subqueryCount + \", limit: \" + limits.maxSubqueries + \")\");",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 801,
      "code": "ws.addEventListener('open', function() {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 805,
      "code": "ws.addEventListener('error', function(error) {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 809,
      "code": "ws.addEventListener('message', function(event) {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 853,
      "code": "const originalAddEventListener = eventSource.addEventListener;",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 854,
      "code": "eventSource.addEventListener = function(type, listener, options) {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unclosedConnections",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 798,
      "code": "const ws = new WebSocket(secureUrl);",
      "message": "Security issue: resources - unclosedConnections",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unclosedConnections",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 850,
      "code": "const eventSource = new EventSource(secureUrl);",
      "message": "Security issue: resources - unclosedConnections",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unboundedQueries",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "Security issue: resources - unboundedQueries",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 726,
      "code": "* Safely escape HTML content",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 730,
      "code": "escapeHTML: function(content) {",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 929,
      "code": "return this.escapeHTML(result);",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 937,
      "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 949,
      "code": "return this.escapeHTML(String(result));",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 191,
      "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 412,
      "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 982,
      "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 39,
      "code": "* @param {object} mParameters - Parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 42,
      "code": "secureCallFunction: function(oModel, sFunctionName, mParameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 44,
      "code": "const secureParams = Object.assign({}, mParameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 80,
      "code": "* @param {object} params - Query parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 183,
      "code": "// Advanced parameter validation",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 191,
      "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 196,
      "code": "// Check for excessive parameter length",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 198,
      "code": "warnings.push(\"Parameter '\" + key + \"' is unusually long (\" + value.length + \" characters)\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 205,
      "code": "// Check for proper parameterization",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 207,
      "code": "const hasParameters = /[?$:]\\w*|\\{\\w+\\}/g.test(sanitized);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 209,
      "code": "if (hasLiterals && !hasParameters && !options.allowLiterals) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 210,
      "code": "warnings.push(\"SQL contains string literals - consider using parameterized queries\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 249,
      "code": "* Sanitize SQL parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 250,
      "code": "* @param {any} param - Parameter to sanitize",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 251,
      "code": "* @returns {any} Sanitized parameter",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 253,
      "code": "sanitizeSQLParameter: function(param) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 269,
      "code": "* Create secure parameterized query with advanced templates",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 271,
      "code": "* @param {object} parameters - Parameters to bind",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 275,
      "code": "createParameterizedQuery: function(baseQuery, parameters, options) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 278,
      "code": "const validation = this.validateSQL(baseQuery, parameters, {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 290,
      "code": "parameters: null,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 296,
      "code": "// Advanced parameter sanitization and validation",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 298,
      "code": "const parameterErrors = [];",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 300,
      "code": "if (parameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 301,
      "code": "Object.entries(parameters).forEach(([key, value]) => {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 302,
      "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 306,
      "code": "parameterErrors.push(...sanitized.errors);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 311,
      "code": "// Generate secure query with proper parameter binding",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 315,
      "code": "isValid: parameterErrors.length === 0,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 317,
      "code": "parameters: sanitizedParams,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 318,
      "code": "errors: parameterErrors,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 323,
      "code": "parameterTypes: secureQuery.parameterTypes",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 328,
      "code": "* Advanced parameter sanitization",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 331,
      "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 335,
      "code": "// Check parameter length limits",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 336,
      "code": "if (value.length > (options.maxParameterLength || 1000)) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 337,
      "code": "errors.push(\"Parameter '\" + key + \"' exceeds maximum length\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 348,
      "code": "// Additional validation for specific parameter types",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 350,
      "code": "// ID parameters should be numeric or UUID format",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 352,
      "code": "errors.push(\"Parameter '\" + key + \"' should be numeric or UUID format\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 359,
      "code": "errors.push(\"Parameter '\" + key + \"' should be valid email format\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 370,
      "code": "// Handle other parameter types",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 373,
      "code": "errors.push(\"Parameter '\" + key + \"' must be a finite number\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 393,
      "code": "value: this.sanitizeSQLParameter(value),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 399,
      "code": "* Generate secure query with proper parameter binding",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 402,
      "code": "_generateSecureQuery: function(baseQuery, parameters, options) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 403,
      "code": "const parameterTypes = {};",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 406,
      "code": "// Replace named parameters with positional parameters for better security",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 407,
      "code": "Object.entries(parameters).forEach(([key, value]) => {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 408,
      "code": "const paramType = this._detectParameterType(value);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 409,
      "code": "parameterTypes[key] = paramType;",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 412,
      "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 418,
      "code": "parameterTypes: parameterTypes",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 423,
      "code": "* Detect parameter data type for proper binding",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 426,
      "code": "_detectParameterType: function(value) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 523,
      "code": "parameterCount: details.parameterCount,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 736,
      "code": "* Validate database connection parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 36,
      "code": "* Safely execute OData function with CSRF protection",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 123,
      "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 464,
      "code": "* @param {string} operation - Operation type (query, execute, etc.)",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 471,
      "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 581,
      "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 736,
      "code": "* Validate database connection parameters",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 737,
      "code": "* @param {object} connection - Connection configuration",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 740,
      "code": "validateConnection: function(connection) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 743,
      "code": "if (!connection) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 746,
      "code": "errors: [\"Connection configuration is required\"]",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 753,
      "code": "if (!connection[field]) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 758,
      "code": "// Check for secure connection",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 759,
      "code": "if (connection.host && !connection.ssl && !connection.host.includes('localhost')) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 760,
      "code": "errors.push(\"SSL/TLS encryption should be enabled for external connections\");",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 764,
      "code": "if (connection.password && connection.password.length < 8) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 769,
      "code": "if (connection.host) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 771,
      "code": "if (!hostPattern.test(connection.host)) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 783,
      "code": "* Create secure WebSocket connection for SQL operations",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 785,
      "code": "* @param {object} options - Connection options",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 802,
      "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 57,
      "code": "Log.info(\"Secure SQL function call successful\", sFunctionName);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 65,
      "code": "Log.error(\"Secure SQL function call failed\", error);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 78,
      "code": "* Advanced SQL injection prevention and validation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 79,
      "code": "* @param {string} sql - SQL query to validate",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 84,
      "code": "validateSQL: function(sql, params, options) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 87,
      "code": "if (!sql || typeof sql !== 'string') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 91,
      "code": "errors: [\"SQL query must be a non-empty string\"],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 99,
      "code": "let sanitized = sql.trim();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 116,
      "code": "// Dangerous SQL injection patterns",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 152,
      "code": "{ pattern: /--[^\\r\\n]*/gi, penalty: 20, message: \"SQL comment detected\" },",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 164,
      "code": "{ pattern: /mysql\\./gi, penalty: 25, message: \"MySQL system database access\" },",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 165,
      "code": "{ pattern: /pg_catalog/gi, penalty: 25, message: \"PostgreSQL catalog access\" },",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 173,
      "code": "{ pattern: /pg_sleep\\s*\\(/gi, penalty: 35, message: \"PostgreSQL sleep detected\" }",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 191,
      "code": "errors.push(\"SQL injection in parameter '\" + key + \"': \" + message);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 210,
      "code": "warnings.push(\"SQL contains string literals - consider using parameterized queries\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 241,
      "code": "original: sql,",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 244,
      "code": "detectedPatterns: criticalPatterns.filter(p => p.pattern.test(sql)).map(p => p.message)",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 249,
      "code": "* Sanitize SQL parameters",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 253,
      "code": "sanitizeSQLParameter: function(param) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 259,
      "code": ".replace(/--/g, '') // Remove SQL comments",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 270,
      "code": "* @param {string} baseQuery - Base SQL query with placeholders",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 278,
      "code": "const validation = this.validateSQL(baseQuery, parameters, {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 302,
      "code": "const sanitized = this.sanitizeSQLParameterAdvanced(key, value, options);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 331,
      "code": "sanitizeSQLParameterAdvanced: function(key, value, options) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 393,
      "code": "value: this.sanitizeSQLParameter(value),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 412,
      "code": "const placeholder = options.databaseType === 'postgresql' ? \"$\" + Object.keys(parameterTypes).length : '?';",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 462,
      "code": "* Rate limiting for SQL operations",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 505,
      "code": "* Audit logging for SQL operations",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 534,
      "code": "Log.info(\"SQL Audit Log\", JSON.stringify(auditEntry));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 711,
      "code": "const auditLog = JSON.parse(sessionStorage.getItem('sqlAuditLog')) || [];",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 719,
      "code": "sessionStorage.setItem('sqlAuditLog', JSON.stringify(auditLog));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 783,
      "code": "* Create secure WebSocket connection for SQL operations",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 802,
      "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 806,
      "code": "Log.error(\"SQL WebSocket error\", error);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 811,
      "code": "// Validate incoming SQL data",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 814,
      "code": "// Additional validation for SQL-related messages",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 815,
      "code": "if (data.type && data.type.includes('SQL') || data.type.includes('QUERY')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 816,
      "code": "const validation = this.validateSQL(data.sql || '');",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 818,
      "code": "Log.warning(\"Invalid SQL received via WebSocket\", validation.errors);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 835,
      "code": "* Create secure EventSource for SQL monitoring",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 861,
      "code": "// SQL-specific validation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 862,
      "code": "if (data.sql || data.query) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 863,
      "code": "const validation = this.validateSQL(data.sql || data.query);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 865,
      "code": "Log.warning(\"Invalid SQL received via EventSource\", validation.errors);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 887,
      "code": "* Check user authorization for SQL operations",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 892,
      "code": "checkSQLAuth: function(operation, resource) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 894,
      "code": "// SQL-specific authorization checks",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 919,
      "code": "* Sanitize SQL query result for display",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 923,
      "code": "sanitizeSQLResult: function(result) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 937,
      "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 946,
      "code": "return result.map(item => this.sanitizeSQLResult(item));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 954,
      "code": "* @param {string} sql - SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 958,
      "code": "validateQueryComplexity: function(sql, limits) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 970,
      "code": "if (!sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 971,
      "code": "return { isValid: false, reason: \"No SQL provided\", complexity: 0, score: 0 };",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 974,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 981,
      "code": "if (sql.length > limits.maxQueryLength) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 982,
      "code": "issues.push(\"Query too long (\" + sql.length + \" chars, limit: \" + limits.maxQueryLength + \")\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 998,
      "code": "const matches = (sql.match(pattern) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1014,
      "code": "for (let char of sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1020,
      "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1035,
      "code": "const unionCount = (sql.match(/\\bunion\\b/gi) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1036,
      "code": "const unionAllCount = (sql.match(/\\bunion\\s+all\\b/gi) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1049,
      "code": "while ((match = tablePattern.exec(sql)) !== null) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1065,
      "code": "const hasWhere = /\\bwhere\\b/gi.test(sql);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1088,
      "code": "const matches = (sql.match(pattern) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1096,
      "code": "if (!limits.allowRecursiveCTE && /\\bwith\\s+recursive\\b/gi.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 1114,
      "code": "if (pattern.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 36,
      "code": "* Safely execute OData function with CSRF protection",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 123,
      "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 464,
      "code": "* @param {string} operation - Operation type (query, execute, etc.)",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 471,
      "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 581,
      "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 36,
      "code": "* Safely execute OData function with CSRF protection",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 123,
      "code": "{ pattern: /execute\\s*\\(/gi, penalty: 50, message: \"EXECUTE function detected\" },",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 125,
      "code": "{ pattern: /sp_executesql/gi, penalty: 45, message: \"Dynamic SQL execution detected\" },",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 464,
      "code": "* @param {string} operation - Operation type (query, execute, etc.)",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 471,
      "code": "execute: { maxRequests: 50, window: 3600000 }, // 50 executions per hour",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 581,
      "code": "{ pattern: /execute|exec|command/gi, penalty: 20, message: \"Command execution terms detected\" },",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "compliance",
      "message": "Missing crossNavigation in manifest.json",
      "severity": "MEDIUM"
    }
  ]
}