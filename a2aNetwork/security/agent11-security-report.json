{
  "summary": {
    "total": 808,
    "critical": 17,
    "high": 632,
    "medium": 159,
    "low": 0
  },
  "byType": {
    "auth": [
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 32,
        "code": "onCreateQuery: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingDatabaseAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 249,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSQLStatistics\", {",
        "message": "Security issue: auth - missingDatabaseAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 52,
        "code": "onCreateSQLQuery: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 587,
        "code": "this._handleOptimizationUpdate(event.data);",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 718,
        "code": "_handleOptimizationUpdate: function(data) {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 719,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationUpdate\", [data.improvement]));",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingDatabaseAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 277,
        "code": "SecurityUtils.secureCallFunction(this.getView().getModel(), \"/CreateSQLQuery\", {",
        "message": "Security issue: auth - missingDatabaseAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 26,
        "code": "<IconTabFilter text=\"{i18n>tab.basicInfo}\" key=\"basic\" icon=\"sap-icon://detail-view\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 61,
        "code": "selectedKey=\"{create>/queryType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 67,
        "code": "<core:Item key=\"select\" text=\"{i18n>query.select}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 68,
        "code": "<core:Item key=\"insert\" text=\"{i18n>query.insert}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 69,
        "code": "<core:Item key=\"update\" text=\"{i18n>query.update}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 70,
        "code": "<core:Item key=\"delete\" text=\"{i18n>query.delete}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"create\" text=\"{i18n>query.create}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"alter\" text=\"{i18n>query.alter}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"drop\" text=\"{i18n>query.drop}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"procedure\" text=\"{i18n>query.procedure}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 75,
        "code": "<core:Item key=\"function\" text=\"{i18n>query.function}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 76,
        "code": "<core:Item key=\"trigger\" text=\"{i18n>query.trigger}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 77,
        "code": "<core:Item key=\"view\" text=\"{i18n>query.view}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 78,
        "code": "<core:Item key=\"index\" text=\"{i18n>query.index}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 85,
        "code": "selectedKey=\"{create>/databaseType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 91,
        "code": "<core:Item key=\"mysql\" text=\"{i18n>db.mysql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 92,
        "code": "<core:Item key=\"postgresql\" text=\"{i18n>db.postgresql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 93,
        "code": "<core:Item key=\"oracle\" text=\"{i18n>db.oracle}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 94,
        "code": "<core:Item key=\"sqlserver\" text=\"{i18n>db.sqlserver}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 95,
        "code": "<core:Item key=\"sqlite\" text=\"{i18n>db.sqlite}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 96,
        "code": "<core:Item key=\"hana\" text=\"{i18n>db.hana}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 97,
        "code": "<core:Item key=\"db2\" text=\"{i18n>db.db2}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 98,
        "code": "<core:Item key=\"snowflake\" text=\"{i18n>db.snowflake}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 99,
        "code": "<core:Item key=\"bigquery\" text=\"{i18n>db.bigquery}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 106,
        "code": "selectedKey=\"{create>/priority}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 108,
        "code": "<SegmentedButtonItem key=\"low\" text=\"{i18n>priority.low}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 109,
        "code": "<SegmentedButtonItem key=\"medium\" text=\"{i18n>priority.medium}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 110,
        "code": "<SegmentedButtonItem key=\"high\" text=\"{i18n>priority.high}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 111,
        "code": "<SegmentedButtonItem key=\"critical\" text=\"{i18n>priority.critical}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 119,
        "code": "selectedKey=\"{create>/complexity}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 120,
        "code": "<core:Item key=\"simple\" text=\"{i18n>complexity.simple}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 121,
        "code": "<core:Item key=\"moderate\" text=\"{i18n>complexity.moderate}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 122,
        "code": "<core:Item key=\"complex\" text=\"{i18n>complexity.complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 123,
        "code": "<core:Item key=\"very_complex\" text=\"{i18n>complexity.very_complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 152,
        "code": "<ComboBox id=\"queryLanguageCombo\" selectedKey=\"{create>/queryLanguage}\" selectionChange=\".onQueryLanguageChange\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 153,
        "code": "<core:Item key=\"sql\" text=\"SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 154,
        "code": "<core:Item key=\"tsql\" text=\"T-SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 155,
        "code": "<core:Item key=\"plsql\" text=\"PL/SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 156,
        "code": "<core:Item key=\"mysql\" text=\"MySQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 157,
        "code": "<core:Item key=\"postgresql\" text=\"PostgreSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 158,
        "code": "<core:Item key=\"nosql\" text=\"NoSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 175,
        "code": "<ComboBox id=\"indexUsageCombo\" selectedKey=\"{create>/indexUsage}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 176,
        "code": "<core:Item key=\"auto\" text=\"{i18n>indexUsage.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 177,
        "code": "<core:Item key=\"force\" text=\"{i18n>indexUsage.force}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 178,
        "code": "<core:Item key=\"hint\" text=\"{i18n>indexUsage.hint}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 179,
        "code": "<core:Item key=\"none\" text=\"{i18n>indexUsage.none}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 209,
        "code": "<IconTabFilter text=\"{i18n>tab.databaseConfig}\" key=\"database\" icon=\"sap-icon://database\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 242,
        "code": "<ComboBox id=\"transactionModeCombo\" selectedKey=\"{create>/transactionMode}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 243,
        "code": "<core:Item key=\"auto\" text=\"{i18n>transaction.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 244,
        "code": "<core:Item key=\"manual\" text=\"{i18n>transaction.manual}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 245,
        "code": "<core:Item key=\"read_only\" text=\"{i18n>transaction.read_only}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 246,
        "code": "<core:Item key=\"read_write\" text=\"{i18n>transaction.read_write}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 251,
        "code": "<ComboBox id=\"isolationLevelCombo\" selectedKey=\"{create>/isolationLevel}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 252,
        "code": "<core:Item key=\"read_uncommitted\" text=\"{i18n>isolation.read_uncommitted}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 253,
        "code": "<core:Item key=\"read_committed\" text=\"{i18n>isolation.read_committed}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 254,
        "code": "<core:Item key=\"repeatable_read\" text=\"{i18n>isolation.repeatable_read}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 255,
        "code": "<core:Item key=\"serializable\" text=\"{i18n>isolation.serializable}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 268,
        "code": "<IconTabFilter text=\"{i18n>tab.parameters}\" key=\"parameters\" icon=\"sap-icon://list\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 308,
        "code": "<ComboBox selectedKey=\"{parameterType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 309,
        "code": "<core:Item key=\"input\" text=\"Input\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 310,
        "code": "<core:Item key=\"output\" text=\"Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 311,
        "code": "<core:Item key=\"inout\" text=\"Input/Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 314,
        "code": "<ComboBox selectedKey=\"{dataType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 315,
        "code": "<core:Item key=\"varchar\" text=\"VARCHAR\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 316,
        "code": "<core:Item key=\"int\" text=\"INTEGER\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 317,
        "code": "<core:Item key=\"decimal\" text=\"DECIMAL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 318,
        "code": "<core:Item key=\"date\" text=\"DATE\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 319,
        "code": "<core:Item key=\"datetime\" text=\"DATETIME\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 320,
        "code": "<core:Item key=\"boolean\" text=\"BOOLEAN\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 334,
        "code": "<IconTabFilter text=\"{i18n>tab.security}\" key=\"security\" icon=\"sap-icon://shield\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 355,
        "code": "<ComboBox id=\"dataClassificationCombo\" selectedKey=\"{create>/dataClassification}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 356,
        "code": "<core:Item key=\"public\" text=\"Public\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 357,
        "code": "<core:Item key=\"internal\" text=\"Internal\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 358,
        "code": "<core:Item key=\"confidential\" text=\"Confidential\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 359,
        "code": "<core:Item key=\"restricted\" text=\"Restricted\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 68,
        "code": "selectedKey=\"{/selectedDatabase}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"main_db\" text=\"{i18n>mainDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"analytics_db\" text=\"{i18n>analyticsDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"reporting_db\" text=\"{i18n>reportingDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"archive_db\" text=\"{i18n>archiveDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 79,
        "code": "<Select selectedKey=\"{/sqlDialect}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 81,
        "code": "<core:Item key=\"HANA\" text=\"SAP HANA\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 82,
        "code": "<core:Item key=\"POSTGRESQL\" text=\"PostgreSQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 83,
        "code": "<core:Item key=\"MYSQL\" text=\"MySQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 84,
        "code": "<core:Item key=\"SQLITE\" text=\"SQLite\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 85,
        "code": "<core:Item key=\"ORACLE\" text=\"Oracle\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 86,
        "code": "<core:Item key=\"SQLSERVER\" text=\"SQL Server\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 29,
        "code": "reject(new Error('Failed to fetch CSRF token: ' + error));",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      }
    ],
    "validation": [
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 58,
        "code": "this._loadSchemaData();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 62,
        "code": "this._loadSchemaData();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 124,
        "code": "// Schema Explorer Action",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 125,
        "code": "onSchemaExplorer: function() {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 126,
        "code": "if (!this._schemaExplorer) {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 129,
        "code": "name: \"a2a.network.agent11.ext.fragment.SchemaExplorer\",",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 132,
        "code": "this._schemaExplorer = oDialog;",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 134,
        "code": "this._loadSchemaStructure();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 138,
        "code": "this._loadSchemaStructure();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 139,
        "code": "this._schemaExplorer.open();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 259,
        "code": "_loadSchemaData: function() {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 262,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetDatabaseSchemas\", {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 264,
        "code": "this._updateSchemaData(data);",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 267,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaData\"));",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 311,
        "code": "_loadSchemaStructure: function() {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 314,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSchemaStructure\", {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 316,
        "code": "this._updateSchemaTree(data);",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 319,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaStructure\"));",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 393,
        "code": "_updateSchemaData: function(data) {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 394,
        "code": "// Update schema dropdown options",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 409,
        "code": "_updateSchemaTree: function(data) {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 410,
        "code": "// Update schema tree structure",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 33,
        "code": "sqlStatement: \"\",",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 176,
        "code": "onSQLStatementChange: function(oEvent) {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 261,
        "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 310,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 316,
        "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 341,
        "code": "oData.sqlStatement = \"\";",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 363,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 369,
        "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 378,
        "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 404,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 417,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 444,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 471,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 484,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 534,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 71,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 177,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 39,
        "code": "schemaName: \"\",",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 267,
        "code": "schemaName: oData.schemaName,",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 131,
        "code": "<!-- SQL Statement Tab -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 136,
        "code": "<!-- SQL Statement Editor -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 137,
        "code": "<Label text=\"{i18n>field.sqlStatement}\" required=\"true\" class=\"sapUiSmallMarginBottom\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 143,
        "code": "value=\"{create>/sqlStatement}\"",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 145,
        "code": "change=\".onSQLStatementChange\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 291,
        "code": "<Text text=\"{i18n>field.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 313,
        "code": "<Input value=\"{parameterValue}\" placeholder=\"{i18n>placeholder.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 38,
        "code": "id=\"queryNameInput\"",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 222,
        "code": "<!-- Schema Name -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 223,
        "code": "<Label text=\"{i18n>field.schemaName}\"/>",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 225,
        "code": "<!-- Schema options will be loaded dynamically -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 97,
        "code": "<Label text=\"{i18n>includeSchemaInfo}:\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 98,
        "code": "<CheckBox selected=\"{/includeSchemaInfo}\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 95,
        "code": "<!-- Dynamic columns will be created based on result schema -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 419,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 63,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 232,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 233,
        "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 148,
        "code": "/information_schema/gi,",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      }
    ],
    "insecure": [
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 200,
        "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/sql/updates', {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 365,
        "code": "if (url.startsWith('http://')) {",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 366,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 313,
        "code": "if (url.startsWith('ws://')) {",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 314,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 313,
        "code": "if (url.startsWith('ws://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 314,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 365,
        "code": "if (url.startsWith('http://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 366,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      }
    ],
    "errorHandling": [
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 19,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 38,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 55,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 74,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 93,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 112,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 131,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 60,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 427,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 454,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 494,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 519,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 544,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 43,
        "code": "return this.getCSRFToken().then(function(token) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      }
    ],
    "dataExposure": [
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 32,
        "code": "onCreateQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 49,
        "code": "onQueryBuilder: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 144,
        "code": "onQueryOptimizer: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 226,
        "code": "case 'QUERY_STARTED':",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 229,
        "code": "case 'QUERY_COMPLETED':",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 233,
        "code": "case 'QUERY_FAILED':",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 332,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 352,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 370,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 382,
        "code": "_refreshQueryData: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 21,
        "code": "queryName: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 23,
        "code": "queryType: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 27,
        "code": "queryNameState: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 28,
        "code": "queryNameStateText: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 29,
        "code": "queryTypeState: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 30,
        "code": "queryTypeStateText: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 34,
        "code": "queryLanguage: \"sql\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 52,
        "code": "onCreateSQLQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 70,
        "code": "onQueryNameChange: function(oEvent) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 89,
        "code": "onQueryTypeChange: function(oEvent) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 208,
        "code": "onQueryLanguageChange: function(oEvent) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 222,
        "code": "_estimateQueryCost: function(sql) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 237,
        "code": "onCancelCreateSQLQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 242,
        "code": "onConfirmCreateSQLQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 255,
        "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 257,
        "code": "queryType: oData.queryType,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 262,
        "code": "queryLanguage: oData.queryLanguage,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 289,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.createQueryFailed\") + \": \" + errorMsg);",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 400,
        "code": "onValidateQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 413,
        "code": "onOptimizeQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 467,
        "code": "onFormatQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 530,
        "code": "onScheduleQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 559,
        "code": "_initializeQueryMonitoring: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 610,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 622,
        "code": "_validateQuery: function(oContext) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 630,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 642,
        "code": "_formatQuery: function(oContext) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 648,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 666,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 683,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 694,
        "code": "_updateQueryProgress: function(data) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 703,
        "code": "_handleQueryCompleted: function(data) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 713,
        "code": "_handleQueryError: function(data) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 723,
        "code": "_refreshQueryData: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 38,
        "code": "connectionString: \"\",",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 266,
        "code": "connectionString: oData.connectionString,",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 218,
        "code": "<!-- Connection String -->",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 219,
        "code": "<Label text=\"{i18n>field.connectionString}\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 220,
        "code": "<Input id=\"connectionStringInput\" value=\"{create>/connectionString}\" placeholder=\"{i18n>placeholder.connectionString}\" type=\"Password\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 115,
        "code": "<Label text=\"{i18n>sqlQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 18,
        "code": "<IconTabFilter text=\"{i18n>originalQuery}\" icon=\"sap-icon://document\" iconColor=\"Neutral\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 107,
        "code": "<IconTabFilter text=\"{i18n>optimizedQuery}\" icon=\"sap-icon://accelerated\" iconColor=\"Positive\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 112,
        "code": "<Label text=\"{i18n>improvedQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 30,
        "code": "text=\"{= ${i18n>queryFailed} + ': ' + ${/errorMessage} }\"",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 217,
        "code": "createParameterizedQuery: function(baseQuery, parameters) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 224,
        "code": "query: null,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 239,
        "code": "query: validation.sanitized,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "validateQueryComplexity: function(sql) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "resources": [
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 82,
        "code": "this._connectionManager.open();",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 574,
        "code": "this._eventSource.addEventListener('query-progress', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 578,
        "code": "this._eventSource.addEventListener('query-completed', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 582,
        "code": "this._eventSource.addEventListener('query-error', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 586,
        "code": "this._eventSource.addEventListener('optimization-update', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 321,
        "code": "ws.addEventListener('open', function() {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 325,
        "code": "ws.addEventListener('error', function(error) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 329,
        "code": "ws.addEventListener('message', function(event) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 373,
        "code": "const originalAddEventListener = eventSource.addEventListener;",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 374,
        "code": "eventSource.addEventListener = function(type, listener, options) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 318,
        "code": "const ws = new WebSocket(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 370,
        "code": "const eventSource = new EventSource(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      }
    ],
    "sapFiori": [
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 149,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 162,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 184,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 227,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecutionStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 234,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 254,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingStatistics\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 267,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 280,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingConnectionData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 293,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingTemplateData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 306,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingPerformanceData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 319,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaStructure\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 328,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 335,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryOptimized\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 339,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.optimizationFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 348,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.batchExecutionStarted\", [aQueryIds.length]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 355,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.batchExecutionCompleted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 359,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.batchExecutionFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 373,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidated\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 377,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.validationFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 10,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ListReportExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 234,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 282,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryCreated\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 289,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.createQueryFailed\") + \": \" + errorMsg);",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 296,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.queryNameRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 301,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.queryTypeRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 306,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.databaseTypeRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 318,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 351,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.notAuthorized\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 359,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryAlreadyExecuting\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 372,
        "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 381,
        "code": "this.getResourceBundle().getText(\"error.queryTooComplex\", [complexity.issues.join(', ')])",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 418,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 472,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 485,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 510,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noResultsToExport\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 535,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 606,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecutionStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 617,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(error.message)]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 626,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidationStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 633,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidated\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 637,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.validationFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 651,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryFormatted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 655,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.formattingFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 672,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingOptimizationData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 689,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.generatingExplainPlan\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 709,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.executionCompleted\", [data.executionTime]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 714,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 719,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationUpdate\", [data.improvement]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "hardcodedTexts",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 186,
        "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
        "message": "Security issue: sapFiori - hardcodedTexts",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 11,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ObjectPageExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 288,
        "code": "var errorMsg = SecurityUtils.escapeHTML(error.message || \"Unknown error\");",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 617,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(error.message)]));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 714,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 263,
        "code": "const sanitizedQuery = SecurityUtils.escapeHTML(naturalLanguage.trim());",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 246,
        "code": "* Safely escape HTML content",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 250,
        "code": "escapeHTML: function(content) {",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 449,
        "code": "return this.escapeHTML(result);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 457,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 469,
        "code": "return this.escapeHTML(String(result));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      }
    ],
    "sqlSecurity": [
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 331,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 332,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 351,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 352,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 369,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 370,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 156,
        "code": "// Execute Selected Queries",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 171,
        "code": "this._executeBatchQueries(aSelectedContexts);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 344,
        "code": "_executeBatchQueries: function(aSelectedContexts) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 33,
        "code": "sqlStatement: \"\",",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 176,
        "code": "onSQLStatementChange: function(oEvent) {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 261,
        "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 310,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 316,
        "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 341,
        "code": "oData.sqlStatement = \"\";",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 363,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 369,
        "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 378,
        "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 404,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 417,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 444,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 471,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 484,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 534,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 186,
        "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 71,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 90,
        "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 134,
        "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 177,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 209,
        "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 255,
        "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 256,
        "code": "description: SecurityUtils.sanitizeSQLParameter(oData.description),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 278,
        "code": "urlParameters: oSanitizedData,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 571,
        "code": "const sanitizedQueryId = SecurityUtils.sanitizeSQLParameter(queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 604,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 609,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 624,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 629,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 644,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 647,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 662,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 665,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 679,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 682,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 347,
        "code": "// Execute Query Action",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "dynamicSQLConstruction",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Dynamic SQL construction without validation",
        "fix": "Validate all dynamic SQL components"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 102,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 293,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 415,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 416,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 417,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 418,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 419,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 420,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 100,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 39,
        "code": "* @param {object} mParameters - Parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 42,
        "code": "secureCallFunction: function(oModel, sFunctionName, mParameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 44,
        "code": "const secureParams = Object.assign({}, mParameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 80,
        "code": "* @param {object} params - Query parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 164,
        "code": "// Validate parameters if provided",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 168,
        "code": "// Check for SQL injection in parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 178,
        "code": "// Check for proper parameterization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 180,
        "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 192,
        "code": "* Sanitize SQL parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 193,
        "code": "* @param {any} param - Parameter to sanitize",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 194,
        "code": "* @returns {any} Sanitized parameter",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 196,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 212,
        "code": "* Create secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 214,
        "code": "* @param {object} parameters - Parameters to bind",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 217,
        "code": "createParameterizedQuery: function(baseQuery, parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 225,
        "code": "parameters: null",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 229,
        "code": "// Sanitize all parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 231,
        "code": "if (parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 232,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 233,
        "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 240,
        "code": "parameters: sanitizedParams,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 256,
        "code": "* Validate database connection parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 115,
        "code": "/execute\\s*\\(/gi,",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "dynamicSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Dynamic SQL construction without validation",
        "fix": "Validate all dynamic SQL components"
      }
    ],
    "databaseSecurity": [
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 67,
        "code": "// Connection Manager Action",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 68,
        "code": "onConnectionManager: function() {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 69,
        "code": "if (!this._connectionManager) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 72,
        "code": "name: \"a2a.network.agent11.ext.fragment.ConnectionManager\",",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 75,
        "code": "this._connectionManager = oDialog;",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 77,
        "code": "this._loadConnectionData();",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 81,
        "code": "this._loadConnectionData();",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 82,
        "code": "this._connectionManager.open();",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 211,
        "code": "console.warn(\"WebSocket connection failed, falling back to polling\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 236,
        "code": "case 'CONNECTION_STATUS':",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 237,
        "code": "this._updateConnectionStatus(data.connections);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 272,
        "code": "_loadConnectionData: function() {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 275,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetConnectionStatus\", {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 277,
        "code": "this._updateConnectionData(data);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 280,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingConnectionData\"));",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 397,
        "code": "_updateConnectionData: function(data) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 398,
        "code": "// Update connection status indicators",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 413,
        "code": "_updateConnectionStatus: function(connections) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 414,
        "code": "// Real-time connection status updates",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 38,
        "code": "connectionString: \"\",",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 41,
        "code": "connectionPool: 10,",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 163,
        "code": "oData.connectionPool = 20;",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 266,
        "code": "connectionString: oData.connectionString,",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 269,
        "code": "connectionPool: parseInt(oData.connectionPool) || 10,",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "unencryptedConnections",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 38,
        "code": "connectionString: \"\",",
        "message": "Database connection not encrypted",
        "fix": "Use SSL/TLS for database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "unencryptedConnections",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 266,
        "code": "connectionString: oData.connectionString,",
        "message": "Database connection not encrypted",
        "fix": "Use SSL/TLS for database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionPoolSecurity",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 41,
        "code": "connectionPool: 10,",
        "message": "Connection pool missing security controls",
        "fix": "Add authentication to connection pools"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionPoolSecurity",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 163,
        "code": "oData.connectionPool = 20;",
        "message": "Connection pool missing security controls",
        "fix": "Add authentication to connection pools"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionPoolSecurity",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 269,
        "code": "connectionPool: parseInt(oData.connectionPool) || 10,",
        "message": "Connection pool missing security controls",
        "fix": "Add authentication to connection pools"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 256,
        "code": "* Validate database connection parameters",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 257,
        "code": "* @param {object} connection - Connection configuration",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 260,
        "code": "validateConnection: function(connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 263,
        "code": "if (!connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 266,
        "code": "errors: [\"Connection configuration is required\"]",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 273,
        "code": "if (!connection[field]) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 278,
        "code": "// Check for secure connection",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 279,
        "code": "if (connection.host && !connection.ssl && !connection.host.includes('localhost')) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 280,
        "code": "errors.push(\"SSL/TLS encryption should be enabled for external connections\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 284,
        "code": "if (connection.password && connection.password.length < 8) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 289,
        "code": "if (connection.host) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 291,
        "code": "if (!hostPattern.test(connection.host)) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 303,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 305,
        "code": "* @param {object} options - Connection options",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 322,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      }
    ],
    "queryValidation": [
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 12,
        "code": "// SQL Dashboard Action",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 13,
        "code": "onSQLDashboard: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 14,
        "code": "if (!this._sqlDashboard) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 17,
        "code": "name: \"a2a.network.agent11.ext.fragment.SQLDashboard\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 20,
        "code": "this._sqlDashboard = oDialog;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 27,
        "code": "this._sqlDashboard.open();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 31,
        "code": "// Create New SQL Query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 36,
        "code": "name: \"a2a.network.agent11.ext.fragment.CreateSQLQuery\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 145,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 158,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 180,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 200,
        "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/sql/updates', {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 202,
        "code": "this._handleSQLUpdate(data);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 222,
        "code": "_handleSQLUpdate: function(data) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 248,
        "code": "// Load SQL execution statistics",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 249,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSQLStatistics\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 332,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 352,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 370,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 383,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 156,
        "code": "// Execute Selected Queries",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 171,
        "code": "this._executeBatchQueries(aSelectedContexts);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 344,
        "code": "_executeBatchQueries: function(aSelectedContexts) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 156,
        "code": "// Execute Selected Queries",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 171,
        "code": "this._executeBatchQueries(aSelectedContexts);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 344,
        "code": "_executeBatchQueries: function(aSelectedContexts) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "unsafeQueryExecution",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "Query execution without security checks",
        "fix": "Add security checks before query execution"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 33,
        "code": "sqlStatement: \"\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 34,
        "code": "queryLanguage: \"sql\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 52,
        "code": "onCreateSQLQuery: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 58,
        "code": "name: \"a2a.network.agent11.ext.fragment.CreateSQLQuery\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 144,
        "code": "case \"mysql\":",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 145,
        "code": "oData.dialectVersion = \"MySQL 8.0\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 146,
        "code": "oData.queryLanguage = \"mysql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 148,
        "code": "case \"postgresql\":",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 149,
        "code": "oData.dialectVersion = \"PostgreSQL 14\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 150,
        "code": "oData.queryLanguage = \"postgresql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 154,
        "code": "oData.queryLanguage = \"plsql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 156,
        "code": "case \"sqlserver\":",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 157,
        "code": "oData.dialectVersion = \"SQL Server 2019\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 158,
        "code": "oData.queryLanguage = \"tsql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 162,
        "code": "oData.queryLanguage = \"sql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 166,
        "code": "oData.queryLanguage = \"sql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 176,
        "code": "onSQLStatementChange: function(oEvent) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 181,
        "code": "// Basic SQL validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 183,
        "code": "// Validate SQL with SecurityUtils",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 184,
        "code": "var validation = SecurityUtils.validateSQL(sValue);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 186,
        "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 189,
        "code": "// Estimate complexity based on SQL content",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 190,
        "code": "var upperSQL = sValue.toUpperCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 191,
        "code": "if (upperSQL.includes(\"JOIN\") && upperSQL.includes(\"SUBQUERY\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 193,
        "code": "} else if (upperSQL.includes(\"JOIN\") || upperSQL.includes(\"UNION\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 195,
        "code": "} else if (upperSQL.includes(\"WHERE\") || upperSQL.includes(\"GROUP BY\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 214,
        "code": "var oCodeEditor = this.getView().byId(\"sqlEditor\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 216,
        "code": "oCodeEditor.setType(sValue === \"nosql\" ? \"javascript\" : \"sql\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 222,
        "code": "_estimateQueryCost: function(sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 225,
        "code": "var upperSQL = sql.toUpperCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 227,
        "code": "if (upperSQL.includes(\"JOIN\")) cost += 20;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 228,
        "code": "if (upperSQL.includes(\"SUBQUERY\") || upperSQL.includes(\"IN (\")) cost += 30;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 229,
        "code": "if (upperSQL.includes(\"ORDER BY\")) cost += 10;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 230,
        "code": "if (upperSQL.includes(\"GROUP BY\")) cost += 15;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 231,
        "code": "if (upperSQL.includes(\"DISTINCT\")) cost += 10;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 232,
        "code": "if (upperSQL.includes(\"UNION\")) cost += 25;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 237,
        "code": "onCancelCreateSQLQuery: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 242,
        "code": "onConfirmCreateSQLQuery: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 255,
        "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 256,
        "code": "description: SecurityUtils.sanitizeSQLParameter(oData.description),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 261,
        "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 277,
        "code": "SecurityUtils.secureCallFunction(this.getView().getModel(), \"/CreateSQLQuery\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 310,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 315,
        "code": "// Validate SQL with SecurityUtils",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 316,
        "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 318,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 341,
        "code": "oData.sqlStatement = \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 363,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 368,
        "code": "// Validate SQL before execution",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 369,
        "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 372,
        "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 378,
        "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 404,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 417,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 418,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 444,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 471,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 472,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 484,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 485,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 534,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 535,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 571,
        "code": "const sanitizedQueryId = SecurityUtils.sanitizeSQLParameter(queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 604,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 624,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 644,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 662,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 679,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 347,
        "code": "// Execute Query Action",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 347,
        "code": "// Execute Query Action",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "unsafeQueryExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "Query execution without security checks",
        "fix": "Add security checks before query execution"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 10,
        "code": "* Validates SQL query syntax and security",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 11,
        "code": "* @param {string} sql - The SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 12,
        "code": "* @param {string} dialect - The SQL dialect (HANA, POSTGRESQL, etc.)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 15,
        "code": "validateSQL: function (sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 17,
        "code": "const securityValidation = SecurityUtils.validateSQL(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 32,
        "code": "const sanitizedSQL = securityValidation.sanitized;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 35,
        "code": "const syntaxIssues = this._checkBasicSyntax(sanitizedSQL, dialect);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 44,
        "code": "const performanceSuggestions = this._getPerformanceSuggestions(sanitizedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 48,
        "code": "const complexityValidation = SecurityUtils.validateQueryComplexity(sanitizedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 58,
        "code": "sanitized: sanitizedSQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 63,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 64,
        "code": "* @param {string} sql - The SQL to sanitize",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 65,
        "code": "* @returns {string} Sanitized SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 67,
        "code": "sanitizeSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 68,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 71,
        "code": "const validation = SecurityUtils.validateSQL(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 79,
        "code": "_checkSecurityVulnerabilities: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 81,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 83,
        "code": "// Check for SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 94,
        "code": "if (pattern.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 95,
        "code": "issues.push(\"Potential SQL injection pattern detected\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 102,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 111,
        "code": "* Basic SQL syntax validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 114,
        "code": "_checkBasicSyntax: function (sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 117,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 120,
        "code": "const openParens = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 121,
        "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 123,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 127,
        "code": "if (lowerSQL.includes('select') && !lowerSQL.includes('from') &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 128,
        "code": "!lowerSQL.includes('dual') && dialect !== 'HANA') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 133,
        "code": "if ((lowerSQL.includes('update') || lowerSQL.includes('delete')) &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 134,
        "code": "!lowerSQL.includes('where')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 145,
        "code": "_getPerformanceSuggestions: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 147,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 150,
        "code": "if (lowerSQL.includes('select *')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 159,
        "code": "if (lowerSQL.includes('like \\'%')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 168,
        "code": "if (/where\\s+\\w+\\s*\\(/i.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 180,
        "code": "* Format SQL query for better readability",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 181,
        "code": "* @param {string} sql - The SQL to format",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 182,
        "code": "* @returns {string} Formatted SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 184,
        "code": "formatSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 185,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 187,
        "code": "// Basic SQL formatting",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 188,
        "code": "let formatted = sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 219,
        "code": "* Extract table names from SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 220,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 223,
        "code": "extractTableNames: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 224,
        "code": "if (!sql) return [];",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 227,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 230,
        "code": "const fromMatches = sql.match(/from\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 241,
        "code": "const joinMatches = sql.match(/join\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 293,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 342,
        "code": "* Estimate query complexity based on SQL structure",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 343,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 346,
        "code": "estimateComplexity: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 347,
        "code": "if (!sql) return { level: 'Unknown', score: 0, factors: [] };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 349,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 354,
        "code": "const tables = this.extractTableNames(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 361,
        "code": "const joinCount = (sql.match(/join/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 368,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 376,
        "code": "const aggCount = aggregations.filter(agg => lowerSQL.includes(agg)).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 383,
        "code": "if (lowerSQL.includes('over(') || lowerSQL.includes('partition by')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 408,
        "code": "* Generate SQL from common patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 410,
        "code": "* @returns {string} Generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 412,
        "code": "generateSQLFromPattern: function (pattern) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 413,
        "code": "// Sanitize all pattern components before SQL generation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 415,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 416,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 417,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 418,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 419,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 420,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 423,
        "code": "let generatedSQL = \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 427,
        "code": "generatedSQL = \"SELECT * FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 431,
        "code": "generatedSQL = \"SELECT ? FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 435,
        "code": "generatedSQL = \"SELECT COUNT(*) FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 439,
        "code": "generatedSQL = \"INSERT INTO ? (?) VALUES (?)\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 443,
        "code": "generatedSQL = \"UPDATE ? SET ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 447,
        "code": "generatedSQL = \"DELETE FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 454,
        "code": "// Validate the generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 455,
        "code": "const validation = SecurityUtils.validateSQL(generatedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 457,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 465,
        "code": "* Get SQL dialect-specific syntax information",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 466,
        "code": "* @param {string} dialect - The SQL dialect",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 473,
        "code": "features: ['Column store', 'In-memory processing', 'SQL Script'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 478,
        "code": "'POSTGRESQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 479,
        "code": "name: 'PostgreSQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 485,
        "code": "'MYSQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 486,
        "code": "name: 'MySQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 492,
        "code": "'SQLITE': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 493,
        "code": "name: 'SQLite',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 501,
        "code": "features: ['Advanced analytics', 'Partitioning', 'PL/SQL'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 506,
        "code": "'SQLSERVER': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 507,
        "code": "name: 'Microsoft SQL Server',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 508,
        "code": "features: ['T-SQL', 'Columnstore indexes', 'In-memory OLTP'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 100,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 100,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 57,
        "code": "Log.info(\"Secure SQL function call successful\", sFunctionName);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 78,
        "code": "* Comprehensive SQL injection prevention",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 79,
        "code": "* @param {string} sql - SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 83,
        "code": "validateSQL: function(sql, params) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 84,
        "code": "if (!sql || typeof sql !== 'string') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 88,
        "code": "errors: [\"SQL query must be a non-empty string\"]",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 93,
        "code": "let sanitized = sql.trim();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 108,
        "code": "// SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 127,
        "code": "errors.push(\"SQL contains potentially dangerous code\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 132,
        "code": "// Check for SQL injection indicators",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 150,
        "code": "/mysql\\./gi,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 152,
        "code": "// Blind SQL injection",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 160,
        "code": "errors.push(\"Potential SQL injection pattern detected\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 168,
        "code": "// Check for SQL injection in parameters",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 180,
        "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 187,
        "code": "original: sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 192,
        "code": "* Sanitize SQL parameters",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 196,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 202,
        "code": ".replace(/--/g, '') // Remove SQL comments",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 213,
        "code": "* @param {string} baseQuery - Base SQL query with placeholders",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 218,
        "code": "const validation = this.validateSQL(baseQuery);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 233,
        "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 303,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 322,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 326,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "// Validate incoming SQL data",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 334,
        "code": "// Additional validation for SQL-related messages",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 335,
        "code": "if (data.type && data.type.includes('SQL') || data.type.includes('QUERY')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 336,
        "code": "const validation = this.validateSQL(data.sql || '');",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 338,
        "code": "Log.warning(\"Invalid SQL received via WebSocket\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 355,
        "code": "* Create secure EventSource for SQL monitoring",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 381,
        "code": "// SQL-specific validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 382,
        "code": "if (data.sql || data.query) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 383,
        "code": "const validation = this.validateSQL(data.sql || data.query);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 385,
        "code": "Log.warning(\"Invalid SQL received via EventSource\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 407,
        "code": "* Check user authorization for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "checkSQLAuth: function(operation, resource) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 414,
        "code": "// SQL-specific authorization checks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 439,
        "code": "* Sanitize SQL query result for display",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 443,
        "code": "sanitizeSQLResult: function(result) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 457,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 466,
        "code": "return result.map(item => this.sanitizeSQLResult(item));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 474,
        "code": "* @param {string} sql - SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "validateQueryComplexity: function(sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 478,
        "code": "if (!sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 479,
        "code": "return { isValid: false, reason: \"No SQL provided\" };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 482,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 487,
        "code": "const joinCount = (sql.match(/join/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 494,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 501,
        "code": "if (lowerSQL.includes('from') && lowerSQL.includes(',') && !lowerSQL.includes('where')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 509,
        "code": "if (lowerSQL.includes(func)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 115,
        "code": "/execute\\s*\\(/gi,",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 115,
        "code": "/execute\\s*\\(/gi,",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "xss": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 318,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 372,
        "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 418,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 472,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 485,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 535,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 123,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 457,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 88,
        "code": "errors: [\"SQL query must be a non-empty string\"]",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 127,
        "code": "errors.push(\"SQL contains potentially dangerous code\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 160,
        "code": "errors.push(\"Potential SQL injection pattern detected\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 180,
        "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 326,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 334,
        "code": "// Additional validation for SQL-related messages",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      }
    ],
    "sqlInjection": [
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 699,
        "code": "oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.currentStep}`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 235,
        "code": "text=\"{= ${/validation/isValid} ? ${i18n>sqlIsValid} : ${i18n>sqlHasErrors} }\"",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 24,
        "code": "text=\"{= ${i18n>queryExecutedSuccessfully} + ' ' + ${/resultCount} + ' ' + ${i18n>rowsReturned} }\"",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 103,
        "code": "issues.push(`Dangerous function '${func}' detected`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 357,
        "code": "factors.push(`${tables.length} tables involved`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 364,
        "code": "factors.push(`${joinCount} JOIN operations`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 371,
        "code": "factors.push(`${subqueryCount} nested expressions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 379,
        "code": "factors.push(`${aggCount} aggregation functions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 274,
        "code": "errors.push(`Missing required field: ${field}`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 490,
        "code": "issues.push(`Too many joins (${joinCount})`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 497,
        "code": "issues.push(`Too many subqueries (${subqueryCount})`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      }
    ],
    "csrf": [
      {
        "type": "csrf",
        "subtype": "missingCSRFToken",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 72,
        "code": "oModel.callFunction(sFunctionName, secureParams);",
        "message": "Missing CSRF token in SQL operation",
        "fix": "Add CSRF token to all SQL operation requests"
      }
    ]
  },
  "byFile": {
    "controller/ListReportExt.controller.js": [
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 32,
        "code": "onCreateQuery: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingDatabaseAuthCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 249,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSQLStatistics\", {",
        "message": "Security issue: auth - missingDatabaseAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 58,
        "code": "this._loadSchemaData();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 62,
        "code": "this._loadSchemaData();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 124,
        "code": "// Schema Explorer Action",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 125,
        "code": "onSchemaExplorer: function() {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 126,
        "code": "if (!this._schemaExplorer) {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 129,
        "code": "name: \"a2a.network.agent11.ext.fragment.SchemaExplorer\",",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 132,
        "code": "this._schemaExplorer = oDialog;",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 134,
        "code": "this._loadSchemaStructure();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 138,
        "code": "this._loadSchemaStructure();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 139,
        "code": "this._schemaExplorer.open();",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 259,
        "code": "_loadSchemaData: function() {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 262,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetDatabaseSchemas\", {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 264,
        "code": "this._updateSchemaData(data);",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 267,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaData\"));",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 311,
        "code": "_loadSchemaStructure: function() {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 314,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSchemaStructure\", {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 316,
        "code": "this._updateSchemaTree(data);",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 319,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaStructure\"));",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 393,
        "code": "_updateSchemaData: function(data) {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 394,
        "code": "// Update schema dropdown options",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 409,
        "code": "_updateSchemaTree: function(data) {",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 410,
        "code": "// Update schema tree structure",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 200,
        "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/sql/updates', {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 19,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 38,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 55,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 74,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 93,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 112,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 131,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 32,
        "code": "onCreateQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 49,
        "code": "onQueryBuilder: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 144,
        "code": "onQueryOptimizer: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 226,
        "code": "case 'QUERY_STARTED':",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 229,
        "code": "case 'QUERY_COMPLETED':",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 233,
        "code": "case 'QUERY_FAILED':",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 332,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 352,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 370,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 382,
        "code": "_refreshQueryData: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 82,
        "code": "this._connectionManager.open();",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 149,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 162,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 184,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 227,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecutionStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 234,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 254,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingStatistics\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 267,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 280,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingConnectionData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 293,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingTemplateData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 306,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingPerformanceData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 319,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaStructure\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 328,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 335,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryOptimized\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 339,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.optimizationFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 348,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.batchExecutionStarted\", [aQueryIds.length]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 355,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.batchExecutionCompleted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 359,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.batchExecutionFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 373,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidated\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 377,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.validationFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 10,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ListReportExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ListReportExt.controller.js",
        "line": 234,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 331,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 332,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 351,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 352,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 369,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 370,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 156,
        "code": "// Execute Selected Queries",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 171,
        "code": "this._executeBatchQueries(aSelectedContexts);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 344,
        "code": "_executeBatchQueries: function(aSelectedContexts) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 67,
        "code": "// Connection Manager Action",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 68,
        "code": "onConnectionManager: function() {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 69,
        "code": "if (!this._connectionManager) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 72,
        "code": "name: \"a2a.network.agent11.ext.fragment.ConnectionManager\",",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 75,
        "code": "this._connectionManager = oDialog;",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 77,
        "code": "this._loadConnectionData();",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 81,
        "code": "this._loadConnectionData();",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 82,
        "code": "this._connectionManager.open();",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 211,
        "code": "console.warn(\"WebSocket connection failed, falling back to polling\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 236,
        "code": "case 'CONNECTION_STATUS':",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 237,
        "code": "this._updateConnectionStatus(data.connections);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 272,
        "code": "_loadConnectionData: function() {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 275,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetConnectionStatus\", {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 277,
        "code": "this._updateConnectionData(data);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 280,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingConnectionData\"));",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 397,
        "code": "_updateConnectionData: function(data) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 398,
        "code": "// Update connection status indicators",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 413,
        "code": "_updateConnectionStatus: function(connections) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 414,
        "code": "// Real-time connection status updates",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 12,
        "code": "// SQL Dashboard Action",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 13,
        "code": "onSQLDashboard: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 14,
        "code": "if (!this._sqlDashboard) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 17,
        "code": "name: \"a2a.network.agent11.ext.fragment.SQLDashboard\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 20,
        "code": "this._sqlDashboard = oDialog;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 27,
        "code": "this._sqlDashboard.open();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 31,
        "code": "// Create New SQL Query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 36,
        "code": "name: \"a2a.network.agent11.ext.fragment.CreateSQLQuery\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 145,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 158,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 180,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 200,
        "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/sql/updates', {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 202,
        "code": "this._handleSQLUpdate(data);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 222,
        "code": "_handleSQLUpdate: function(data) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 248,
        "code": "// Load SQL execution statistics",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 249,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSQLStatistics\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 332,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 352,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 370,
        "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 383,
        "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 156,
        "code": "// Execute Selected Queries",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 171,
        "code": "this._executeBatchQueries(aSelectedContexts);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 344,
        "code": "_executeBatchQueries: function(aSelectedContexts) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 156,
        "code": "// Execute Selected Queries",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 157,
        "code": "onExecuteSelectedQueries: function() {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 167,
        "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 171,
        "code": "this._executeBatchQueries(aSelectedContexts);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 230,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 344,
        "code": "_executeBatchQueries: function(aSelectedContexts) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "unsafeQueryExecution",
        "severity": "HIGH",
        "file": "controller/ListReportExt.controller.js",
        "line": 350,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
        "message": "Query execution without security checks",
        "fix": "Add security checks before query execution"
      }
    ],
    "controller/ObjectPageExt.controller.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 318,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 372,
        "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 418,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 472,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 485,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 535,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 699,
        "code": "oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.currentStep}`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 52,
        "code": "onCreateSQLQuery: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 587,
        "code": "this._handleOptimizationUpdate(event.data);",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 718,
        "code": "_handleOptimizationUpdate: function(data) {",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 719,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationUpdate\", [data.improvement]));",
        "message": "Security issue: auth - missingAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "missingDatabaseAuthCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 277,
        "code": "SecurityUtils.secureCallFunction(this.getView().getModel(), \"/CreateSQLQuery\", {",
        "message": "Security issue: auth - missingDatabaseAuthCheck",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 33,
        "code": "sqlStatement: \"\",",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 176,
        "code": "onSQLStatementChange: function(oEvent) {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 261,
        "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 310,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 316,
        "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 341,
        "code": "oData.sqlStatement = \"\";",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 363,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 369,
        "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 378,
        "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 404,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 417,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 444,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 471,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 484,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 534,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 71,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 177,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 39,
        "code": "schemaName: \"\",",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 267,
        "code": "schemaName: oData.schemaName,",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 60,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 427,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 454,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 494,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 519,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 544,
        "code": "}).then(function(oDialog) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 21,
        "code": "queryName: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 23,
        "code": "queryType: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 27,
        "code": "queryNameState: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 28,
        "code": "queryNameStateText: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 29,
        "code": "queryTypeState: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 30,
        "code": "queryTypeStateText: \"\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 34,
        "code": "queryLanguage: \"sql\",",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 52,
        "code": "onCreateSQLQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 70,
        "code": "onQueryNameChange: function(oEvent) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 89,
        "code": "onQueryTypeChange: function(oEvent) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 208,
        "code": "onQueryLanguageChange: function(oEvent) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 222,
        "code": "_estimateQueryCost: function(sql) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 237,
        "code": "onCancelCreateSQLQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 242,
        "code": "onConfirmCreateSQLQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 255,
        "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 257,
        "code": "queryType: oData.queryType,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 262,
        "code": "queryLanguage: oData.queryLanguage,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 289,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.createQueryFailed\") + \": \" + errorMsg);",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 400,
        "code": "onValidateQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 413,
        "code": "onOptimizeQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 467,
        "code": "onFormatQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 530,
        "code": "onScheduleQuery: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 559,
        "code": "_initializeQueryMonitoring: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 610,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 622,
        "code": "_validateQuery: function(oContext) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 630,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 642,
        "code": "_formatQuery: function(oContext) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 648,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 666,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 683,
        "code": "queryId: sQueryId",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 694,
        "code": "_updateQueryProgress: function(data) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 703,
        "code": "_handleQueryCompleted: function(data) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 713,
        "code": "_handleQueryError: function(data) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 723,
        "code": "_refreshQueryData: function() {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 38,
        "code": "connectionString: \"\",",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 266,
        "code": "connectionString: oData.connectionString,",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 574,
        "code": "this._eventSource.addEventListener('query-progress', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 578,
        "code": "this._eventSource.addEventListener('query-completed', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 582,
        "code": "this._eventSource.addEventListener('query-error', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 586,
        "code": "this._eventSource.addEventListener('optimization-update', (event) => {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 282,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryCreated\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 289,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.createQueryFailed\") + \": \" + errorMsg);",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 296,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.queryNameRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 301,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.queryTypeRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 306,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.databaseTypeRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 318,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 351,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.notAuthorized\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 359,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryAlreadyExecuting\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 372,
        "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 381,
        "code": "this.getResourceBundle().getText(\"error.queryTooComplex\", [complexity.issues.join(', ')])",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 418,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 472,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 485,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 510,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noResultsToExport\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 535,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 606,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecutionStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 617,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(error.message)]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 626,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidationStarted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 633,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidated\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 637,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.validationFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 651,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryFormatted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 655,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.formattingFailed\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 672,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingOptimizationData\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 689,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.generatingExplainPlan\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 709,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.executionCompleted\", [data.executionTime]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 714,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingResourceBundle",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 719,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationUpdate\", [data.improvement]));",
        "message": "Security issue: sapFiori - missingResourceBundle",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "hardcodedTexts",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 186,
        "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
        "message": "Security issue: sapFiori - hardcodedTexts",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "improperExtensionPoint",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 11,
        "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ObjectPageExt\", {",
        "message": "Security issue: sapFiori - improperExtensionPoint",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 288,
        "code": "var errorMsg = SecurityUtils.escapeHTML(error.message || \"Unknown error\");",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 617,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(error.message)]));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 714,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeSQLExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "SQL execution without validation",
        "fix": "Use SQLUtils.validateSQL() before execution"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 33,
        "code": "sqlStatement: \"\",",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 176,
        "code": "onSQLStatementChange: function(oEvent) {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 261,
        "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 310,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 316,
        "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 341,
        "code": "oData.sqlStatement = \"\";",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 363,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 369,
        "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 378,
        "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 404,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 417,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 444,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 471,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 484,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "missingSQLSanitization",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 534,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "SQL statement not sanitized",
        "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 186,
        "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 71,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 90,
        "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 134,
        "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 177,
        "code": "var sValue = oEvent.getParameter(\"value\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 209,
        "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 255,
        "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 256,
        "code": "description: SecurityUtils.sanitizeSQLParameter(oData.description),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 278,
        "code": "urlParameters: oSanitizedData,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 571,
        "code": "const sanitizedQueryId = SecurityUtils.sanitizeSQLParameter(queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 604,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 609,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 624,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 629,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 644,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 647,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 662,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 665,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 679,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 682,
        "code": "urlParameters: {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 347,
        "code": "// Execute Query Action",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "dynamicSQLConstruction",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Dynamic SQL construction without validation",
        "fix": "Validate all dynamic SQL components"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 38,
        "code": "connectionString: \"\",",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 41,
        "code": "connectionPool: 10,",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 163,
        "code": "oData.connectionPool = 20;",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 266,
        "code": "connectionString: oData.connectionString,",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 269,
        "code": "connectionPool: parseInt(oData.connectionPool) || 10,",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "unencryptedConnections",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 38,
        "code": "connectionString: \"\",",
        "message": "Database connection not encrypted",
        "fix": "Use SSL/TLS for database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "unencryptedConnections",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 266,
        "code": "connectionString: oData.connectionString,",
        "message": "Database connection not encrypted",
        "fix": "Use SSL/TLS for database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionPoolSecurity",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 41,
        "code": "connectionPool: 10,",
        "message": "Connection pool missing security controls",
        "fix": "Add authentication to connection pools"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionPoolSecurity",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 163,
        "code": "oData.connectionPool = 20;",
        "message": "Connection pool missing security controls",
        "fix": "Add authentication to connection pools"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionPoolSecurity",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 269,
        "code": "connectionPool: parseInt(oData.connectionPool) || 10,",
        "message": "Connection pool missing security controls",
        "fix": "Add authentication to connection pools"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 33,
        "code": "sqlStatement: \"\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 34,
        "code": "queryLanguage: \"sql\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 52,
        "code": "onCreateSQLQuery: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 58,
        "code": "name: \"a2a.network.agent11.ext.fragment.CreateSQLQuery\",",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 144,
        "code": "case \"mysql\":",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 145,
        "code": "oData.dialectVersion = \"MySQL 8.0\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 146,
        "code": "oData.queryLanguage = \"mysql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 148,
        "code": "case \"postgresql\":",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 149,
        "code": "oData.dialectVersion = \"PostgreSQL 14\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 150,
        "code": "oData.queryLanguage = \"postgresql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 154,
        "code": "oData.queryLanguage = \"plsql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 156,
        "code": "case \"sqlserver\":",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 157,
        "code": "oData.dialectVersion = \"SQL Server 2019\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 158,
        "code": "oData.queryLanguage = \"tsql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 162,
        "code": "oData.queryLanguage = \"sql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 166,
        "code": "oData.queryLanguage = \"sql\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 176,
        "code": "onSQLStatementChange: function(oEvent) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 181,
        "code": "// Basic SQL validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 183,
        "code": "// Validate SQL with SecurityUtils",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 184,
        "code": "var validation = SecurityUtils.validateSQL(sValue);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 186,
        "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 189,
        "code": "// Estimate complexity based on SQL content",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 190,
        "code": "var upperSQL = sValue.toUpperCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 191,
        "code": "if (upperSQL.includes(\"JOIN\") && upperSQL.includes(\"SUBQUERY\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 193,
        "code": "} else if (upperSQL.includes(\"JOIN\") || upperSQL.includes(\"UNION\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 195,
        "code": "} else if (upperSQL.includes(\"WHERE\") || upperSQL.includes(\"GROUP BY\")) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 214,
        "code": "var oCodeEditor = this.getView().byId(\"sqlEditor\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 216,
        "code": "oCodeEditor.setType(sValue === \"nosql\" ? \"javascript\" : \"sql\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 222,
        "code": "_estimateQueryCost: function(sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 225,
        "code": "var upperSQL = sql.toUpperCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 227,
        "code": "if (upperSQL.includes(\"JOIN\")) cost += 20;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 228,
        "code": "if (upperSQL.includes(\"SUBQUERY\") || upperSQL.includes(\"IN (\")) cost += 30;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 229,
        "code": "if (upperSQL.includes(\"ORDER BY\")) cost += 10;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 230,
        "code": "if (upperSQL.includes(\"GROUP BY\")) cost += 15;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 231,
        "code": "if (upperSQL.includes(\"DISTINCT\")) cost += 10;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 232,
        "code": "if (upperSQL.includes(\"UNION\")) cost += 25;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 237,
        "code": "onCancelCreateSQLQuery: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 242,
        "code": "onConfirmCreateSQLQuery: function() {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 255,
        "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 256,
        "code": "description: SecurityUtils.sanitizeSQLParameter(oData.description),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 261,
        "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 277,
        "code": "SecurityUtils.secureCallFunction(this.getView().getModel(), \"/CreateSQLQuery\", {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 310,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 311,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 315,
        "code": "// Validate SQL with SecurityUtils",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 316,
        "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 318,
        "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 341,
        "code": "oData.sqlStatement = \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 363,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 364,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 368,
        "code": "// Validate SQL before execution",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 369,
        "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 372,
        "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 378,
        "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 404,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 405,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 417,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 418,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 444,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 445,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 471,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 472,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 484,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 485,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 534,
        "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 535,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 571,
        "code": "const sanitizedQueryId = SecurityUtils.sanitizeSQLParameter(queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 572,
        "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 604,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 624,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 644,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 662,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 679,
        "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 347,
        "code": "// Execute Query Action",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 347,
        "code": "// Execute Query Action",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 348,
        "code": "onExecuteQuery: function() {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 349,
        "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 387,
        "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 391,
        "code": "this._executeQuery(oContext);",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 602,
        "code": "_executeQuery: function(oContext) {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 613,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 704,
        "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "unsafeQueryExecution",
        "severity": "HIGH",
        "file": "controller/ObjectPageExt.controller.js",
        "line": 608,
        "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
        "message": "Query execution without security checks",
        "fix": "Add security checks before query execution"
      }
    ],
    "fragment/CreateSQLQuery.fragment.xml": [
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 26,
        "code": "<IconTabFilter text=\"{i18n>tab.basicInfo}\" key=\"basic\" icon=\"sap-icon://detail-view\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 61,
        "code": "selectedKey=\"{create>/queryType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 67,
        "code": "<core:Item key=\"select\" text=\"{i18n>query.select}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 68,
        "code": "<core:Item key=\"insert\" text=\"{i18n>query.insert}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 69,
        "code": "<core:Item key=\"update\" text=\"{i18n>query.update}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 70,
        "code": "<core:Item key=\"delete\" text=\"{i18n>query.delete}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"create\" text=\"{i18n>query.create}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"alter\" text=\"{i18n>query.alter}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"drop\" text=\"{i18n>query.drop}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"procedure\" text=\"{i18n>query.procedure}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 75,
        "code": "<core:Item key=\"function\" text=\"{i18n>query.function}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 76,
        "code": "<core:Item key=\"trigger\" text=\"{i18n>query.trigger}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 77,
        "code": "<core:Item key=\"view\" text=\"{i18n>query.view}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 78,
        "code": "<core:Item key=\"index\" text=\"{i18n>query.index}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 85,
        "code": "selectedKey=\"{create>/databaseType}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 91,
        "code": "<core:Item key=\"mysql\" text=\"{i18n>db.mysql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 92,
        "code": "<core:Item key=\"postgresql\" text=\"{i18n>db.postgresql}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 93,
        "code": "<core:Item key=\"oracle\" text=\"{i18n>db.oracle}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 94,
        "code": "<core:Item key=\"sqlserver\" text=\"{i18n>db.sqlserver}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 95,
        "code": "<core:Item key=\"sqlite\" text=\"{i18n>db.sqlite}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 96,
        "code": "<core:Item key=\"hana\" text=\"{i18n>db.hana}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 97,
        "code": "<core:Item key=\"db2\" text=\"{i18n>db.db2}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 98,
        "code": "<core:Item key=\"snowflake\" text=\"{i18n>db.snowflake}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 99,
        "code": "<core:Item key=\"bigquery\" text=\"{i18n>db.bigquery}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 106,
        "code": "selectedKey=\"{create>/priority}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 108,
        "code": "<SegmentedButtonItem key=\"low\" text=\"{i18n>priority.low}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 109,
        "code": "<SegmentedButtonItem key=\"medium\" text=\"{i18n>priority.medium}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 110,
        "code": "<SegmentedButtonItem key=\"high\" text=\"{i18n>priority.high}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 111,
        "code": "<SegmentedButtonItem key=\"critical\" text=\"{i18n>priority.critical}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 119,
        "code": "selectedKey=\"{create>/complexity}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 120,
        "code": "<core:Item key=\"simple\" text=\"{i18n>complexity.simple}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 121,
        "code": "<core:Item key=\"moderate\" text=\"{i18n>complexity.moderate}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 122,
        "code": "<core:Item key=\"complex\" text=\"{i18n>complexity.complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 123,
        "code": "<core:Item key=\"very_complex\" text=\"{i18n>complexity.very_complex}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 152,
        "code": "<ComboBox id=\"queryLanguageCombo\" selectedKey=\"{create>/queryLanguage}\" selectionChange=\".onQueryLanguageChange\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 153,
        "code": "<core:Item key=\"sql\" text=\"SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 154,
        "code": "<core:Item key=\"tsql\" text=\"T-SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 155,
        "code": "<core:Item key=\"plsql\" text=\"PL/SQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 156,
        "code": "<core:Item key=\"mysql\" text=\"MySQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 157,
        "code": "<core:Item key=\"postgresql\" text=\"PostgreSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 158,
        "code": "<core:Item key=\"nosql\" text=\"NoSQL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 175,
        "code": "<ComboBox id=\"indexUsageCombo\" selectedKey=\"{create>/indexUsage}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 176,
        "code": "<core:Item key=\"auto\" text=\"{i18n>indexUsage.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 177,
        "code": "<core:Item key=\"force\" text=\"{i18n>indexUsage.force}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 178,
        "code": "<core:Item key=\"hint\" text=\"{i18n>indexUsage.hint}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 179,
        "code": "<core:Item key=\"none\" text=\"{i18n>indexUsage.none}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 209,
        "code": "<IconTabFilter text=\"{i18n>tab.databaseConfig}\" key=\"database\" icon=\"sap-icon://database\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 242,
        "code": "<ComboBox id=\"transactionModeCombo\" selectedKey=\"{create>/transactionMode}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 243,
        "code": "<core:Item key=\"auto\" text=\"{i18n>transaction.auto}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 244,
        "code": "<core:Item key=\"manual\" text=\"{i18n>transaction.manual}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 245,
        "code": "<core:Item key=\"read_only\" text=\"{i18n>transaction.read_only}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 246,
        "code": "<core:Item key=\"read_write\" text=\"{i18n>transaction.read_write}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 251,
        "code": "<ComboBox id=\"isolationLevelCombo\" selectedKey=\"{create>/isolationLevel}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 252,
        "code": "<core:Item key=\"read_uncommitted\" text=\"{i18n>isolation.read_uncommitted}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 253,
        "code": "<core:Item key=\"read_committed\" text=\"{i18n>isolation.read_committed}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 254,
        "code": "<core:Item key=\"repeatable_read\" text=\"{i18n>isolation.repeatable_read}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 255,
        "code": "<core:Item key=\"serializable\" text=\"{i18n>isolation.serializable}\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 268,
        "code": "<IconTabFilter text=\"{i18n>tab.parameters}\" key=\"parameters\" icon=\"sap-icon://list\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 308,
        "code": "<ComboBox selectedKey=\"{parameterType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 309,
        "code": "<core:Item key=\"input\" text=\"Input\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 310,
        "code": "<core:Item key=\"output\" text=\"Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 311,
        "code": "<core:Item key=\"inout\" text=\"Input/Output\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 314,
        "code": "<ComboBox selectedKey=\"{dataType}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 315,
        "code": "<core:Item key=\"varchar\" text=\"VARCHAR\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 316,
        "code": "<core:Item key=\"int\" text=\"INTEGER\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 317,
        "code": "<core:Item key=\"decimal\" text=\"DECIMAL\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 318,
        "code": "<core:Item key=\"date\" text=\"DATE\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 319,
        "code": "<core:Item key=\"datetime\" text=\"DATETIME\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 320,
        "code": "<core:Item key=\"boolean\" text=\"BOOLEAN\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 334,
        "code": "<IconTabFilter text=\"{i18n>tab.security}\" key=\"security\" icon=\"sap-icon://shield\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 355,
        "code": "<ComboBox id=\"dataClassificationCombo\" selectedKey=\"{create>/dataClassification}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 356,
        "code": "<core:Item key=\"public\" text=\"Public\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 357,
        "code": "<core:Item key=\"internal\" text=\"Internal\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 358,
        "code": "<core:Item key=\"confidential\" text=\"Confidential\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 359,
        "code": "<core:Item key=\"restricted\" text=\"Restricted\"/>",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 131,
        "code": "<!-- SQL Statement Tab -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 132,
        "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 136,
        "code": "<!-- SQL Statement Editor -->",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 137,
        "code": "<Label text=\"{i18n>field.sqlStatement}\" required=\"true\" class=\"sapUiSmallMarginBottom\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 143,
        "code": "value=\"{create>/sqlStatement}\"",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 145,
        "code": "change=\".onSQLStatementChange\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingSQLValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 383,
        "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
        "message": "SQL statement not validated before execution",
        "fix": "Add SQLUtils.validateSQL() before execution"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 291,
        "code": "<Text text=\"{i18n>field.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 313,
        "code": "<Input value=\"{parameterValue}\" placeholder=\"{i18n>placeholder.parameterValue}\"/>",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 38,
        "code": "id=\"queryNameInput\"",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 222,
        "code": "<!-- Schema Name -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 223,
        "code": "<Label text=\"{i18n>field.schemaName}\"/>",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 224,
        "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 225,
        "code": "<!-- Schema options will be loaded dynamically -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 218,
        "code": "<!-- Connection String -->",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 219,
        "code": "<Label text=\"{i18n>field.connectionString}\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "connectionStringExposure",
        "severity": "MEDIUM",
        "file": "fragment/CreateSQLQuery.fragment.xml",
        "line": 220,
        "code": "<Input id=\"connectionStringInput\" value=\"{create>/connectionString}\" placeholder=\"{i18n>placeholder.connectionString}\" type=\"Password\"/>",
        "message": "Security issue: dataExposure - connectionStringExposure",
        "fix": "Review and fix the security issue"
      }
    ],
    "fragment/NaturalLanguageTranslator.fragment.xml": [
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 235,
        "code": "text=\"{= ${/validation/isValid} ? ${i18n>sqlIsValid} : ${i18n>sqlHasErrors} }\"",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 68,
        "code": "selectedKey=\"{/selectedDatabase}\"",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 71,
        "code": "<core:Item key=\"main_db\" text=\"{i18n>mainDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 72,
        "code": "<core:Item key=\"analytics_db\" text=\"{i18n>analyticsDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 73,
        "code": "<core:Item key=\"reporting_db\" text=\"{i18n>reportingDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 74,
        "code": "<core:Item key=\"archive_db\" text=\"{i18n>archiveDatabase}\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 79,
        "code": "<Select selectedKey=\"{/sqlDialect}\">",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 81,
        "code": "<core:Item key=\"HANA\" text=\"SAP HANA\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 82,
        "code": "<core:Item key=\"POSTGRESQL\" text=\"PostgreSQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 83,
        "code": "<core:Item key=\"MYSQL\" text=\"MySQL\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 84,
        "code": "<core:Item key=\"SQLITE\" text=\"SQLite\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 85,
        "code": "<core:Item key=\"ORACLE\" text=\"Oracle\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 86,
        "code": "<core:Item key=\"SQLSERVER\" text=\"SQL Server\" />",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 97,
        "code": "<Label text=\"{i18n>includeSchemaInfo}:\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 98,
        "code": "<CheckBox selected=\"{/includeSchemaInfo}\" />",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/NaturalLanguageTranslator.fragment.xml",
        "line": 115,
        "code": "<Label text=\"{i18n>sqlQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "fragment/QueryOptimizer.fragment.xml": [
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 18,
        "code": "<IconTabFilter text=\"{i18n>originalQuery}\" icon=\"sap-icon://document\" iconColor=\"Neutral\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 107,
        "code": "<IconTabFilter text=\"{i18n>optimizedQuery}\" icon=\"sap-icon://accelerated\" iconColor=\"Positive\">",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryOptimizer.fragment.xml",
        "line": 112,
        "code": "<Label text=\"{i18n>improvedQuery}:\" />",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "fragment/QueryResults.fragment.xml": [
      {
        "type": "sqlInjection",
        "subtype": "unsafeSQLConstruction",
        "severity": "CRITICAL",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 24,
        "code": "text=\"{= ${i18n>queryExecutedSuccessfully} + ' ' + ${/resultCount} + ' ' + ${i18n>rowsReturned} }\"",
        "message": "SQL query constructed with string concatenation",
        "fix": "Use prepared statements with parameter binding"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 95,
        "code": "<!-- Dynamic columns will be created based on result schema -->",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "fragment/QueryResults.fragment.xml",
        "line": 30,
        "code": "text=\"{= ${i18n>queryFailed} + ': ' + ${/errorMessage} }\"",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      }
    ],
    "utils/SQLUtils.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 123,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 457,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 103,
        "code": "issues.push(`Dangerous function '${func}' detected`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 357,
        "code": "factors.push(`${tables.length} tables involved`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 364,
        "code": "factors.push(`${joinCount} JOIN operations`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 371,
        "code": "factors.push(`${subqueryCount} nested expressions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SQLUtils.js",
        "line": 379,
        "code": "factors.push(`${aggCount} aggregation functions`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 419,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "unsanitizedQueryInput",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 63,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "SQL query input not sanitized",
        "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SQLUtils.js",
        "line": 263,
        "code": "const sanitizedQuery = SecurityUtils.escapeHTML(naturalLanguage.trim());",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "directSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 102,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Direct SQL string construction",
        "fix": "Use parameterized queries with proper binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 293,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 415,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 416,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 417,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 418,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 419,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 420,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 100,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 10,
        "code": "* Validates SQL query syntax and security",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 11,
        "code": "* @param {string} sql - The SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 12,
        "code": "* @param {string} dialect - The SQL dialect (HANA, POSTGRESQL, etc.)",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 15,
        "code": "validateSQL: function (sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 17,
        "code": "const securityValidation = SecurityUtils.validateSQL(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 32,
        "code": "const sanitizedSQL = securityValidation.sanitized;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 35,
        "code": "const syntaxIssues = this._checkBasicSyntax(sanitizedSQL, dialect);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 44,
        "code": "const performanceSuggestions = this._getPerformanceSuggestions(sanitizedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 48,
        "code": "const complexityValidation = SecurityUtils.validateQueryComplexity(sanitizedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 58,
        "code": "sanitized: sanitizedSQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 63,
        "code": "* Sanitizes SQL input to prevent injection attacks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 64,
        "code": "* @param {string} sql - The SQL to sanitize",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 65,
        "code": "* @returns {string} Sanitized SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 67,
        "code": "sanitizeSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 68,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 71,
        "code": "const validation = SecurityUtils.validateSQL(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 79,
        "code": "_checkSecurityVulnerabilities: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 81,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 83,
        "code": "// Check for SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 94,
        "code": "if (pattern.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 95,
        "code": "issues.push(\"Potential SQL injection pattern detected\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 102,
        "code": "if (lowerSQL.includes(func + '(')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 111,
        "code": "* Basic SQL syntax validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 114,
        "code": "_checkBasicSyntax: function (sql, dialect) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 117,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 120,
        "code": "const openParens = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 121,
        "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 123,
        "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 127,
        "code": "if (lowerSQL.includes('select') && !lowerSQL.includes('from') &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 128,
        "code": "!lowerSQL.includes('dual') && dialect !== 'HANA') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 133,
        "code": "if ((lowerSQL.includes('update') || lowerSQL.includes('delete')) &&",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 134,
        "code": "!lowerSQL.includes('where')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 145,
        "code": "_getPerformanceSuggestions: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 147,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 150,
        "code": "if (lowerSQL.includes('select *')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 159,
        "code": "if (lowerSQL.includes('like \\'%')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 168,
        "code": "if (/where\\s+\\w+\\s*\\(/i.test(sql)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 180,
        "code": "* Format SQL query for better readability",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 181,
        "code": "* @param {string} sql - The SQL to format",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 182,
        "code": "* @returns {string} Formatted SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 184,
        "code": "formatSQL: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 185,
        "code": "if (!sql) return \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 187,
        "code": "// Basic SQL formatting",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 188,
        "code": "let formatted = sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 219,
        "code": "* Extract table names from SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 220,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 223,
        "code": "extractTableNames: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 224,
        "code": "if (!sql) return [];",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 227,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 230,
        "code": "const fromMatches = sql.match(/from\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 241,
        "code": "const joinMatches = sql.match(/join\\s+(\\w+)/gi);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 293,
        "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 342,
        "code": "* Estimate query complexity based on SQL structure",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 343,
        "code": "* @param {string} sql - The SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 346,
        "code": "estimateComplexity: function (sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 347,
        "code": "if (!sql) return { level: 'Unknown', score: 0, factors: [] };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 349,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 354,
        "code": "const tables = this.extractTableNames(sql);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 361,
        "code": "const joinCount = (sql.match(/join/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 368,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 376,
        "code": "const aggCount = aggregations.filter(agg => lowerSQL.includes(agg)).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 383,
        "code": "if (lowerSQL.includes('over(') || lowerSQL.includes('partition by')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 408,
        "code": "* Generate SQL from common patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 410,
        "code": "* @returns {string} Generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 412,
        "code": "generateSQLFromPattern: function (pattern) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 413,
        "code": "// Sanitize all pattern components before SQL generation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 415,
        "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 416,
        "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 417,
        "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 418,
        "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 419,
        "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 420,
        "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 423,
        "code": "let generatedSQL = \"\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 427,
        "code": "generatedSQL = \"SELECT * FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 431,
        "code": "generatedSQL = \"SELECT ? FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 435,
        "code": "generatedSQL = \"SELECT COUNT(*) FROM ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 439,
        "code": "generatedSQL = \"INSERT INTO ? (?) VALUES (?)\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 443,
        "code": "generatedSQL = \"UPDATE ? SET ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 447,
        "code": "generatedSQL = \"DELETE FROM ? WHERE ?\";",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 454,
        "code": "// Validate the generated SQL",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 455,
        "code": "const validation = SecurityUtils.validateSQL(generatedSQL);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 457,
        "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 465,
        "code": "* Get SQL dialect-specific syntax information",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 466,
        "code": "* @param {string} dialect - The SQL dialect",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 473,
        "code": "features: ['Column store', 'In-memory processing', 'SQL Script'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 478,
        "code": "'POSTGRESQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 479,
        "code": "name: 'PostgreSQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 485,
        "code": "'MYSQL': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 486,
        "code": "name: 'MySQL',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 492,
        "code": "'SQLITE': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 493,
        "code": "name: 'SQLite',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 501,
        "code": "features: ['Advanced analytics', 'Partitioning', 'PL/SQL'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 506,
        "code": "'SQLSERVER': {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 507,
        "code": "name: 'Microsoft SQL Server',",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 508,
        "code": "features: ['T-SQL', 'Columnstore indexes', 'In-memory OLTP'],",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 100,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 90,
        "code": "/sp_executesql/i",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SQLUtils.js",
        "line": 100,
        "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ],
    "utils/SecurityUtils.js": [
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 88,
        "code": "errors: [\"SQL query must be a non-empty string\"]",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 127,
        "code": "errors.push(\"SQL contains potentially dangerous code\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 160,
        "code": "errors.push(\"Potential SQL injection pattern detected\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 180,
        "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 326,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "xss",
        "subtype": "unsafeSQLDisplay",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 334,
        "code": "// Additional validation for SQL-related messages",
        "message": "SQL content displayed without sanitization",
        "fix": "Sanitize SQL content before display"
      },
      {
        "type": "sqlInjection",
        "subtype": "dynamicQueryBuilding",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Dynamic SQL query building without validation",
        "fix": "Validate and sanitize all SQL components"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 274,
        "code": "errors.push(`Missing required field: ${field}`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 490,
        "code": "issues.push(`Too many joins (${joinCount})`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "sqlInjection",
        "subtype": "interpolatedSQL",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 497,
        "code": "issues.push(`Too many subqueries (${subqueryCount})`);",
        "message": "Template literal SQL with user input",
        "fix": "Use parameterized queries instead of template literals"
      },
      {
        "type": "csrf",
        "subtype": "missingCSRFToken",
        "severity": "CRITICAL",
        "file": "utils/SecurityUtils.js",
        "line": 72,
        "code": "oModel.callFunction(sFunctionName, secureParams);",
        "message": "Missing CSRF token in SQL operation",
        "fix": "Add CSRF token to all SQL operation requests"
      },
      {
        "type": "auth",
        "subtype": "hardcodedCredentials",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 29,
        "code": "reject(new Error('Failed to fetch CSRF token: ' + error));",
        "message": "Security issue: auth - hardcodedCredentials",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 232,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "missingParameterValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 233,
        "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
        "message": "SQL parameters not validated",
        "fix": "Validate all SQL parameters"
      },
      {
        "type": "validation",
        "subtype": "noSQLSyntaxCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "No SQL syntax validation",
        "fix": "Implement SQL syntax validation"
      },
      {
        "type": "validation",
        "subtype": "missingSchemaValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 148,
        "code": "/information_schema/gi,",
        "message": "Database schema not validated",
        "fix": "Validate schema names and permissions"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 365,
        "code": "if (url.startsWith('http://')) {",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "httpEndpoints",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 366,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Insecure HTTP endpoint for database operations",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 313,
        "code": "if (url.startsWith('ws://')) {",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "unencryptedWebSocket",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 314,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "WebSocket connection without encryption",
        "fix": "Use wss:// protocol for SQL operations"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 313,
        "code": "if (url.startsWith('ws://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 314,
        "code": "secureUrl = url.replace('ws://', 'wss://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 365,
        "code": "if (url.startsWith('http://')) {",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "insecure",
        "subtype": "hardcodedURLs",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 366,
        "code": "secureUrl = url.replace('http://', 'https://');",
        "message": "Security issue: insecure - hardcodedURLs",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "unhandledPromises",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 43,
        "code": "return this.getCSRFToken().then(function(token) {",
        "message": "Security issue: errorHandling - unhandledPromises",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "errorHandling",
        "subtype": "missingSQLErrorHandling",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Security issue: errorHandling - missingSQLErrorHandling",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 217,
        "code": "createParameterizedQuery: function(baseQuery, parameters) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 224,
        "code": "query: null,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 239,
        "code": "query: validation.sanitized,",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "dataExposure",
        "subtype": "exposedQueryData",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "validateQueryComplexity: function(sql) {",
        "message": "Security issue: dataExposure - exposedQueryData",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 321,
        "code": "ws.addEventListener('open', function() {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 325,
        "code": "ws.addEventListener('error', function(error) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 329,
        "code": "ws.addEventListener('message', function(event) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 373,
        "code": "const originalAddEventListener = eventSource.addEventListener;",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "memoryLeaks",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 374,
        "code": "eventSource.addEventListener = function(type, listener, options) {",
        "message": "Security issue: resources - memoryLeaks",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 318,
        "code": "const ws = new WebSocket(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unclosedConnections",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 370,
        "code": "const eventSource = new EventSource(secureUrl);",
        "message": "Security issue: resources - unclosedConnections",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "resources",
        "subtype": "unboundedQueries",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Security issue: resources - unboundedQueries",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 246,
        "code": "* Safely escape HTML content",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 250,
        "code": "escapeHTML: function(content) {",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 449,
        "code": "return this.escapeHTML(result);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 457,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sapFiori",
        "subtype": "missingSecurityUtil",
        "severity": "MEDIUM",
        "file": "utils/SecurityUtils.js",
        "line": 469,
        "code": "return this.escapeHTML(String(result));",
        "message": "Security issue: sapFiori - missingSecurityUtil",
        "fix": "Review and fix the security issue"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 39,
        "code": "* @param {object} mParameters - Parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 42,
        "code": "secureCallFunction: function(oModel, sFunctionName, mParameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 44,
        "code": "const secureParams = Object.assign({}, mParameters);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 80,
        "code": "* @param {object} params - Query parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 164,
        "code": "// Validate parameters if provided",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 168,
        "code": "// Check for SQL injection in parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 178,
        "code": "// Check for proper parameterization",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 180,
        "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 192,
        "code": "* Sanitize SQL parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 193,
        "code": "* @param {any} param - Parameter to sanitize",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 194,
        "code": "* @returns {any} Sanitized parameter",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 196,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 212,
        "code": "* Create secure parameterized query",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 214,
        "code": "* @param {object} parameters - Parameters to bind",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 217,
        "code": "createParameterizedQuery: function(baseQuery, parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 225,
        "code": "parameters: null",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 229,
        "code": "// Sanitize all parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 231,
        "code": "if (parameters) {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 232,
        "code": "Object.entries(parameters).forEach(([key, value]) => {",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 233,
        "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 240,
        "code": "parameters: sanitizedParams,",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "unsafeParameterBinding",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 256,
        "code": "* Validate database connection parameters",
        "message": "SQL parameters not properly bound",
        "fix": "Implement prepared statement parameter binding"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 115,
        "code": "/execute\\s*\\(/gi,",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "noSQLInjectionCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Missing SQL injection detection",
        "fix": "Add SQL injection detection and prevention"
      },
      {
        "type": "sqlSecurity",
        "subtype": "dynamicSQLConstruction",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Dynamic SQL construction without validation",
        "fix": "Validate all dynamic SQL components"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 256,
        "code": "* Validate database connection parameters",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 257,
        "code": "* @param {object} connection - Connection configuration",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 260,
        "code": "validateConnection: function(connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 263,
        "code": "if (!connection) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 266,
        "code": "errors: [\"Connection configuration is required\"]",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 273,
        "code": "if (!connection[field]) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 278,
        "code": "// Check for secure connection",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 279,
        "code": "if (connection.host && !connection.ssl && !connection.host.includes('localhost')) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 280,
        "code": "errors.push(\"SSL/TLS encryption should be enabled for external connections\");",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 284,
        "code": "if (connection.password && connection.password.length < 8) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 289,
        "code": "if (connection.host) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 291,
        "code": "if (!hostPattern.test(connection.host)) {",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 303,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 305,
        "code": "* @param {object} options - Connection options",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "databaseSecurity",
        "subtype": "missingConnectionValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 322,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Database connection not validated",
        "fix": "Validate all database connections"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 57,
        "code": "Log.info(\"Secure SQL function call successful\", sFunctionName);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 65,
        "code": "Log.error(\"Secure SQL function call failed\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 78,
        "code": "* Comprehensive SQL injection prevention",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 79,
        "code": "* @param {string} sql - SQL query to validate",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 83,
        "code": "validateSQL: function(sql, params) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 84,
        "code": "if (!sql || typeof sql !== 'string') {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 88,
        "code": "errors: [\"SQL query must be a non-empty string\"]",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 93,
        "code": "let sanitized = sql.trim();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 108,
        "code": "// SQL injection patterns",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 127,
        "code": "errors.push(\"SQL contains potentially dangerous code\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 132,
        "code": "// Check for SQL injection indicators",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 150,
        "code": "/mysql\\./gi,",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 152,
        "code": "// Blind SQL injection",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 160,
        "code": "errors.push(\"Potential SQL injection pattern detected\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 168,
        "code": "// Check for SQL injection in parameters",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 171,
        "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 180,
        "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 187,
        "code": "original: sql",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 192,
        "code": "* Sanitize SQL parameters",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 196,
        "code": "sanitizeSQLParameter: function(param) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 202,
        "code": ".replace(/--/g, '') // Remove SQL comments",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 213,
        "code": "* @param {string} baseQuery - Base SQL query with placeholders",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 218,
        "code": "const validation = this.validateSQL(baseQuery);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 233,
        "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 303,
        "code": "* Create secure WebSocket connection for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 322,
        "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 326,
        "code": "Log.error(\"SQL WebSocket error\", error);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 331,
        "code": "// Validate incoming SQL data",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 334,
        "code": "// Additional validation for SQL-related messages",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 335,
        "code": "if (data.type && data.type.includes('SQL') || data.type.includes('QUERY')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 336,
        "code": "const validation = this.validateSQL(data.sql || '');",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 338,
        "code": "Log.warning(\"Invalid SQL received via WebSocket\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 355,
        "code": "* Create secure EventSource for SQL monitoring",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 381,
        "code": "// SQL-specific validation",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 382,
        "code": "if (data.sql || data.query) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 383,
        "code": "const validation = this.validateSQL(data.sql || data.query);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 385,
        "code": "Log.warning(\"Invalid SQL received via EventSource\", validation.errors);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 407,
        "code": "* Check user authorization for SQL operations",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 412,
        "code": "checkSQLAuth: function(operation, resource) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 414,
        "code": "// SQL-specific authorization checks",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 439,
        "code": "* Sanitize SQL query result for display",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 443,
        "code": "sanitizeSQLResult: function(result) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 457,
        "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 466,
        "code": "return result.map(item => this.sanitizeSQLResult(item));",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 474,
        "code": "* @param {string} sql - SQL query",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 477,
        "code": "validateQueryComplexity: function(sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 478,
        "code": "if (!sql) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 479,
        "code": "return { isValid: false, reason: \"No SQL provided\" };",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 482,
        "code": "const lowerSQL = sql.toLowerCase();",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 487,
        "code": "const joinCount = (sql.match(/join/gi) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 494,
        "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 501,
        "code": "if (lowerSQL.includes('from') && lowerSQL.includes(',') && !lowerSQL.includes('where')) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryValidation",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 509,
        "code": "if (lowerSQL.includes(func)) {",
        "message": "Query validation missing",
        "fix": "Implement comprehensive query validation"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 115,
        "code": "/execute\\s*\\(/gi,",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "noQueryComplexityCheck",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "No query complexity validation",
        "fix": "Add query complexity analysis"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 36,
        "code": "* Safely execute OData function with CSRF protection",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 115,
        "code": "/execute\\s*\\(/gi,",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      },
      {
        "type": "queryValidation",
        "subtype": "missingQueryTimeout",
        "severity": "HIGH",
        "file": "utils/SecurityUtils.js",
        "line": 117,
        "code": "/sp_executesql/gi,",
        "message": "Query execution without timeout",
        "fix": "Set appropriate query timeouts"
      }
    ]
  },
  "details": [
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 32,
      "code": "onCreateQuery: function() {",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 157,
      "code": "onExecuteSelectedQueries: function() {",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingDatabaseAuthCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 249,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSQLStatistics\", {",
      "message": "Security issue: auth - missingDatabaseAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 58,
      "code": "this._loadSchemaData();",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 62,
      "code": "this._loadSchemaData();",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 124,
      "code": "// Schema Explorer Action",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 125,
      "code": "onSchemaExplorer: function() {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 126,
      "code": "if (!this._schemaExplorer) {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 129,
      "code": "name: \"a2a.network.agent11.ext.fragment.SchemaExplorer\",",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 132,
      "code": "this._schemaExplorer = oDialog;",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 134,
      "code": "this._loadSchemaStructure();",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 138,
      "code": "this._loadSchemaStructure();",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 139,
      "code": "this._schemaExplorer.open();",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 259,
      "code": "_loadSchemaData: function() {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 262,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/GetDatabaseSchemas\", {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 264,
      "code": "this._updateSchemaData(data);",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 267,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaData\"));",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 311,
      "code": "_loadSchemaStructure: function() {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 314,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSchemaStructure\", {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 316,
      "code": "this._updateSchemaTree(data);",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 319,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaStructure\"));",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 393,
      "code": "_updateSchemaData: function(data) {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 394,
      "code": "// Update schema dropdown options",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 409,
      "code": "_updateSchemaTree: function(data) {",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 410,
      "code": "// Update schema tree structure",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 200,
      "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/sql/updates', {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 19,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 38,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 55,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 74,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 93,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 112,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 131,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 32,
      "code": "onCreateQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 49,
      "code": "onQueryBuilder: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 144,
      "code": "onQueryOptimizer: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 226,
      "code": "case 'QUERY_STARTED':",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 229,
      "code": "case 'QUERY_COMPLETED':",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 233,
      "code": "case 'QUERY_FAILED':",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 332,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 352,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 370,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 382,
      "code": "_refreshQueryData: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unclosedConnections",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 82,
      "code": "this._connectionManager.open();",
      "message": "Security issue: resources - unclosedConnections",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 149,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 162,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 167,
      "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 184,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.selectQueriesFirst\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 227,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecutionStarted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 230,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 234,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 254,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingStatistics\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 267,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaData\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 280,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingConnectionData\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 293,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingTemplateData\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 306,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingPerformanceData\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 319,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingSchemaStructure\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 328,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationStarted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 335,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryOptimized\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 339,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.optimizationFailed\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 348,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.batchExecutionStarted\", [aQueryIds.length]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 355,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.batchExecutionCompleted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 359,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.batchExecutionFailed\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 373,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidated\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 377,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.validationFailed\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "improperExtensionPoint",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 10,
      "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ListReportExt\", {",
      "message": "Security issue: sapFiori - improperExtensionPoint",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "controller/ListReportExt.controller.js",
      "line": 234,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 331,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 332,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 351,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 352,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 369,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 370,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 156,
      "code": "// Execute Selected Queries",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 157,
      "code": "onExecuteSelectedQueries: function() {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 167,
      "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 171,
      "code": "this._executeBatchQueries(aSelectedContexts);",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 230,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 344,
      "code": "_executeBatchQueries: function(aSelectedContexts) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 350,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 67,
      "code": "// Connection Manager Action",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 68,
      "code": "onConnectionManager: function() {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 69,
      "code": "if (!this._connectionManager) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 72,
      "code": "name: \"a2a.network.agent11.ext.fragment.ConnectionManager\",",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 75,
      "code": "this._connectionManager = oDialog;",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 77,
      "code": "this._loadConnectionData();",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 81,
      "code": "this._loadConnectionData();",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 82,
      "code": "this._connectionManager.open();",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 211,
      "code": "console.warn(\"WebSocket connection failed, falling back to polling\");",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 236,
      "code": "case 'CONNECTION_STATUS':",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 237,
      "code": "this._updateConnectionStatus(data.connections);",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 272,
      "code": "_loadConnectionData: function() {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 275,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/GetConnectionStatus\", {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 277,
      "code": "this._updateConnectionData(data);",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 280,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingConnectionData\"));",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 397,
      "code": "_updateConnectionData: function(data) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 398,
      "code": "// Update connection status indicators",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 413,
      "code": "_updateConnectionStatus: function(connections) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 414,
      "code": "// Real-time connection status updates",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 12,
      "code": "// SQL Dashboard Action",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 13,
      "code": "onSQLDashboard: function() {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 14,
      "code": "if (!this._sqlDashboard) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 17,
      "code": "name: \"a2a.network.agent11.ext.fragment.SQLDashboard\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 20,
      "code": "this._sqlDashboard = oDialog;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 27,
      "code": "this._sqlDashboard.open();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 31,
      "code": "// Create New SQL Query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 36,
      "code": "name: \"a2a.network.agent11.ext.fragment.CreateSQLQuery\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 145,
      "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 158,
      "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 180,
      "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 200,
      "code": "this._ws = SecurityUtils.createSecureWebSocket('ws://localhost:8011/sql/updates', {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 202,
      "code": "this._handleSQLUpdate(data);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 222,
      "code": "_handleSQLUpdate: function(data) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 248,
      "code": "// Load SQL execution statistics",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 249,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/GetSQLStatistics\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 332,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 352,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 370,
      "code": "queryIds: SecurityUtils.sanitizeSQLParameter(aQueryIds.join(','))",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 383,
      "code": "const oBinding = this.base.getView().byId(\"fe::table::SQLQueries::LineItem\").getBinding(\"rows\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 156,
      "code": "// Execute Selected Queries",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 157,
      "code": "onExecuteSelectedQueries: function() {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 167,
      "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 171,
      "code": "this._executeBatchQueries(aSelectedContexts);",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 230,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 344,
      "code": "_executeBatchQueries: function(aSelectedContexts) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 350,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 156,
      "code": "// Execute Selected Queries",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 157,
      "code": "onExecuteSelectedQueries: function() {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 167,
      "code": "this.getResourceBundle().getText(\"msg.executeQueriesConfirm\", [aSelectedContexts.length]),",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 171,
      "code": "this._executeBatchQueries(aSelectedContexts);",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 230,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 344,
      "code": "_executeBatchQueries: function(aSelectedContexts) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 350,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "unsafeQueryExecution",
      "severity": "HIGH",
      "file": "controller/ListReportExt.controller.js",
      "line": 350,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteBatchQueries\", {",
      "message": "Query execution without security checks",
      "fix": "Add security checks before query execution"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 311,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 318,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 364,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 372,
      "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 405,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 418,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 445,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 472,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 485,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 535,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "sqlInjection",
      "subtype": "dynamicQueryBuilding",
      "severity": "CRITICAL",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 572,
      "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
      "message": "Dynamic SQL query building without validation",
      "fix": "Validate and sanitize all SQL components"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 572,
      "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 699,
      "code": "oProgressIndicator.setDisplayValue(`${data.progress}% - ${data.currentStep}`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 52,
      "code": "onCreateSQLQuery: function() {",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 348,
      "code": "onExecuteQuery: function() {",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 587,
      "code": "this._handleOptimizationUpdate(event.data);",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 718,
      "code": "_handleOptimizationUpdate: function(data) {",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingAuthCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 719,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationUpdate\", [data.improvement]));",
      "message": "Security issue: auth - missingAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "missingDatabaseAuthCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 277,
      "code": "SecurityUtils.secureCallFunction(this.getView().getModel(), \"/CreateSQLQuery\", {",
      "message": "Security issue: auth - missingDatabaseAuthCheck",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 33,
      "code": "sqlStatement: \"\",",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 176,
      "code": "onSQLStatementChange: function(oEvent) {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 261,
      "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 310,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 311,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 316,
      "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 341,
      "code": "oData.sqlStatement = \"\";",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 363,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 364,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 369,
      "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 378,
      "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 404,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 405,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 417,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 444,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 445,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 471,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 484,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 534,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 71,
      "code": "var sValue = oEvent.getParameter(\"value\");",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 177,
      "code": "var sValue = oEvent.getParameter(\"value\");",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 39,
      "code": "schemaName: \"\",",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 267,
      "code": "schemaName: oData.schemaName,",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 572,
      "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 60,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 349,
      "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 427,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 454,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 494,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 519,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 544,
      "code": "}).then(function(oDialog) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 21,
      "code": "queryName: \"\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 23,
      "code": "queryType: \"\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 27,
      "code": "queryNameState: \"\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 28,
      "code": "queryNameStateText: \"\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 29,
      "code": "queryTypeState: \"\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 30,
      "code": "queryTypeStateText: \"\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 34,
      "code": "queryLanguage: \"sql\",",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 52,
      "code": "onCreateSQLQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 70,
      "code": "onQueryNameChange: function(oEvent) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 89,
      "code": "onQueryTypeChange: function(oEvent) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 208,
      "code": "onQueryLanguageChange: function(oEvent) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 222,
      "code": "_estimateQueryCost: function(sql) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 237,
      "code": "onCancelCreateSQLQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 242,
      "code": "onConfirmCreateSQLQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 255,
      "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 257,
      "code": "queryType: oData.queryType,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 262,
      "code": "queryLanguage: oData.queryLanguage,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 289,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.createQueryFailed\") + \": \" + errorMsg);",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 348,
      "code": "onExecuteQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 400,
      "code": "onValidateQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 413,
      "code": "onOptimizeQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 467,
      "code": "onFormatQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 530,
      "code": "onScheduleQuery: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 559,
      "code": "_initializeQueryMonitoring: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 602,
      "code": "_executeQuery: function(oContext) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 610,
      "code": "queryId: sQueryId",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 622,
      "code": "_validateQuery: function(oContext) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 630,
      "code": "queryId: sQueryId",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 642,
      "code": "_formatQuery: function(oContext) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 648,
      "code": "queryId: sQueryId",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 666,
      "code": "queryId: sQueryId",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 683,
      "code": "queryId: sQueryId",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 694,
      "code": "_updateQueryProgress: function(data) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 703,
      "code": "_handleQueryCompleted: function(data) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 713,
      "code": "_handleQueryError: function(data) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 723,
      "code": "_refreshQueryData: function() {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 38,
      "code": "connectionString: \"\",",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 266,
      "code": "connectionString: oData.connectionString,",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 574,
      "code": "this._eventSource.addEventListener('query-progress', (event) => {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 578,
      "code": "this._eventSource.addEventListener('query-completed', (event) => {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 582,
      "code": "this._eventSource.addEventListener('query-error', (event) => {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 586,
      "code": "this._eventSource.addEventListener('optimization-update', (event) => {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 282,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryCreated\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 289,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.createQueryFailed\") + \": \" + errorMsg);",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 296,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.queryNameRequired\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 301,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.queryTypeRequired\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 306,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.databaseTypeRequired\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 311,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 318,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 351,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.notAuthorized\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 359,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryAlreadyExecuting\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 364,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 372,
      "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 381,
      "code": "this.getResourceBundle().getText(\"error.queryTooComplex\", [complexity.issues.join(', ')])",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 387,
      "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 405,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 418,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 445,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 472,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 485,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 510,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noResultsToExport\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 535,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 606,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecutionStarted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 613,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 617,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(error.message)]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 626,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidationStarted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 633,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryValidated\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 637,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.validationFailed\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 651,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryFormatted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 655,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.formattingFailed\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 672,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.loadingOptimizationData\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 689,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.generatingExplainPlan\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 704,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 709,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.executionCompleted\", [data.executionTime]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 714,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingResourceBundle",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 719,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.optimizationUpdate\", [data.improvement]));",
      "message": "Security issue: sapFiori - missingResourceBundle",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "hardcodedTexts",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 186,
      "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
      "message": "Security issue: sapFiori - hardcodedTexts",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "improperExtensionPoint",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 11,
      "code": "return ControllerExtension.extend(\"a2a.network.agent11.ext.controller.ObjectPageExt\", {",
      "message": "Security issue: sapFiori - improperExtensionPoint",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 288,
      "code": "var errorMsg = SecurityUtils.escapeHTML(error.message || \"Unknown error\");",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 617,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(error.message)]));",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 714,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.queryExecutionFailed\", [SecurityUtils.escapeHTML(data.error)]));",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeSQLExecution",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 387,
      "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
      "message": "SQL execution without validation",
      "fix": "Use SQLUtils.validateSQL() before execution"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeSQLExecution",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 391,
      "code": "this._executeQuery(oContext);",
      "message": "SQL execution without validation",
      "fix": "Use SQLUtils.validateSQL() before execution"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeSQLExecution",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 602,
      "code": "_executeQuery: function(oContext) {",
      "message": "SQL execution without validation",
      "fix": "Use SQLUtils.validateSQL() before execution"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 33,
      "code": "sqlStatement: \"\",",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 176,
      "code": "onSQLStatementChange: function(oEvent) {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 261,
      "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 310,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 311,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 316,
      "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 341,
      "code": "oData.sqlStatement = \"\";",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 363,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 364,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 369,
      "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 378,
      "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 404,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 405,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 417,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 444,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 445,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 471,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 484,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "missingSQLSanitization",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 534,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "SQL statement not sanitized",
      "fix": "Sanitize all SQL with SQLUtils.sanitizeSQL()"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 186,
      "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 71,
      "code": "var sValue = oEvent.getParameter(\"value\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 90,
      "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 134,
      "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 177,
      "code": "var sValue = oEvent.getParameter(\"value\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 209,
      "code": "var sValue = oEvent.getParameter(\"selectedItem\").getKey();",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 255,
      "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 256,
      "code": "description: SecurityUtils.sanitizeSQLParameter(oData.description),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 278,
      "code": "urlParameters: oSanitizedData,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 571,
      "code": "const sanitizedQueryId = SecurityUtils.sanitizeSQLParameter(queryId);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 604,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 609,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 624,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 629,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 644,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 647,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 662,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 665,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 679,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 682,
      "code": "urlParameters: {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 347,
      "code": "// Execute Query Action",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 348,
      "code": "onExecuteQuery: function() {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 349,
      "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 387,
      "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 391,
      "code": "this._executeQuery(oContext);",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 602,
      "code": "_executeQuery: function(oContext) {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 608,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 613,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 704,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "dynamicSQLConstruction",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 572,
      "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
      "message": "Dynamic SQL construction without validation",
      "fix": "Validate all dynamic SQL components"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 38,
      "code": "connectionString: \"\",",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 41,
      "code": "connectionPool: 10,",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 163,
      "code": "oData.connectionPool = 20;",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 266,
      "code": "connectionString: oData.connectionString,",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 269,
      "code": "connectionPool: parseInt(oData.connectionPool) || 10,",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "unencryptedConnections",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 38,
      "code": "connectionString: \"\",",
      "message": "Database connection not encrypted",
      "fix": "Use SSL/TLS for database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "unencryptedConnections",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 266,
      "code": "connectionString: oData.connectionString,",
      "message": "Database connection not encrypted",
      "fix": "Use SSL/TLS for database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionPoolSecurity",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 41,
      "code": "connectionPool: 10,",
      "message": "Connection pool missing security controls",
      "fix": "Add authentication to connection pools"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionPoolSecurity",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 163,
      "code": "oData.connectionPool = 20;",
      "message": "Connection pool missing security controls",
      "fix": "Add authentication to connection pools"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionPoolSecurity",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 269,
      "code": "connectionPool: parseInt(oData.connectionPool) || 10,",
      "message": "Connection pool missing security controls",
      "fix": "Add authentication to connection pools"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 33,
      "code": "sqlStatement: \"\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 34,
      "code": "queryLanguage: \"sql\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 52,
      "code": "onCreateSQLQuery: function() {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 58,
      "code": "name: \"a2a.network.agent11.ext.fragment.CreateSQLQuery\",",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 144,
      "code": "case \"mysql\":",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 145,
      "code": "oData.dialectVersion = \"MySQL 8.0\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 146,
      "code": "oData.queryLanguage = \"mysql\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 148,
      "code": "case \"postgresql\":",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 149,
      "code": "oData.dialectVersion = \"PostgreSQL 14\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 150,
      "code": "oData.queryLanguage = \"postgresql\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 154,
      "code": "oData.queryLanguage = \"plsql\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 156,
      "code": "case \"sqlserver\":",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 157,
      "code": "oData.dialectVersion = \"SQL Server 2019\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 158,
      "code": "oData.queryLanguage = \"tsql\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 162,
      "code": "oData.queryLanguage = \"sql\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 166,
      "code": "oData.queryLanguage = \"sql\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 176,
      "code": "onSQLStatementChange: function(oEvent) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 181,
      "code": "// Basic SQL validation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 183,
      "code": "// Validate SQL with SecurityUtils",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 184,
      "code": "var validation = SecurityUtils.validateSQL(sValue);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 186,
      "code": "MessageToast.show(\"SQL validation warning: \" + validation.errors.join(\", \"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 189,
      "code": "// Estimate complexity based on SQL content",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 190,
      "code": "var upperSQL = sValue.toUpperCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 191,
      "code": "if (upperSQL.includes(\"JOIN\") && upperSQL.includes(\"SUBQUERY\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 193,
      "code": "} else if (upperSQL.includes(\"JOIN\") || upperSQL.includes(\"UNION\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 195,
      "code": "} else if (upperSQL.includes(\"WHERE\") || upperSQL.includes(\"GROUP BY\")) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 214,
      "code": "var oCodeEditor = this.getView().byId(\"sqlEditor\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 216,
      "code": "oCodeEditor.setType(sValue === \"nosql\" ? \"javascript\" : \"sql\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 222,
      "code": "_estimateQueryCost: function(sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 225,
      "code": "var upperSQL = sql.toUpperCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 227,
      "code": "if (upperSQL.includes(\"JOIN\")) cost += 20;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 228,
      "code": "if (upperSQL.includes(\"SUBQUERY\") || upperSQL.includes(\"IN (\")) cost += 30;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 229,
      "code": "if (upperSQL.includes(\"ORDER BY\")) cost += 10;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 230,
      "code": "if (upperSQL.includes(\"GROUP BY\")) cost += 15;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 231,
      "code": "if (upperSQL.includes(\"DISTINCT\")) cost += 10;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 232,
      "code": "if (upperSQL.includes(\"UNION\")) cost += 25;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 237,
      "code": "onCancelCreateSQLQuery: function() {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 242,
      "code": "onConfirmCreateSQLQuery: function() {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 255,
      "code": "queryName: SecurityUtils.sanitizeSQLParameter(oData.queryName),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 256,
      "code": "description: SecurityUtils.sanitizeSQLParameter(oData.description),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 261,
      "code": "sqlStatement: oData.sqlStatement, // Already validated by SecurityUtils",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 277,
      "code": "SecurityUtils.secureCallFunction(this.getView().getModel(), \"/CreateSQLQuery\", {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 310,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === \"\") {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 311,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"validation.sqlStatementRequired\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 315,
      "code": "// Validate SQL with SecurityUtils",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 316,
      "code": "var validation = SecurityUtils.validateSQL(oData.sqlStatement);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 318,
      "code": "MessageBox.error(this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(\", \")]));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 341,
      "code": "oData.sqlStatement = \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 349,
      "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 363,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 364,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 368,
      "code": "// Validate SQL before execution",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 369,
      "code": "const validation = SecurityUtils.validateSQL(oData.sqlStatement);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 372,
      "code": "this.getResourceBundle().getText(\"error.sqlValidationFailed\", [validation.errors.join(', ')])",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 378,
      "code": "const complexity = SecurityUtils.validateQueryComplexity(oData.sqlStatement);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 404,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 405,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 417,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 418,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToOptimize\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 444,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 445,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLStatement\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 471,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 472,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToFormat\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 484,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 485,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSave\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 534,
      "code": "if (!oData.sqlStatement || oData.sqlStatement.trim() === '') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 535,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"error.noSQLToSchedule\"));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 571,
      "code": "const sanitizedQueryId = SecurityUtils.sanitizeSQLParameter(queryId);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 572,
      "code": "this._eventSource = SecurityUtils.createSecureEventSource(`http://localhost:8011/sql/${sanitizedQueryId}/stream`);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 604,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 624,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 644,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 662,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 679,
      "code": "const sQueryId = SecurityUtils.sanitizeSQLParameter(oContext.getObject().queryId);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 347,
      "code": "// Execute Query Action",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 348,
      "code": "onExecuteQuery: function() {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 349,
      "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 387,
      "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 391,
      "code": "this._executeQuery(oContext);",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 602,
      "code": "_executeQuery: function(oContext) {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 608,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 613,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 704,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 347,
      "code": "// Execute Query Action",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 348,
      "code": "onExecuteQuery: function() {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 349,
      "code": "SecurityUtils.checkSQLAuth('execute', 'query').then(function(authorized) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 387,
      "code": "this.getResourceBundle().getText(\"msg.executeQueryConfirm\"),",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 391,
      "code": "this._executeQuery(oContext);",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 602,
      "code": "_executeQuery: function(oContext) {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 608,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 613,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 704,
      "code": "MessageToast.show(this.getResourceBundle().getText(\"msg.queryExecuted\"));",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "unsafeQueryExecution",
      "severity": "HIGH",
      "file": "controller/ObjectPageExt.controller.js",
      "line": 608,
      "code": "SecurityUtils.secureCallFunction(oModel, \"/ExecuteQuery\", {",
      "message": "Query execution without security checks",
      "fix": "Add security checks before query execution"
    },
    {
      "type": "sqlInjection",
      "subtype": "dynamicQueryBuilding",
      "severity": "CRITICAL",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 383,
      "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
      "message": "Dynamic SQL query building without validation",
      "fix": "Validate and sanitize all SQL components"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 26,
      "code": "<IconTabFilter text=\"{i18n>tab.basicInfo}\" key=\"basic\" icon=\"sap-icon://detail-view\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 61,
      "code": "selectedKey=\"{create>/queryType}\"",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 67,
      "code": "<core:Item key=\"select\" text=\"{i18n>query.select}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 68,
      "code": "<core:Item key=\"insert\" text=\"{i18n>query.insert}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 69,
      "code": "<core:Item key=\"update\" text=\"{i18n>query.update}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 70,
      "code": "<core:Item key=\"delete\" text=\"{i18n>query.delete}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 71,
      "code": "<core:Item key=\"create\" text=\"{i18n>query.create}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 72,
      "code": "<core:Item key=\"alter\" text=\"{i18n>query.alter}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 73,
      "code": "<core:Item key=\"drop\" text=\"{i18n>query.drop}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 74,
      "code": "<core:Item key=\"procedure\" text=\"{i18n>query.procedure}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 75,
      "code": "<core:Item key=\"function\" text=\"{i18n>query.function}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 76,
      "code": "<core:Item key=\"trigger\" text=\"{i18n>query.trigger}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 77,
      "code": "<core:Item key=\"view\" text=\"{i18n>query.view}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 78,
      "code": "<core:Item key=\"index\" text=\"{i18n>query.index}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 85,
      "code": "selectedKey=\"{create>/databaseType}\"",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 91,
      "code": "<core:Item key=\"mysql\" text=\"{i18n>db.mysql}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 92,
      "code": "<core:Item key=\"postgresql\" text=\"{i18n>db.postgresql}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 93,
      "code": "<core:Item key=\"oracle\" text=\"{i18n>db.oracle}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 94,
      "code": "<core:Item key=\"sqlserver\" text=\"{i18n>db.sqlserver}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 95,
      "code": "<core:Item key=\"sqlite\" text=\"{i18n>db.sqlite}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 96,
      "code": "<core:Item key=\"hana\" text=\"{i18n>db.hana}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 97,
      "code": "<core:Item key=\"db2\" text=\"{i18n>db.db2}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 98,
      "code": "<core:Item key=\"snowflake\" text=\"{i18n>db.snowflake}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 99,
      "code": "<core:Item key=\"bigquery\" text=\"{i18n>db.bigquery}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 106,
      "code": "selectedKey=\"{create>/priority}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 108,
      "code": "<SegmentedButtonItem key=\"low\" text=\"{i18n>priority.low}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 109,
      "code": "<SegmentedButtonItem key=\"medium\" text=\"{i18n>priority.medium}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 110,
      "code": "<SegmentedButtonItem key=\"high\" text=\"{i18n>priority.high}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 111,
      "code": "<SegmentedButtonItem key=\"critical\" text=\"{i18n>priority.critical}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 119,
      "code": "selectedKey=\"{create>/complexity}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 120,
      "code": "<core:Item key=\"simple\" text=\"{i18n>complexity.simple}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 121,
      "code": "<core:Item key=\"moderate\" text=\"{i18n>complexity.moderate}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 122,
      "code": "<core:Item key=\"complex\" text=\"{i18n>complexity.complex}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 123,
      "code": "<core:Item key=\"very_complex\" text=\"{i18n>complexity.very_complex}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 132,
      "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 152,
      "code": "<ComboBox id=\"queryLanguageCombo\" selectedKey=\"{create>/queryLanguage}\" selectionChange=\".onQueryLanguageChange\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 153,
      "code": "<core:Item key=\"sql\" text=\"SQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 154,
      "code": "<core:Item key=\"tsql\" text=\"T-SQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 155,
      "code": "<core:Item key=\"plsql\" text=\"PL/SQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 156,
      "code": "<core:Item key=\"mysql\" text=\"MySQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 157,
      "code": "<core:Item key=\"postgresql\" text=\"PostgreSQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 158,
      "code": "<core:Item key=\"nosql\" text=\"NoSQL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 175,
      "code": "<ComboBox id=\"indexUsageCombo\" selectedKey=\"{create>/indexUsage}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 176,
      "code": "<core:Item key=\"auto\" text=\"{i18n>indexUsage.auto}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 177,
      "code": "<core:Item key=\"force\" text=\"{i18n>indexUsage.force}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 178,
      "code": "<core:Item key=\"hint\" text=\"{i18n>indexUsage.hint}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 179,
      "code": "<core:Item key=\"none\" text=\"{i18n>indexUsage.none}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 209,
      "code": "<IconTabFilter text=\"{i18n>tab.databaseConfig}\" key=\"database\" icon=\"sap-icon://database\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 224,
      "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 242,
      "code": "<ComboBox id=\"transactionModeCombo\" selectedKey=\"{create>/transactionMode}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 243,
      "code": "<core:Item key=\"auto\" text=\"{i18n>transaction.auto}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 244,
      "code": "<core:Item key=\"manual\" text=\"{i18n>transaction.manual}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 245,
      "code": "<core:Item key=\"read_only\" text=\"{i18n>transaction.read_only}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 246,
      "code": "<core:Item key=\"read_write\" text=\"{i18n>transaction.read_write}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 251,
      "code": "<ComboBox id=\"isolationLevelCombo\" selectedKey=\"{create>/isolationLevel}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 252,
      "code": "<core:Item key=\"read_uncommitted\" text=\"{i18n>isolation.read_uncommitted}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 253,
      "code": "<core:Item key=\"read_committed\" text=\"{i18n>isolation.read_committed}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 254,
      "code": "<core:Item key=\"repeatable_read\" text=\"{i18n>isolation.repeatable_read}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 255,
      "code": "<core:Item key=\"serializable\" text=\"{i18n>isolation.serializable}\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 268,
      "code": "<IconTabFilter text=\"{i18n>tab.parameters}\" key=\"parameters\" icon=\"sap-icon://list\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 308,
      "code": "<ComboBox selectedKey=\"{parameterType}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 309,
      "code": "<core:Item key=\"input\" text=\"Input\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 310,
      "code": "<core:Item key=\"output\" text=\"Output\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 311,
      "code": "<core:Item key=\"inout\" text=\"Input/Output\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 314,
      "code": "<ComboBox selectedKey=\"{dataType}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 315,
      "code": "<core:Item key=\"varchar\" text=\"VARCHAR\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 316,
      "code": "<core:Item key=\"int\" text=\"INTEGER\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 317,
      "code": "<core:Item key=\"decimal\" text=\"DECIMAL\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 318,
      "code": "<core:Item key=\"date\" text=\"DATE\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 319,
      "code": "<core:Item key=\"datetime\" text=\"DATETIME\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 320,
      "code": "<core:Item key=\"boolean\" text=\"BOOLEAN\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 334,
      "code": "<IconTabFilter text=\"{i18n>tab.security}\" key=\"security\" icon=\"sap-icon://shield\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 355,
      "code": "<ComboBox id=\"dataClassificationCombo\" selectedKey=\"{create>/dataClassification}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 356,
      "code": "<core:Item key=\"public\" text=\"Public\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 357,
      "code": "<core:Item key=\"internal\" text=\"Internal\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 358,
      "code": "<core:Item key=\"confidential\" text=\"Confidential\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 359,
      "code": "<core:Item key=\"restricted\" text=\"Restricted\"/>",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 131,
      "code": "<!-- SQL Statement Tab -->",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 132,
      "code": "<IconTabFilter text=\"{i18n>tab.sqlStatement}\" key=\"sql\" icon=\"sap-icon://syntax\">",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 136,
      "code": "<!-- SQL Statement Editor -->",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 137,
      "code": "<Label text=\"{i18n>field.sqlStatement}\" required=\"true\" class=\"sapUiSmallMarginBottom\"/>",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 143,
      "code": "value=\"{create>/sqlStatement}\"",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 145,
      "code": "change=\".onSQLStatementChange\"/>",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingSQLValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 383,
      "code": "enabled=\"{= ${create>/queryName} &amp;&amp; ${create>/queryType} &amp;&amp; ${create>/databaseType} &amp;&amp; ${create>/sqlStatement} &amp;&amp; !${create>/queryNameState} &amp;&amp; !${create>/queryTypeState} &amp;&amp; !${create>/databaseTypeState} }\"/>",
      "message": "SQL statement not validated before execution",
      "fix": "Add SQLUtils.validateSQL() before execution"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 291,
      "code": "<Text text=\"{i18n>field.parameterValue}\"/>",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 313,
      "code": "<Input value=\"{parameterValue}\" placeholder=\"{i18n>placeholder.parameterValue}\"/>",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "unsanitizedQueryInput",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 38,
      "code": "id=\"queryNameInput\"",
      "message": "SQL query input not sanitized",
      "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 222,
      "code": "<!-- Schema Name -->",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 223,
      "code": "<Label text=\"{i18n>field.schemaName}\"/>",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 224,
      "code": "<ComboBox id=\"schemaNameCombo\" selectedKey=\"{create>/schemaName}\" placeholder=\"{i18n>placeholder.schemaName}\">",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 225,
      "code": "<!-- Schema options will be loaded dynamically -->",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 218,
      "code": "<!-- Connection String -->",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 219,
      "code": "<Label text=\"{i18n>field.connectionString}\"/>",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "connectionStringExposure",
      "severity": "MEDIUM",
      "file": "fragment/CreateSQLQuery.fragment.xml",
      "line": 220,
      "code": "<Input id=\"connectionStringInput\" value=\"{create>/connectionString}\" placeholder=\"{i18n>placeholder.connectionString}\" type=\"Password\"/>",
      "message": "Security issue: dataExposure - connectionStringExposure",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlInjection",
      "subtype": "dynamicQueryBuilding",
      "severity": "CRITICAL",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 235,
      "code": "text=\"{= ${/validation/isValid} ? ${i18n>sqlIsValid} : ${i18n>sqlHasErrors} }\"",
      "message": "Dynamic SQL query building without validation",
      "fix": "Validate and sanitize all SQL components"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 68,
      "code": "selectedKey=\"{/selectedDatabase}\"",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 71,
      "code": "<core:Item key=\"main_db\" text=\"{i18n>mainDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 72,
      "code": "<core:Item key=\"analytics_db\" text=\"{i18n>analyticsDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 73,
      "code": "<core:Item key=\"reporting_db\" text=\"{i18n>reportingDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 74,
      "code": "<core:Item key=\"archive_db\" text=\"{i18n>archiveDatabase}\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 79,
      "code": "<Select selectedKey=\"{/sqlDialect}\">",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 81,
      "code": "<core:Item key=\"HANA\" text=\"SAP HANA\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 82,
      "code": "<core:Item key=\"POSTGRESQL\" text=\"PostgreSQL\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 83,
      "code": "<core:Item key=\"MYSQL\" text=\"MySQL\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 84,
      "code": "<core:Item key=\"SQLITE\" text=\"SQLite\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 85,
      "code": "<core:Item key=\"ORACLE\" text=\"Oracle\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 86,
      "code": "<core:Item key=\"SQLSERVER\" text=\"SQL Server\" />",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 97,
      "code": "<Label text=\"{i18n>includeSchemaInfo}:\" />",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 98,
      "code": "<CheckBox selected=\"{/includeSchemaInfo}\" />",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/NaturalLanguageTranslator.fragment.xml",
      "line": 115,
      "code": "<Label text=\"{i18n>sqlQuery}:\" />",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryOptimizer.fragment.xml",
      "line": 18,
      "code": "<IconTabFilter text=\"{i18n>originalQuery}\" icon=\"sap-icon://document\" iconColor=\"Neutral\">",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryOptimizer.fragment.xml",
      "line": 107,
      "code": "<IconTabFilter text=\"{i18n>optimizedQuery}\" icon=\"sap-icon://accelerated\" iconColor=\"Positive\">",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryOptimizer.fragment.xml",
      "line": 112,
      "code": "<Label text=\"{i18n>improvedQuery}:\" />",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlInjection",
      "subtype": "unsafeSQLConstruction",
      "severity": "CRITICAL",
      "file": "fragment/QueryResults.fragment.xml",
      "line": 24,
      "code": "text=\"{= ${i18n>queryExecutedSuccessfully} + ' ' + ${/resultCount} + ' ' + ${i18n>rowsReturned} }\"",
      "message": "SQL query constructed with string concatenation",
      "fix": "Use prepared statements with parameter binding"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "fragment/QueryResults.fragment.xml",
      "line": 95,
      "code": "<!-- Dynamic columns will be created based on result schema -->",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "fragment/QueryResults.fragment.xml",
      "line": 30,
      "code": "text=\"{= ${i18n>queryFailed} + ': ' + ${/errorMessage} }\"",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 123,
      "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 457,
      "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 103,
      "code": "issues.push(`Dangerous function '${func}' detected`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 357,
      "code": "factors.push(`${tables.length} tables involved`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 364,
      "code": "factors.push(`${joinCount} JOIN operations`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 371,
      "code": "factors.push(`${subqueryCount} nested expressions`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SQLUtils.js",
      "line": 379,
      "code": "factors.push(`${aggCount} aggregation functions`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 419,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "unsanitizedQueryInput",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 63,
      "code": "* Sanitizes SQL input to prevent injection attacks",
      "message": "SQL query input not sanitized",
      "fix": "Use SQLUtils.sanitizeSQL() for all inputs"
    },
    {
      "type": "validation",
      "subtype": "noSQLSyntaxCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "No SQL syntax validation",
      "fix": "Implement SQL syntax validation"
    },
    {
      "type": "errorHandling",
      "subtype": "missingSQLErrorHandling",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "Security issue: errorHandling - missingSQLErrorHandling",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unboundedQueries",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "Security issue: resources - unboundedQueries",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SQLUtils.js",
      "line": 263,
      "code": "const sanitizedQuery = SecurityUtils.escapeHTML(naturalLanguage.trim());",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "directSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 102,
      "code": "if (lowerSQL.includes(func + '(')) {",
      "message": "Direct SQL string construction",
      "fix": "Use parameterized queries with proper binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 293,
      "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 415,
      "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 416,
      "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 417,
      "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 418,
      "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 419,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 420,
      "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 100,
      "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 10,
      "code": "* Validates SQL query syntax and security",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 11,
      "code": "* @param {string} sql - The SQL query to validate",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 12,
      "code": "* @param {string} dialect - The SQL dialect (HANA, POSTGRESQL, etc.)",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 15,
      "code": "validateSQL: function (sql, dialect) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 17,
      "code": "const securityValidation = SecurityUtils.validateSQL(sql);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 32,
      "code": "const sanitizedSQL = securityValidation.sanitized;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 35,
      "code": "const syntaxIssues = this._checkBasicSyntax(sanitizedSQL, dialect);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 44,
      "code": "const performanceSuggestions = this._getPerformanceSuggestions(sanitizedSQL);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 48,
      "code": "const complexityValidation = SecurityUtils.validateQueryComplexity(sanitizedSQL);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 58,
      "code": "sanitized: sanitizedSQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 63,
      "code": "* Sanitizes SQL input to prevent injection attacks",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 64,
      "code": "* @param {string} sql - The SQL to sanitize",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 65,
      "code": "* @returns {string} Sanitized SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 67,
      "code": "sanitizeSQL: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 68,
      "code": "if (!sql) return \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 71,
      "code": "const validation = SecurityUtils.validateSQL(sql);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 79,
      "code": "_checkSecurityVulnerabilities: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 81,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 83,
      "code": "// Check for SQL injection patterns",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 94,
      "code": "if (pattern.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 95,
      "code": "issues.push(\"Potential SQL injection pattern detected\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 102,
      "code": "if (lowerSQL.includes(func + '(')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 111,
      "code": "* Basic SQL syntax validation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 114,
      "code": "_checkBasicSyntax: function (sql, dialect) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 117,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 120,
      "code": "const openParens = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 121,
      "code": "const closeParens = (sql.match(/\\)/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 123,
      "code": "errors.push(\"Unbalanced parentheses in SQL query\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 127,
      "code": "if (lowerSQL.includes('select') && !lowerSQL.includes('from') &&",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 128,
      "code": "!lowerSQL.includes('dual') && dialect !== 'HANA') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 133,
      "code": "if ((lowerSQL.includes('update') || lowerSQL.includes('delete')) &&",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 134,
      "code": "!lowerSQL.includes('where')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 145,
      "code": "_getPerformanceSuggestions: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 147,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 150,
      "code": "if (lowerSQL.includes('select *')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 159,
      "code": "if (lowerSQL.includes('like \\'%')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 168,
      "code": "if (/where\\s+\\w+\\s*\\(/i.test(sql)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 180,
      "code": "* Format SQL query for better readability",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 181,
      "code": "* @param {string} sql - The SQL to format",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 182,
      "code": "* @returns {string} Formatted SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 184,
      "code": "formatSQL: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 185,
      "code": "if (!sql) return \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 187,
      "code": "// Basic SQL formatting",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 188,
      "code": "let formatted = sql",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 219,
      "code": "* Extract table names from SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 220,
      "code": "* @param {string} sql - The SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 223,
      "code": "extractTableNames: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 224,
      "code": "if (!sql) return [];",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 227,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 230,
      "code": "const fromMatches = sql.match(/from\\s+(\\w+)/gi);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 241,
      "code": "const joinMatches = sql.match(/join\\s+(\\w+)/gi);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 293,
      "code": "value: SecurityUtils.sanitizeSQLParameter(keyword),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 342,
      "code": "* Estimate query complexity based on SQL structure",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 343,
      "code": "* @param {string} sql - The SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 346,
      "code": "estimateComplexity: function (sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 347,
      "code": "if (!sql) return { level: 'Unknown', score: 0, factors: [] };",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 349,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 354,
      "code": "const tables = this.extractTableNames(sql);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 361,
      "code": "const joinCount = (sql.match(/join/gi) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 368,
      "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 376,
      "code": "const aggCount = aggregations.filter(agg => lowerSQL.includes(agg)).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 383,
      "code": "if (lowerSQL.includes('over(') || lowerSQL.includes('partition by')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 408,
      "code": "* Generate SQL from common patterns",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 410,
      "code": "* @returns {string} Generated SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 412,
      "code": "generateSQLFromPattern: function (pattern) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 413,
      "code": "// Sanitize all pattern components before SQL generation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 415,
      "code": "type: SecurityUtils.sanitizeSQLParameter(pattern.type),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 416,
      "code": "table: SecurityUtils.sanitizeSQLParameter(pattern.table),",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 417,
      "code": "columns: pattern.columns ? SecurityUtils.sanitizeSQLParameter(pattern.columns) : '*',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 418,
      "code": "condition: pattern.condition ? SecurityUtils.sanitizeSQLParameter(pattern.condition) : '',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 419,
      "code": "values: pattern.values ? SecurityUtils.sanitizeSQLParameter(pattern.values) : '',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 420,
      "code": "setClause: pattern.setClause ? SecurityUtils.sanitizeSQLParameter(pattern.setClause) : ''",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 423,
      "code": "let generatedSQL = \"\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 427,
      "code": "generatedSQL = \"SELECT * FROM ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 431,
      "code": "generatedSQL = \"SELECT ? FROM ? WHERE ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 435,
      "code": "generatedSQL = \"SELECT COUNT(*) FROM ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 439,
      "code": "generatedSQL = \"INSERT INTO ? (?) VALUES (?)\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 443,
      "code": "generatedSQL = \"UPDATE ? SET ? WHERE ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 447,
      "code": "generatedSQL = \"DELETE FROM ? WHERE ?\";",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 454,
      "code": "// Validate the generated SQL",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 455,
      "code": "const validation = SecurityUtils.validateSQL(generatedSQL);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 457,
      "code": "Log.error(\"Generated SQL failed validation\", validation.errors);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 465,
      "code": "* Get SQL dialect-specific syntax information",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 466,
      "code": "* @param {string} dialect - The SQL dialect",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 473,
      "code": "features: ['Column store', 'In-memory processing', 'SQL Script'],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 478,
      "code": "'POSTGRESQL': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 479,
      "code": "name: 'PostgreSQL',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 485,
      "code": "'MYSQL': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 486,
      "code": "name: 'MySQL',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 492,
      "code": "'SQLITE': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 493,
      "code": "name: 'SQLite',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 501,
      "code": "features: ['Advanced analytics', 'Partitioning', 'PL/SQL'],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 506,
      "code": "'SQLSERVER': {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 507,
      "code": "name: 'Microsoft SQL Server',",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 508,
      "code": "features: ['T-SQL', 'Columnstore indexes', 'In-memory OLTP'],",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 100,
      "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 90,
      "code": "/sp_executesql/i",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SQLUtils.js",
      "line": 100,
      "code": "const dangerousFunctions = ['exec', 'execute', 'eval', 'system'];",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 65,
      "code": "Log.error(\"Secure SQL function call failed\", error);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 88,
      "code": "errors: [\"SQL query must be a non-empty string\"]",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 127,
      "code": "errors.push(\"SQL contains potentially dangerous code\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 160,
      "code": "errors.push(\"Potential SQL injection pattern detected\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 171,
      "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 180,
      "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 326,
      "code": "Log.error(\"SQL WebSocket error\", error);",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "xss",
      "subtype": "unsafeSQLDisplay",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 334,
      "code": "// Additional validation for SQL-related messages",
      "message": "SQL content displayed without sanitization",
      "fix": "Sanitize SQL content before display"
    },
    {
      "type": "sqlInjection",
      "subtype": "dynamicQueryBuilding",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 171,
      "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
      "message": "Dynamic SQL query building without validation",
      "fix": "Validate and sanitize all SQL components"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 171,
      "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 274,
      "code": "errors.push(`Missing required field: ${field}`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 490,
      "code": "issues.push(`Too many joins (${joinCount})`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "sqlInjection",
      "subtype": "interpolatedSQL",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 497,
      "code": "issues.push(`Too many subqueries (${subqueryCount})`);",
      "message": "Template literal SQL with user input",
      "fix": "Use parameterized queries instead of template literals"
    },
    {
      "type": "csrf",
      "subtype": "missingCSRFToken",
      "severity": "CRITICAL",
      "file": "utils/SecurityUtils.js",
      "line": 72,
      "code": "oModel.callFunction(sFunctionName, secureParams);",
      "message": "Missing CSRF token in SQL operation",
      "fix": "Add CSRF token to all SQL operation requests"
    },
    {
      "type": "auth",
      "subtype": "hardcodedCredentials",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 29,
      "code": "reject(new Error('Failed to fetch CSRF token: ' + error));",
      "message": "Security issue: auth - hardcodedCredentials",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 232,
      "code": "Object.entries(parameters).forEach(([key, value]) => {",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "missingParameterValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 233,
      "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
      "message": "SQL parameters not validated",
      "fix": "Validate all SQL parameters"
    },
    {
      "type": "validation",
      "subtype": "noSQLSyntaxCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "No SQL syntax validation",
      "fix": "Implement SQL syntax validation"
    },
    {
      "type": "validation",
      "subtype": "missingSchemaValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 148,
      "code": "/information_schema/gi,",
      "message": "Database schema not validated",
      "fix": "Validate schema names and permissions"
    },
    {
      "type": "insecure",
      "subtype": "httpEndpoints",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 365,
      "code": "if (url.startsWith('http://')) {",
      "message": "Insecure HTTP endpoint for database operations",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "httpEndpoints",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 366,
      "code": "secureUrl = url.replace('http://', 'https://');",
      "message": "Insecure HTTP endpoint for database operations",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "unencryptedWebSocket",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 313,
      "code": "if (url.startsWith('ws://')) {",
      "message": "WebSocket connection without encryption",
      "fix": "Use wss:// protocol for SQL operations"
    },
    {
      "type": "insecure",
      "subtype": "unencryptedWebSocket",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 314,
      "code": "secureUrl = url.replace('ws://', 'wss://');",
      "message": "WebSocket connection without encryption",
      "fix": "Use wss:// protocol for SQL operations"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 313,
      "code": "if (url.startsWith('ws://')) {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 314,
      "code": "secureUrl = url.replace('ws://', 'wss://');",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 365,
      "code": "if (url.startsWith('http://')) {",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "insecure",
      "subtype": "hardcodedURLs",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 366,
      "code": "secureUrl = url.replace('http://', 'https://');",
      "message": "Security issue: insecure - hardcodedURLs",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "unhandledPromises",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 43,
      "code": "return this.getCSRFToken().then(function(token) {",
      "message": "Security issue: errorHandling - unhandledPromises",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "errorHandling",
      "subtype": "missingSQLErrorHandling",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "Security issue: errorHandling - missingSQLErrorHandling",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 217,
      "code": "createParameterizedQuery: function(baseQuery, parameters) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 224,
      "code": "query: null,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 239,
      "code": "query: validation.sanitized,",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "dataExposure",
      "subtype": "exposedQueryData",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 477,
      "code": "validateQueryComplexity: function(sql) {",
      "message": "Security issue: dataExposure - exposedQueryData",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 321,
      "code": "ws.addEventListener('open', function() {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 325,
      "code": "ws.addEventListener('error', function(error) {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 329,
      "code": "ws.addEventListener('message', function(event) {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 373,
      "code": "const originalAddEventListener = eventSource.addEventListener;",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "memoryLeaks",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 374,
      "code": "eventSource.addEventListener = function(type, listener, options) {",
      "message": "Security issue: resources - memoryLeaks",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unclosedConnections",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 318,
      "code": "const ws = new WebSocket(secureUrl);",
      "message": "Security issue: resources - unclosedConnections",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unclosedConnections",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 370,
      "code": "const eventSource = new EventSource(secureUrl);",
      "message": "Security issue: resources - unclosedConnections",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "resources",
      "subtype": "unboundedQueries",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "Security issue: resources - unboundedQueries",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 246,
      "code": "* Safely escape HTML content",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 250,
      "code": "escapeHTML: function(content) {",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 449,
      "code": "return this.escapeHTML(result);",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 457,
      "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sapFiori",
      "subtype": "missingSecurityUtil",
      "severity": "MEDIUM",
      "file": "utils/SecurityUtils.js",
      "line": 469,
      "code": "return this.escapeHTML(String(result));",
      "message": "Security issue: sapFiori - missingSecurityUtil",
      "fix": "Review and fix the security issue"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 39,
      "code": "* @param {object} mParameters - Parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 42,
      "code": "secureCallFunction: function(oModel, sFunctionName, mParameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 44,
      "code": "const secureParams = Object.assign({}, mParameters);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 80,
      "code": "* @param {object} params - Query parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 164,
      "code": "// Validate parameters if provided",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 168,
      "code": "// Check for SQL injection in parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 171,
      "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 178,
      "code": "// Check for proper parameterization",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 180,
      "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 192,
      "code": "* Sanitize SQL parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 193,
      "code": "* @param {any} param - Parameter to sanitize",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 194,
      "code": "* @returns {any} Sanitized parameter",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 196,
      "code": "sanitizeSQLParameter: function(param) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 212,
      "code": "* Create secure parameterized query",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 214,
      "code": "* @param {object} parameters - Parameters to bind",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 217,
      "code": "createParameterizedQuery: function(baseQuery, parameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 225,
      "code": "parameters: null",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 229,
      "code": "// Sanitize all parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 231,
      "code": "if (parameters) {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 232,
      "code": "Object.entries(parameters).forEach(([key, value]) => {",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 233,
      "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 240,
      "code": "parameters: sanitizedParams,",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "unsafeParameterBinding",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 256,
      "code": "* Validate database connection parameters",
      "message": "SQL parameters not properly bound",
      "fix": "Implement prepared statement parameter binding"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 36,
      "code": "* Safely execute OData function with CSRF protection",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 115,
      "code": "/execute\\s*\\(/gi,",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "noSQLInjectionCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "Missing SQL injection detection",
      "fix": "Add SQL injection detection and prevention"
    },
    {
      "type": "sqlSecurity",
      "subtype": "dynamicSQLConstruction",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 171,
      "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
      "message": "Dynamic SQL construction without validation",
      "fix": "Validate all dynamic SQL components"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 256,
      "code": "* Validate database connection parameters",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 257,
      "code": "* @param {object} connection - Connection configuration",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 260,
      "code": "validateConnection: function(connection) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 263,
      "code": "if (!connection) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 266,
      "code": "errors: [\"Connection configuration is required\"]",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 273,
      "code": "if (!connection[field]) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 278,
      "code": "// Check for secure connection",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 279,
      "code": "if (connection.host && !connection.ssl && !connection.host.includes('localhost')) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 280,
      "code": "errors.push(\"SSL/TLS encryption should be enabled for external connections\");",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 284,
      "code": "if (connection.password && connection.password.length < 8) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 289,
      "code": "if (connection.host) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 291,
      "code": "if (!hostPattern.test(connection.host)) {",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 303,
      "code": "* Create secure WebSocket connection for SQL operations",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 305,
      "code": "* @param {object} options - Connection options",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "databaseSecurity",
      "subtype": "missingConnectionValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 322,
      "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
      "message": "Database connection not validated",
      "fix": "Validate all database connections"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 57,
      "code": "Log.info(\"Secure SQL function call successful\", sFunctionName);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 65,
      "code": "Log.error(\"Secure SQL function call failed\", error);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 78,
      "code": "* Comprehensive SQL injection prevention",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 79,
      "code": "* @param {string} sql - SQL query to validate",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 83,
      "code": "validateSQL: function(sql, params) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 84,
      "code": "if (!sql || typeof sql !== 'string') {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 88,
      "code": "errors: [\"SQL query must be a non-empty string\"]",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 93,
      "code": "let sanitized = sql.trim();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 108,
      "code": "// SQL injection patterns",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 127,
      "code": "errors.push(\"SQL contains potentially dangerous code\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 132,
      "code": "// Check for SQL injection indicators",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 150,
      "code": "/mysql\\./gi,",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 152,
      "code": "// Blind SQL injection",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 160,
      "code": "errors.push(\"Potential SQL injection pattern detected\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 168,
      "code": "// Check for SQL injection in parameters",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 171,
      "code": "errors.push(`Potential SQL injection in parameter '${key}'`);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 180,
      "code": "errors.push(\"SQL contains string literals - use parameterized queries\");",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 187,
      "code": "original: sql",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 192,
      "code": "* Sanitize SQL parameters",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 196,
      "code": "sanitizeSQLParameter: function(param) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 202,
      "code": ".replace(/--/g, '') // Remove SQL comments",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 213,
      "code": "* @param {string} baseQuery - Base SQL query with placeholders",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 218,
      "code": "const validation = this.validateSQL(baseQuery);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 233,
      "code": "sanitizedParams[key] = this.sanitizeSQLParameter(value);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 303,
      "code": "* Create secure WebSocket connection for SQL operations",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 322,
      "code": "Log.info(\"Secure WebSocket connection established for SQL operations\", secureUrl);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 326,
      "code": "Log.error(\"SQL WebSocket error\", error);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 331,
      "code": "// Validate incoming SQL data",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 334,
      "code": "// Additional validation for SQL-related messages",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 335,
      "code": "if (data.type && data.type.includes('SQL') || data.type.includes('QUERY')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 336,
      "code": "const validation = this.validateSQL(data.sql || '');",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 338,
      "code": "Log.warning(\"Invalid SQL received via WebSocket\", validation.errors);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 355,
      "code": "* Create secure EventSource for SQL monitoring",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 381,
      "code": "// SQL-specific validation",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 382,
      "code": "if (data.sql || data.query) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 383,
      "code": "const validation = this.validateSQL(data.sql || data.query);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 385,
      "code": "Log.warning(\"Invalid SQL received via EventSource\", validation.errors);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 407,
      "code": "* Check user authorization for SQL operations",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 412,
      "code": "checkSQLAuth: function(operation, resource) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 414,
      "code": "// SQL-specific authorization checks",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 439,
      "code": "* Sanitize SQL query result for display",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 443,
      "code": "sanitizeSQLResult: function(result) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 457,
      "code": "sanitized[this.escapeHTML(key)] = this.sanitizeSQLResult(value);",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 466,
      "code": "return result.map(item => this.sanitizeSQLResult(item));",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 474,
      "code": "* @param {string} sql - SQL query",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 477,
      "code": "validateQueryComplexity: function(sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 478,
      "code": "if (!sql) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 479,
      "code": "return { isValid: false, reason: \"No SQL provided\" };",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 482,
      "code": "const lowerSQL = sql.toLowerCase();",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 487,
      "code": "const joinCount = (sql.match(/join/gi) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 494,
      "code": "const subqueryCount = (sql.match(/\\(/g) || []).length;",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 501,
      "code": "if (lowerSQL.includes('from') && lowerSQL.includes(',') && !lowerSQL.includes('where')) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryValidation",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 509,
      "code": "if (lowerSQL.includes(func)) {",
      "message": "Query validation missing",
      "fix": "Implement comprehensive query validation"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 36,
      "code": "* Safely execute OData function with CSRF protection",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 115,
      "code": "/execute\\s*\\(/gi,",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "noQueryComplexityCheck",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "No query complexity validation",
      "fix": "Add query complexity analysis"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 36,
      "code": "* Safely execute OData function with CSRF protection",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 115,
      "code": "/execute\\s*\\(/gi,",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    },
    {
      "type": "queryValidation",
      "subtype": "missingQueryTimeout",
      "severity": "HIGH",
      "file": "utils/SecurityUtils.js",
      "line": 117,
      "code": "/sp_executesql/gi,",
      "message": "Query execution without timeout",
      "fix": "Set appropriate query timeouts"
    }
  ]
}