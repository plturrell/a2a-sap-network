#!/usr/bin/env node

/**
 * @fileoverview Automated Development Environment Setup
 * @description Sets up everything needed for rapid development
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const crypto = require('crypto');

console.log('üöÄ A2A Network - Rapid Development Setup');
console.log('=====================================\n');

// Colors for console output
const colors = {
    reset: '\x1b[0m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    red: '\x1b[31m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function execCommand(command, description) {
    try {
        log(`\nüì¶ ${description}...`, 'blue');
        execSync(command, { stdio: 'inherit' });
        log(`‚úÖ ${description} completed`, 'green');
        return true;
    } catch (error) {
        log(`‚ùå ${description} failed: ${error.message}`, 'red');
        return false;
    }
}

// Step 1: Check Node.js version
function checkNodeVersion() {
    log('Checking Node.js version...', 'blue');
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
    
    if (majorVersion < 18) {
        log(`‚ùå Node.js version ${nodeVersion} is too old. Please upgrade to Node.js 18 or higher.`, 'red');
        process.exit(1);
    }
    
    log(`‚úÖ Node.js ${nodeVersion} detected`, 'green');
}

// Step 2: Generate development .env file
function generateEnvFile() {
    log('\nGenerating development .env file...', 'blue');
    
    const envContent = `# A2A Network Development Environment
# Auto-generated by setup-dev-environment.js
# Generated on: ${new Date().toISOString()}

# ================================
# DEVELOPMENT MODE SETTINGS
# ================================
NODE_ENV=development
LOG_LEVEL=debug
LOG_FORMAT=text
PORT=4004

# ================================
# AUTHENTICATION (Development Mode)
# ================================
USE_DEVELOPMENT_AUTH=true
ALLOW_NON_BTP_AUTH=true
BTP_ENVIRONMENT=false

# Development JWT Secret (auto-generated)
JWT_SECRET=${crypto.randomBytes(32).toString('base64')}
SESSION_SECRET=${crypto.randomBytes(32).toString('base64')}

# Development API Keys
VALID_API_KEYS=dev-key-001,dev-key-002,dev-key-003

# CORS for local development
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4004,http://localhost:8080

# ================================
# DATABASE (Local SQLite)
# ================================
DATABASE_TYPE=sqlite
SQLITE_DB_PATH=./data/a2a_development.db
SQLITE_JOURNAL_MODE=WAL
SQLITE_CONNECTION_POOL_SIZE=10

# HANA Configuration (disabled for local dev)
HANA_HOST=localhost
HANA_PORT=30015
HANA_DATABASE=A2A_DEV
HANA_USER=DEV_USER
HANA_PASSWORD=DevPassword123!
HANA_ENCRYPT=false

# ================================
# BLOCKCHAIN (Local Test Network)
# ================================
BLOCKCHAIN_RPC_URL=http://localhost:8545
CHAIN_ID=1337
BLOCKCHAIN_NETWORK_ID=1337
BLOCKCHAIN_NETWORK=development

# Local test contract addresses (will be deployed by setup)
AGENT_REGISTRY_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3
MESSAGE_ROUTER_ADDRESS=0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512
BUSINESS_DATA_CLOUD_ADDRESS=0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0
SERVICE_MARKETPLACE_ADDRESS=0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9
REPUTATION_CONTRACT_ADDRESS=0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9

# Test wallet for development
DEFAULT_ACCOUNT=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
CONTRACT_DEPLOYMENT_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# ================================
# AGENT ENDPOINTS (Local Mock)
# ================================
AGENT_MANAGER_ENDPOINT=http://localhost:5001
AGENT0_ENDPOINT=http://localhost:5002
AGENT1_ENDPOINT=http://localhost:5003
AGENT2_ENDPOINT=http://localhost:5004
AGENT3_ENDPOINT=http://localhost:5005
AGENT4_ENDPOINT=http://localhost:5006
DATA_MANAGER_ENDPOINT=http://localhost:5007
CATALOG_MANAGER_ENDPOINT=http://localhost:5008
AGENT_BUILDER_ENDPOINT=http://localhost:5009
CALCULATION_AGENT_ENDPOINT=http://localhost:5010
REASONING_AGENT_ENDPOINT=http://localhost:5011
SQL_AGENT_ENDPOINT=http://localhost:5012
DEVELOPER_PORTAL_ENDPOINT=http://localhost:5013
AGENT_BUILDER_SERVICE_ENDPOINT=http://localhost:5014

# Mock agent addresses
AGENT_MANAGER_ADDRESS=0x70997970C51812dc3A010C7d01b50e0d17dc79C8
AGENT0_ADDRESS=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC
AGENT1_ADDRESS=0x90F79bf6EB2c4f870365E785982E1f101E93b906
AGENT2_ADDRESS=0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65
AGENT3_ADDRESS=0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc
AGENT4_ADDRESS=0x976EA74026E726554dB657fA54763abd0C3a0aa9
DATA_MANAGER_ADDRESS=0x14dC79964da2C08b23698B3D3cc7Ca32193d9955
CATALOG_MANAGER_ADDRESS=0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f
AGENT_BUILDER_ADDRESS=0xa0Ee7A142d267C1f36714E4a8F75612F20a79720
CALCULATION_AGENT_ADDRESS=0xBcd4042DE499D14e55001CcbB24a551F3b954096
REASONING_AGENT_ADDRESS=0x71bE63f3384f5fb98995898A86B02Fb2426c5788
SQL_AGENT_ADDRESS=0xFABB0ac9d68B0B445fB7357272Ff202C5651694a
DEVELOPER_PORTAL_ADDRESS=0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec
AGENT_BUILDER_SERVICE_ADDRESS=0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097

# ================================
# FEATURES & MONITORING
# ================================
ENABLE_BLOCKCHAIN=true
ENABLE_WEBSOCKET=true
ENABLE_CACHE=true
ENABLE_METRICS=true
METRICS_ENABLED=true

# Health check URLs
HEALTH_CHECK_URL=http://localhost:4004/health
UI_HEALTH_CHECK_URL=http://localhost:4004

# ================================
# EXTERNAL SERVICES (Optional)
# ================================
# Leave empty for local development
ALCHEMY_API_KEY=
ETHERSCAN_API_KEY=
INFURA_API_KEY=

# Redis (optional, will use in-memory cache if not available)
REDIS_URL=redis://localhost:6379

# ================================
# DEVELOPMENT TOOLS
# ================================
# Enable hot reload
WATCH_MODE=true
# Enable detailed logging
DEBUG=true
# Skip authentication for development
SKIP_AUTH=true
`;

    const envPath = path.join(process.cwd(), '.env');
    
    // Backup existing .env if it exists
    if (fs.existsSync(envPath)) {
        const backupPath = `${envPath}.backup.${Date.now()}`;
        fs.copyFileSync(envPath, backupPath);
        log(`üìÅ Backed up existing .env to ${backupPath}`, 'yellow');
    }
    
    await fs.writeFile(envPath, envContent);
    log('‚úÖ Development .env file created', 'green');
}

// Step 3: Create necessary directories
function createDirectories() {
    log('\nCreating necessary directories...', 'blue');
    
    const directories = [
        'data',
        'logs',
        'temp',
        'gen',
        'test-results',
        'coverage'
    ];
    
    directories.forEach(async dir => {
        const dirPath = path.join(process.cwd(), dir);
        if (!fs.existsSync(dirPath)) {
            fs.mkdirSync(dirPath, { recursive: true });
            log(`üìÅ Created ${dir}/`, 'green');
        }
    });
}

// Step 4: Install dependencies
function installDependencies() {
    return execCommand('npm install', 'Installing dependencies');
}

// Step 5: Setup local blockchain
function setupLocalBlockchain() {
    log('\nSetting up local blockchain...', 'blue');
    
    // Create a simple script to start local blockchain
    const blockchainScript = `#!/bin/bash
# Local blockchain startup script

echo "üîó Starting local Ethereum blockchain..."

# Check if ganache is installed
if ! command -v ganache &> /dev/null; then
    echo "Installing ganache-cli..."
    npm install -g ganache-cli
fi

# Start ganache with deterministic accounts
ganache-cli \\
  --deterministic \\
  --accounts 20 \\
  --host 0.0.0.0 \\
  --port 8545 \\
  --gasLimit 12000000 \\
  --quiet &

echo "‚úÖ Local blockchain started on http://localhost:8545"
echo "üìù Using deterministic accounts for testing"
`;

    const scriptPath = path.join(process.cwd(), 'scripts', 'start-local-blockchain.sh');
    await fs.writeFile(scriptPath, blockchainScript);
    fs.chmodSync(scriptPath, '755');
    
    log('‚úÖ Local blockchain setup script created', 'green');
}

// Step 6: Deploy test contracts
function createContractDeploymentScript() {
    log('\nCreating contract deployment script...', 'blue');
    
    const deployScript = `const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

async function deployTestContracts() {
    console.log('üöÄ Deploying test contracts to local blockchain...');
    
    // Connect to local blockchain
    const provider = new ethers.JsonRpcProvider('http://localhost:8545');
    const signer = await provider.getSigner(0);
    
    // Simple test contract ABI and bytecode
    const TestContract = {
        abi: [
            "function register(string memory name, address addr) public",
            "function getAgent(address addr) public view returns (string memory)",
            "event AgentRegistered(address indexed agent, string name)"
        ],
        bytecode: "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe..."
    };
    
    // Deploy multiple test contracts
    const contracts = [
        'AgentRegistry',
        'MessageRouter',
        'BusinessDataCloud',
        'ServiceMarketplace',
        'ReputationExchange'
    ];
    
    const deployedAddresses = {};
    
    for (const contractName of contracts) {
        console.log(\`Deploying \${contractName}...\`);
        const factory = new ethers.ContractFactory(TestContract.abi, TestContract.bytecode, signer);
        const contract = await factory.deploy();
        await contract.waitForDeployment();
        const address = await contract.getAddress();
        deployedAddresses[contractName] = address;
        console.log(\`‚úÖ \${contractName} deployed at: \${address}\`);
    }
    
    // Save deployed addresses
    const addressesPath = path.join(__dirname, '../data/deployed-contracts.json');
    await fs.writeFile(addressesPath, JSON.stringify(deployedAddresses));
    
    console.log('\\n‚úÖ All test contracts deployed successfully!');
    return deployedAddresses;
}

if (require.main === module) {
    deployTestContracts().catch(console.error);
}

module.exports = { deployTestContracts };
`;

    const scriptPath = path.join(process.cwd(), 'scripts', 'deployTestContracts.js');
    await fs.writeFile(scriptPath, deployScript);
    
    log('‚úÖ Contract deployment script created', 'green');
}

// Step 7: Initialize database
function initializeDatabase() {
    return execCommand('npm run db:deploy', 'Initializing database');
}

// Step 8: Create development startup script
function createStartupScript() {
    log('\nCreating rapid development startup script...', 'blue');
    
    const startScript = `#!/usr/bin/env node

/**
 * @fileoverview Quick Start Script for A2A Network Development
 * @description Starts all services needed for development
 */

const { spawn } = require('child_process');
const chalk = require('chalk');

console.log(chalk.blue.bold('üöÄ A2A Network - Quick Start'));
console.log(chalk.blue('============================\\n'));

// Check if setup has been run
const fs = require('fs');
if (!fs.existsSync('.env')) {
    console.log(chalk.red('‚ùå No .env file found!'));
    console.log(chalk.yellow('Please run: npm run setup:dev'));
    process.exit(1);
}

// Start services
const services = [];

// 1. Start local blockchain (if enabled)
if (process.env.ENABLE_BLOCKCHAIN === 'true') {
    console.log(chalk.yellow('üîó Starting local blockchain...'));
    const blockchain = spawn('npm', ['run', 'blockchain:local'], {
        stdio: 'pipe',
        shell: true
    });
    services.push(blockchain);
}

// 2. Start Redis (optional)
try {
    const redis = spawn('redis-server', [], {
        stdio: 'pipe'
    });
    services.push(redis);
    console.log(chalk.green('‚úÖ Redis started'));
} catch (e) {
    console.log(chalk.yellow('‚ö†Ô∏è  Redis not available, using in-memory cache'));
}

// 3. Start CAP server with watch mode
console.log(chalk.yellow('üöÄ Starting CAP server with hot reload...'));
const server = spawn('npm', ['run', 'watch'], {
    stdio: 'inherit',
    shell: true
});
services.push(server);

// Handle shutdown
process.async on('SIGINT', () => {
    console.log(chalk.red('\\nüëã Shutting down services...'));
    services.forEach(service => {
        if (service && !service.killed) {
            service.kill();
        }
    });
    process.exit(0);
});

console.log(chalk.green.bold('\\n‚úÖ All services started!'));
console.log(chalk.cyan('üì± UI: http://localhost:4004'));
console.log(chalk.cyan('üì° API: http://localhost:4004/api/v1/network'));
console.log(chalk.cyan('üè• Health: http://localhost:4004/health\\n'));
`;

    const scriptPath = path.join(process.cwd(), 'scripts', 'quick-start.js');
    await fs.writeFile(scriptPath, startScript);
    fs.chmodSync(scriptPath, '755');
    
    log('‚úÖ Quick start script created', 'green');
}

// Step 9: Update package.json with new scripts
function updatePackageJson() {
    log('\nUpdating package.json with development scripts...', 'blue');
    
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));
    
    // Add new development scripts
    const newScripts = {
        "setup:dev": "node scripts/setup-dev-environment.js",
        "dev": "node scripts/quick-start.js",
        "dev:clean": "rm -rf node_modules data logs temp gen coverage .env && npm run setup:dev",
        "blockchain:local": "sh scripts/start-local-blockchain.sh",
        "contracts:deploy": "node scripts/deployTestContracts.js",
        "db:reset": "rm -f data/*.db && npm run db:deploy && npm run db:seed",
        "test:quick": "jest --maxWorkers=4",
        "lint:quick": "eslint srv/ app/ --fix --quiet",
        "validate": "npm run lint:quick && npm run test:quick"
    };
    
    packageJson.scripts = { ...packageJson.scripts, ...newScripts };
    
    await fs.writeFile(packageJsonPath, JSON.stringify(packageJson));
    log('‚úÖ package.json updated with rapid development scripts', 'green');
}

// Main setup function
async function main() {
    try {
        checkNodeVersion();
        generateEnvFile();
        createDirectories();
        
        if (!installDependencies()) {
            throw new Error('Failed to install dependencies');
        }
        
        setupLocalBlockchain();
        createContractDeploymentScript();
        
        if (!initializeDatabase()) {
            log('‚ö†Ô∏è  Database initialization failed, but continuing...', 'yellow');
        }
        
        createStartupScript();
        updatePackageJson();
        
        log('\nüéâ Development environment setup complete!', 'green');
        log('\nQuick start commands:', 'blue');
        log('  npm run dev          - Start all services', 'cyan');
        log('  npm run dev:clean    - Clean and reinstall everything', 'cyan');
        log('  npm run test:quick   - Run tests quickly', 'cyan');
        log('  npm run validate     - Lint and test', 'cyan');
        log('\nHappy coding! üöÄ\n', 'green');
        
    } catch (error) {
        log(`\n‚ùå Setup failed: ${error.message}`, 'red');
        process.exit(1);
    }
}

// Run setup
main();