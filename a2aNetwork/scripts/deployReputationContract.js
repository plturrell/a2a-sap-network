#!/usr/bin/env node

/**
 * Deployment script for ReputationExchange smart contract
 * This script deploys the reputation system smart contract to the blockchain
 */

const { ethers } = require('hardhat');
const fs = require('fs');
const path = require('path');

async function main() {
    console.log('🚀 Starting ReputationExchange contract deployment...\n');

    // Get the deployer account
    const [deployer] = await ethers.getSigners();
    console.log('📋 Deploying with account:', deployer.address);

    // Check balance
    const balance = await deployer.getBalance();
    console.log('💰 Account balance:', ethers.utils.formatEther(balance), 'ETH\n');

    try {
        // Get the contract factory
        console.log('📦 Getting contract factory...');
        const ReputationExchange = await ethers.getContractFactory('ReputationExchange');

        // Deploy the contract
        console.log('🏗️  Deploying ReputationExchange contract...');
        const reputationExchange = await ReputationExchange.deploy();

        // Wait for deployment
        console.log('⏳ Waiting for deployment confirmation...');
        await reputationExchange.deployed();

        console.log('✅ ReputationExchange deployed successfully!');
        console.log('📍 Contract address:', reputationExchange.address);
        console.log('🔗 Transaction hash:', reputationExchange.deployTransaction.hash);

        // Verify contract constants
        console.log('\n🔍 Verifying contract constants:');
        console.log('   MAX_REPUTATION:', await reputationExchange.MAX_REPUTATION());
        console.log('   DEFAULT_REPUTATION:', await reputationExchange.DEFAULT_REPUTATION());
        console.log('   DAILY_ENDORSEMENT_LIMIT:', await reputationExchange.DAILY_ENDORSEMENT_LIMIT());

        // Unpause the contract (it starts paused for security)
        console.log('\n🔓 Unpausing contract...');
        const unpauseTx = await reputationExchange.unpause();
        await unpauseTx.wait();
        console.log('✅ Contract unpaused successfully');

        // Save deployment info
        const deploymentInfo = {
            contractAddress: reputationExchange.address,
            deployerAddress: deployer.address,
            transactionHash: reputationExchange.deployTransaction.hash,
            blockNumber: reputationExchange.deployTransaction.blockNumber,
            deployedAt: new Date().toISOString(),
            network: hre.network.name,
            gasUsed: reputationExchange.deployTransaction.gasLimit?.toString(),
            contractConstants: {
                MAX_REPUTATION: (await reputationExchange.MAX_REPUTATION()).toString(),
                MIN_REPUTATION: (await reputationExchange.MIN_REPUTATION()).toString(),
                DEFAULT_REPUTATION: (await reputationExchange.DEFAULT_REPUTATION()).toString(),
                MAX_ENDORSEMENT_AMOUNT: (await reputationExchange.MAX_ENDORSEMENT_AMOUNT()).toString(),
                DAILY_ENDORSEMENT_LIMIT: (await reputationExchange.DAILY_ENDORSEMENT_LIMIT()).toString(),
                WEEKLY_PEER_LIMIT: (await reputationExchange.WEEKLY_PEER_LIMIT()).toString(),
                RECIPROCAL_COOLDOWN: (await reputationExchange.RECIPROCAL_COOLDOWN()).toString()
            }
        };

        const deploymentsDir = path.join(__dirname, '../deployments');
        if (!fs.existsSync(deploymentsDir)) {
            fs.mkdirSync(deploymentsDir, { recursive: true });
        }

        const deploymentFile = path.join(deploymentsDir, `reputation-exchange-${hre.network.name}.json`);
        await fs.writeFile(deploymentFile, JSON.stringify(deploymentInfo));

        console.log('\n💾 Deployment info saved to:', deploymentFile);

        // Generate configuration for A2A Network integration
        const configTemplate = {
            blockchain: {
                reputationExchange: {
                    address: reputationExchange.address,
                    abi: 'ReputationExchange.json', // ABI file will be generated by Hardhat
                    network: hre.network.name,
                    deployedAt: deploymentInfo.deployedAt
                }
            }
        };

        const configFile = path.join(__dirname, '../config/blockchain-reputation.json');
        await fs.writeFile(configFile, JSON.stringify(configTemplate));

        console.log('⚙️  Configuration saved to:', configFile);

        // Print integration instructions
        console.log('\n📝 Integration Instructions:');
        console.log('   1. Update your .env file with:');
        console.log(`      REPUTATION_CONTRACT_ADDRESS=${reputationExchange.address}`);
        console.log('   2. Copy the ABI from artifacts/contracts/ReputationExchange.sol/ReputationExchange.json');
        console.log('   3. Update blockchain service configuration');
        console.log('   4. Test the integration with sample endorsements');

        // Register some sample agents for testing
        if (hre.network.name === 'localhost' || hre.network.name === 'hardhat') {
            console.log('\n🧪 Registering sample agents for testing...');

            const sampleAgents = [
                {
                    address: '0x1234567890123456789012345678901234567890',
                    name: 'Agent Alpha',
                    endpoint: 'http://localhost:8001'
                },
                {
                    address: '0x0987654321098765432109876543210987654321',
                    name: 'Agent Beta',
                    endpoint: 'http://localhost:8002'
                }
            ];

            for (const agent of sampleAgents) {
                const tx = await reputationExchange.registerAgent(
                    agent.address,
                    agent.name,
                    agent.endpoint
                );
                await tx.wait();
                console.log(`   ✅ Registered ${agent.name} (${agent.address})`);
            }
        }

        console.log('\n🎉 Deployment completed successfully!\n');

    } catch (error) {
        console.error('❌ Deployment failed:', error);
        process.exit(1);
    }
}

// Handle errors
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error('💥 Unexpected error:', error);
        process.exit(1);
    });

module.exports = main;